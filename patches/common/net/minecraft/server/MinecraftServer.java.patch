--- ../src_base/common/net/minecraft/server/MinecraftServer.java
+++ ../src_work/common/net/minecraft/server/MinecraftServer.java
@@ -9,6 +9,7 @@
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Date;
+import java.util.Hashtable;
 import java.util.Iterator;
 import java.util.List;
 import java.util.logging.Level;
@@ -16,6 +17,7 @@
 import cpw.mods.fml.common.FMLCommonHandler;
 import cpw.mods.fml.relauncher.ArgsWrapper;
 import cpw.mods.fml.relauncher.FMLRelauncher;
+
 import net.minecraft.src.AnvilSaveConverter;
 import net.minecraft.src.AxisAlignedBB;
 import net.minecraft.src.CallableIsServerModded;
@@ -58,6 +60,9 @@
 import net.minecraft.src.WorldServerMulti;
 import net.minecraft.src.WorldSettings;
 import net.minecraft.src.WorldType;
+import net.minecraftforge.common.DimensionManager;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.world.WorldEvent;
 
 public abstract class MinecraftServer implements Runnable, IPlayerUsage, ICommandSender
 {
@@ -129,7 +134,10 @@
     public final long[] tickTimeArray = new long[100];
 
     /** stats are [dimension][tick%100] system.nanoTime is stored. */
-    public long[][] timeOfLastDimenstionTick;
+    //public long[][] timeOfLastDimenstionTick;
+    public List<WorldServer> worlds = new ArrayList<WorldServer>();
+    public Hashtable<Integer, long[]> worldTickTimes = new Hashtable<Integer, long[]>();
+    public int spawnProtectionSize = 16;
     private KeyPair serverKeyPair;
 
     /** Username of the server owner (for integrated servers) */
@@ -196,8 +204,6 @@
     {
         this.convertMapIfNeeded(par1Str);
         this.setUserMessage("menu.loadingLevel");
-        this.theWorldServer = new WorldServer[3];
-        this.timeOfLastDimenstionTick = new long[this.theWorldServer.length][100];
         ISaveHandler var6 = this.anvilConverterForAnvilFile.getSaveLoader(par1Str, true);
         WorldInfo var8 = var6.loadWorldInfo();
         WorldSettings var7;
@@ -216,46 +222,18 @@
             var7.enableBonusChest();
         }
 
-        for (int var9 = 0; var9 < this.theWorldServer.length; ++var9)
-        {
-            byte var10 = 0;
-
-            if (var9 == 1)
-            {
-                var10 = -1;
-            }
-
-            if (var9 == 2)
-            {
-                var10 = 1;
-            }
-
-            if (var9 == 0)
-            {
-                if (this.isDemo())
-                {
-                    this.theWorldServer[var9] = new DemoWorldServer(this, var6, par2Str, var10, this.theProfiler);
-                }
-                else
-                {
-                    this.theWorldServer[var9] = new WorldServer(this, var6, par2Str, var10, var7, this.theProfiler);
-                }
-            }
-            else
-            {
-                this.theWorldServer[var9] = new WorldServerMulti(this, var6, par2Str, var10, var7, this.theWorldServer[0], this.theProfiler);
-            }
-
-            this.theWorldServer[var9].addWorldAccess(new WorldManager(this, this.theWorldServer[var9]));
-
+        WorldServer overWorld = (isDemo() ? new DemoWorldServer(this, var6, par2Str, 0, theProfiler) : new WorldServer(this, var6, par2Str, 0, var7, theProfiler));
+        for (int dim : DimensionManager.getIDs())
+        {
+            WorldServer world = (dim == 0 ? overWorld : new WorldServerMulti(this, var6, par2Str, dim, var7, overWorld, theProfiler));
+            world.addWorldAccess(new WorldManager(this, world));
             if (!this.isSinglePlayer())
             {
-                this.theWorldServer[var9].getWorldInfo().setGameType(this.getGameType());
-            }
-
-            this.serverConfigManager.setPlayerManager(this.theWorldServer);
-        }
-
+                world.getWorldInfo().setGameType(this.getGameType());
+            }
+        }
+
+        this.serverConfigManager.setPlayerManager(new WorldServer[]{ overWorld });
         this.setDifficultyForAllDimensions(this.getDifficulty());
         this.initialWorldChunkLoad();
     }
@@ -401,6 +379,7 @@
             {
                 WorldServer var4 = var1[var3];
                 var4.flush();
+                MinecraftForge.EVENT_BUS.post(new WorldEvent.Unload(var4));
             }
 
             if (this.usageSnooper != null && this.usageSnooper.isSnooperRunning())
@@ -611,13 +590,13 @@
     {
         this.theProfiler.startSection("levels");
 
-        for (int var1 = 0; var1 < this.theWorldServer.length; ++var1)
+        for (Integer id : DimensionManager.getIDs())
         {
             long var2 = System.nanoTime();
 
-            if (var1 == 0 || this.getAllowNether())
-            {
-                WorldServer var4 = this.theWorldServer[var1];
+            if (id == 0 || this.getAllowNether())
+            {
+                WorldServer var4 = DimensionManager.getWorld(id);
                 this.theProfiler.startSection(var4.getWorldInfo().getWorldName());
 
                 if (this.tickCounter % 20 == 0)
@@ -648,9 +627,11 @@
                 }
             }
 
-            this.timeOfLastDimenstionTick[var1][this.tickCounter % 100] = System.nanoTime() - var2;
-        }
-
+            worldTickTimes.get(id)[this.tickCounter % 100] = System.nanoTime() - var2;
+        }
+
+        this.theProfiler.startSection("dim_unloading");
+        DimensionManager.unloadWorlds(worldTickTimes);
         this.theProfiler.endStartSection("connection");
         this.getNetworkThread().networkTick();
         this.theProfiler.endStartSection("players");
@@ -697,7 +678,12 @@
 
     public WorldServer worldServerForDimension(int par1)
     {
-        return par1 == -1 ? this.theWorldServer[1] : (par1 == 1 ? this.theWorldServer[2] : this.theWorldServer[0]);
+        WorldServer ret = DimensionManager.getWorld(par1);
+        if (ret == null) {
+            DimensionManager.initDimension(par1);
+            ret = DimensionManager.getWorld(par1);
+        }
+        return ret; //Why's this default to the overworld where everything else follows the style of 'you did it wrong so fail'?  Why not return null and let the caller be intelligent?
     }
 
     @SideOnly(Side.SERVER)
@@ -786,7 +772,7 @@
 
     public String getServerModName()
     {
-        return "vanilla";
+        return "forge,fml";
     }
 
     /**
@@ -1061,6 +1047,7 @@
             if (var2 != null)
             {
                 var2.flush();
+                MinecraftForge.EVENT_BUS.post(new WorldEvent.Unload(var2));
             }
         }
 
