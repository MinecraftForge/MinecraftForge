--- ../src_base/common/net/minecraft/src/World.java
+++ ../src_work/common/net/minecraft/src/World.java
@@ -10,8 +10,21 @@
 import java.util.Random;
 import java.util.Set;
 
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.common.ForgeDirection;
+import net.minecraftforge.event.entity.EntityEvent;
+import net.minecraftforge.event.world.WorldEvent;
+import net.minecraftforge.event.entity.PlaySoundAtEntityEvent;
+
 public abstract class World implements IBlockAccess
 {
+    /**
+     * Used in the getEntitiesWithinAABB functions to expand the search area for entities.
+     * Modders should change this variable to a higher value if it is less then the radius 
+     * of one of there entities.
+     */
+    public static double MAX_ENTITY_RADIUS = 2.0D;
+
     /**
      * boolean; if true updates scheduled by scheduleBlockUpdate happen immediately
      */
@@ -133,17 +146,7 @@
      */
     public BiomeGenBase getBiomeGenForCoords(int par1, int par2)
     {
-        if (this.blockExists(par1, 0, par2))
-        {
-            Chunk var3 = this.getChunkFromBlockCoords(par1, par2);
-
-            if (var3 != null)
-            {
-                return var3.getBiomeGenForWorldCoords(par1 & 15, par2 & 15, this.provider.worldChunkMgr);
-            }
-        }
-
-        return this.provider.worldChunkMgr.getBiomeGenAt(par1, par2);
+        return provider.getBiomeGenForCoords(par1, par2);
     }
 
     public WorldChunkManager getWorldChunkManager()
@@ -162,11 +165,7 @@
         this.theProfiler = par5Profiler;
         this.worldInfo = new WorldInfo(par4WorldSettings, par2Str);
         this.provider = par3WorldProvider;
-        this.mapStorage = new MapStorage(par1ISaveHandler);
-        par3WorldProvider.registerWorld(this);
-        this.chunkProvider = this.createChunkProvider();
-        this.calculateInitialSkylight();
-        this.calculateInitialWeather();
+        //Moved to WorldClient
     }
 
     public World(ISaveHandler par1ISaveHandler, String par2Str, WorldSettings par3WorldSettings, WorldProvider par4WorldProvider, Profiler par5Profiler)
@@ -177,7 +176,7 @@
         this.isRemote = false;
         this.saveHandler = par1ISaveHandler;
         this.theProfiler = par5Profiler;
-        this.mapStorage = new MapStorage(par1ISaveHandler);
+        this.mapStorage = getMapStorage(par1ISaveHandler);
         this.worldInfo = par1ISaveHandler.loadWorldInfo();
 
         if (par4WorldProvider != null)
@@ -213,6 +212,18 @@
 
         this.calculateInitialSkylight();
         this.calculateInitialWeather();
+        MinecraftForge.EVENT_BUS.post(new WorldEvent.Load(this));
+    }
+
+    //Provides solution for different worlds getting different copies of the same data, potentially rewriting the data or causing race conditions/stale data
+    private static MapStorage s_mapStorage;
+    private static ISaveHandler s_savehandler;
+    private MapStorage getMapStorage(ISaveHandler savehandler) {
+        if (s_savehandler != savehandler || s_mapStorage == null) {
+            s_mapStorage = new MapStorage(savehandler);
+            s_savehandler = savehandler;
+        }
+        return s_mapStorage;
     }
 
     /**
@@ -269,7 +280,8 @@
      */
     public boolean isAirBlock(int par1, int par2, int par3)
     {
-        return this.getBlockId(par1, par2, par3) == 0;
+        int id = getBlockId(par1, par2, par3);
+        return id == 0 || Block.blocksList[id] == null || Block.blocksList[id].isAirBlock(this, par1, par2, par3);
     }
 
     /**
@@ -278,7 +290,8 @@
     public boolean blockHasTileEntity(int par1, int par2, int par3)
     {
         int var4 = this.getBlockId(par1, par2, par3);
-        return Block.blocksList[var4] != null && Block.blocksList[var4].hasTileEntity();
+        int meta = this.getBlockMetadata(par1, par2, par3);
+        return Block.blocksList[var4] != null && Block.blocksList[var4].hasTileEntity(meta);
     }
 
     /**
@@ -977,7 +990,7 @@
      */
     public boolean isDaytime()
     {
-        return this.skylightSubtracted < 4;
+        return provider.isDaytime();
     }
 
     /**
@@ -1009,7 +1022,7 @@
                 int var12 = this.getBlockMetadata(var8, var9, var10);
                 Block var13 = Block.blocksList[var11];
 
-                if ((!par4 || var13 == null || var13.getCollisionBoundingBoxFromPool(this, var8, var9, var10) != null) && var11 > 0 && var13.canCollideCheck(var12, par3))
+                if (var13 != null && (!par4 || var13 == null || var13.getCollisionBoundingBoxFromPool(this, var8, var9, var10) != null) && var11 > 0 && var13.canCollideCheck(var12, par3))
                 {
                     MovingObjectPosition var14 = var13.collisionRayTrace(this, var8, var9, var10, par1Vec3, par2Vec3);
 
@@ -1209,6 +1222,12 @@
      */
     public void playSoundAtEntity(Entity par1Entity, String par2Str, float par3, float par4)
     {
+        PlaySoundAtEntityEvent event = new PlaySoundAtEntityEvent(par1Entity, par2Str, par3, par4);
+        if (MinecraftForge.EVENT_BUS.post(event))
+        {
+            return;
+        }
+        par2Str = event.name;
         if (par1Entity != null && par2Str != null)
         {
             Iterator var5 = this.worldAccesses.iterator();
@@ -1552,76 +1571,13 @@
     }
 
     @SideOnly(Side.CLIENT)
-
+    
     /**
      * Calculates the color for the skybox
      */
     public Vec3 getSkyColor(Entity par1Entity, float par2)
     {
-        float var3 = this.getCelestialAngle(par2);
-        float var4 = MathHelper.cos(var3 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
-
-        if (var4 < 0.0F)
-        {
-            var4 = 0.0F;
-        }
-
-        if (var4 > 1.0F)
-        {
-            var4 = 1.0F;
-        }
-
-        int var5 = MathHelper.floor_double(par1Entity.posX);
-        int var6 = MathHelper.floor_double(par1Entity.posZ);
-        BiomeGenBase var7 = this.getBiomeGenForCoords(var5, var6);
-        float var8 = var7.getFloatTemperature();
-        int var9 = var7.getSkyColorByTemp(var8);
-        float var10 = (float)(var9 >> 16 & 255) / 255.0F;
-        float var11 = (float)(var9 >> 8 & 255) / 255.0F;
-        float var12 = (float)(var9 & 255) / 255.0F;
-        var10 *= var4;
-        var11 *= var4;
-        var12 *= var4;
-        float var13 = this.getRainStrength(par2);
-        float var14;
-        float var15;
-
-        if (var13 > 0.0F)
-        {
-            var14 = (var10 * 0.3F + var11 * 0.59F + var12 * 0.11F) * 0.6F;
-            var15 = 1.0F - var13 * 0.75F;
-            var10 = var10 * var15 + var14 * (1.0F - var15);
-            var11 = var11 * var15 + var14 * (1.0F - var15);
-            var12 = var12 * var15 + var14 * (1.0F - var15);
-        }
-
-        var14 = this.getWeightedThunderStrength(par2);
-
-        if (var14 > 0.0F)
-        {
-            var15 = (var10 * 0.3F + var11 * 0.59F + var12 * 0.11F) * 0.2F;
-            float var16 = 1.0F - var14 * 0.75F;
-            var10 = var10 * var16 + var15 * (1.0F - var16);
-            var11 = var11 * var16 + var15 * (1.0F - var16);
-            var12 = var12 * var16 + var15 * (1.0F - var16);
-        }
-
-        if (this.lightningFlash > 0)
-        {
-            var15 = (float)this.lightningFlash - par2;
-
-            if (var15 > 1.0F)
-            {
-                var15 = 1.0F;
-            }
-
-            var15 *= 0.45F;
-            var10 = var10 * (1.0F - var15) + 0.8F * var15;
-            var11 = var11 * (1.0F - var15) + 0.8F * var15;
-            var12 = var12 * (1.0F - var15) + 1.0F * var15;
-        }
-
-        return Vec3.getVec3Pool().getVecFromPool((double)var10, (double)var11, (double)var12);
+        return provider.getSkyColor(par1Entity, par2);
     }
 
     /**
@@ -1652,50 +1608,7 @@
     @SideOnly(Side.CLIENT)
     public Vec3 drawClouds(float par1)
     {
-        float var2 = this.getCelestialAngle(par1);
-        float var3 = MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
-
-        if (var3 < 0.0F)
-        {
-            var3 = 0.0F;
-        }
-
-        if (var3 > 1.0F)
-        {
-            var3 = 1.0F;
-        }
-
-        float var4 = (float)(this.cloudColour >> 16 & 255L) / 255.0F;
-        float var5 = (float)(this.cloudColour >> 8 & 255L) / 255.0F;
-        float var6 = (float)(this.cloudColour & 255L) / 255.0F;
-        float var7 = this.getRainStrength(par1);
-        float var8;
-        float var9;
-
-        if (var7 > 0.0F)
-        {
-            var8 = (var4 * 0.3F + var5 * 0.59F + var6 * 0.11F) * 0.6F;
-            var9 = 1.0F - var7 * 0.95F;
-            var4 = var4 * var9 + var8 * (1.0F - var9);
-            var5 = var5 * var9 + var8 * (1.0F - var9);
-            var6 = var6 * var9 + var8 * (1.0F - var9);
-        }
-
-        var4 *= var3 * 0.9F + 0.1F;
-        var5 *= var3 * 0.9F + 0.1F;
-        var6 *= var3 * 0.85F + 0.15F;
-        var8 = this.getWeightedThunderStrength(par1);
-
-        if (var8 > 0.0F)
-        {
-            var9 = (var4 * 0.3F + var5 * 0.59F + var6 * 0.11F) * 0.2F;
-            float var10 = 1.0F - var8 * 0.95F;
-            var4 = var4 * var10 + var9 * (1.0F - var10);
-            var5 = var5 * var10 + var9 * (1.0F - var10);
-            var6 = var6 * var10 + var9 * (1.0F - var10);
-        }
-
-        return Vec3.getVec3Pool().getVecFromPool((double)var4, (double)var5, (double)var6);
+        return provider.drawClouds(par1, this.cloudColour);
     }
 
     @SideOnly(Side.CLIENT)
@@ -1740,26 +1653,13 @@
     }
 
     @SideOnly(Side.CLIENT)
-
+    
     /**
      * How bright are stars in the sky
      */
     public float getStarBrightness(float par1)
     {
-        float var2 = this.getCelestialAngle(par1);
-        float var3 = 1.0F - (MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.25F);
-
-        if (var3 < 0.0F)
-        {
-            var3 = 0.0F;
-        }
-
-        if (var3 > 1.0F)
-        {
-            var3 = 1.0F;
-        }
-
-        return var3 * var3 * 0.5F;
+        return provider.getStarBrightness(par1);
     }
 
     /**
@@ -1887,7 +1787,7 @@
 
                     if (var8 != null)
                     {
-                        var8.removeChunkBlockTileEntity(var6.xCoord & 15, var6.yCoord, var6.zCoord & 15);
+                        var8.cleanChunkBlockTileEntity(var6.xCoord & 15, var6.yCoord, var6.zCoord & 15);
                     }
                 }
             }
@@ -1897,6 +1797,10 @@
 
         if (!this.entityRemoval.isEmpty())
         {
+            for (Object tile : entityRemoval)
+            {
+               ((TileEntity)tile).onChunkUnload(); 
+            }
             this.loadedTileEntityList.removeAll(this.entityRemoval);
             this.entityRemoval.clear();
         }
@@ -1917,7 +1821,9 @@
                     {
                         this.loadedTileEntityList.add(var9);
                     }
-
+                }
+                else
+                {
                     if (this.chunkExists(var9.xCoord >> 4, var9.zCoord >> 4))
                     {
                         Chunk var10 = this.getChunkFromChunkCoords(var9.xCoord >> 4, var9.zCoord >> 4);
@@ -1927,8 +1833,6 @@
                             var10.setChunkBlockTileEntity(var9.xCoord & 15, var9.yCoord, var9.zCoord & 15, var9);
                         }
                     }
-
-                    this.markBlockNeedsUpdate(var9.xCoord, var9.yCoord, var9.zCoord);
                 }
             }
 
@@ -1941,13 +1845,13 @@
 
     public void addTileEntity(Collection par1Collection)
     {
-        if (this.scanningTileEntities)
-        {
-            this.addedTileEntityList.addAll(par1Collection);
-        }
-        else
-        {
-            this.loadedTileEntityList.addAll(par1Collection);
+        List dest = scanningTileEntities ? addedTileEntityList : loadedTileEntityList;
+        for(Object entity : par1Collection)
+        {
+            if(((TileEntity)entity).canUpdate())
+            {
+                dest.add(entity);
+            }
         }
     }
 
@@ -1968,8 +1872,14 @@
         int var3 = MathHelper.floor_double(par1Entity.posX);
         int var4 = MathHelper.floor_double(par1Entity.posZ);
         byte var5 = 32;
-
-        if (!par2 || this.checkChunksExist(var3 - var5, 0, var4 - var5, var3 + var5, 0, var4 + var5))
+        boolean canUpdate = !par2 || this.checkChunksExist(var3 - var5, 0, var4 - var5, var3 + var5, 0, var4 + var5);
+        if (!canUpdate)
+        {
+            EntityEvent.CanUpdate event = new EntityEvent.CanUpdate(par1Entity);
+            MinecraftForge.EVENT_BUS.post(event);
+            canUpdate = event.canUpdate;
+        }
+        if (canUpdate)
         {
             par1Entity.lastTickPosX = par1Entity.posX;
             par1Entity.lastTickPosY = par1Entity.posY;
@@ -2204,6 +2114,14 @@
                         {
                             return true;
                         }
+                        else
+                        {
+                            Block block = Block.blocksList[var11];
+                            if (block != null && block.isBlockBurning(this, var8, var9, var10))
+                            {
+                                return true;
+                            }
+                        }
                     }
                 }
             }
@@ -2510,25 +2428,21 @@
      */
     public void setBlockTileEntity(int par1, int par2, int par3, TileEntity par4TileEntity)
     {
-        if (par4TileEntity != null && !par4TileEntity.isInvalid())
-        {
-            if (this.scanningTileEntities)
-            {
-                par4TileEntity.xCoord = par1;
-                par4TileEntity.yCoord = par2;
-                par4TileEntity.zCoord = par3;
-                this.addedTileEntityList.add(par4TileEntity);
-            }
-            else
-            {
-                this.loadedTileEntityList.add(par4TileEntity);
-                Chunk var5 = this.getChunkFromChunkCoords(par1 >> 4, par3 >> 4);
-
-                if (var5 != null)
-                {
-                    var5.setChunkBlockTileEntity(par1 & 15, par2, par3 & 15, par4TileEntity);
-                }
-            }
+        if (par4TileEntity == null || par4TileEntity.isInvalid())
+        {
+            return;
+        }
+
+        if (par4TileEntity.canUpdate())
+        {
+            List dest = scanningTileEntities ? addedTileEntityList : loadedTileEntityList;
+            dest.add(par4TileEntity);
+        }
+
+        Chunk chunk = getChunkFromChunkCoords(par1 >> 4, par3 >> 4);
+        if (chunk != null)
+        {
+            chunk.setChunkBlockTileEntity(par1 & 15, par2, par3 & 15, par4TileEntity);
         }
     }
 
@@ -2537,27 +2451,10 @@
      */
     public void removeBlockTileEntity(int par1, int par2, int par3)
     {
-        TileEntity var4 = this.getBlockTileEntity(par1, par2, par3);
-
-        if (var4 != null && this.scanningTileEntities)
-        {
-            var4.invalidate();
-            this.addedTileEntityList.remove(var4);
-        }
-        else
-        {
-            if (var4 != null)
-            {
-                this.addedTileEntityList.remove(var4);
-                this.loadedTileEntityList.remove(var4);
-            }
-
-            Chunk var5 = this.getChunkFromChunkCoords(par1 >> 4, par3 >> 4);
-
-            if (var5 != null)
-            {
-                var5.removeChunkBlockTileEntity(par1 & 15, par2, par3 & 15);
-            }
+        Chunk chunk = getChunkFromChunkCoords(par1 >> 4, par3 >> 4);
+        if (chunk != null)
+        {
+            chunk.removeChunkBlockTileEntity(par1 & 15, par2, par3 & 15);
         }
     }
 
@@ -2583,7 +2480,8 @@
      */
     public boolean isBlockNormalCube(int par1, int par2, int par3)
     {
-        return Block.isNormalCube(this.getBlockId(par1, par2, par3));
+        Block block = Block.blocksList[getBlockId(par1, par2, par3)];
+        return block != null && block.isBlockNormalCube(this, par1, par2, par3);
     }
 
     /**
@@ -2591,8 +2489,7 @@
      */
     public boolean doesBlockHaveSolidTopSurface(int par1, int par2, int par3)
     {
-        Block var4 = Block.blocksList[this.getBlockId(par1, par2, par3)];
-        return var4 == null ? false : (var4.blockMaterial.isOpaque() && var4.renderAsNormalBlock() ? true : (var4 instanceof BlockStairs ? (this.getBlockMetadata(par1, par2, par3) & 4) == 4 : (var4 instanceof BlockHalfSlab ? (this.getBlockMetadata(par1, par2, par3) & 8) == 8 : false)));
+        return isBlockSolidOnSide(par1, par2, par3, ForgeDirection.UP);
     }
 
     /**
@@ -2608,7 +2505,7 @@
             if (var5 != null && !var5.isEmpty())
             {
                 Block var6 = Block.blocksList[this.getBlockId(par1, par2, par3)];
-                return var6 == null ? false : var6.blockMaterial.isOpaque() && var6.renderAsNormalBlock();
+                return var6 == null ? false : isBlockNormalCube(par1, par2, par3);
             }
             else
             {
@@ -2639,8 +2536,7 @@
      */
     public void setAllowedSpawnTypes(boolean par1, boolean par2)
     {
-        this.spawnHostileMobs = par1;
-        this.spawnPeacefulMobs = par2;
+        provider.setAllowedSpawnTypes(par1, par2);
     }
 
     /**
@@ -2651,20 +2547,16 @@
         this.updateWeather();
     }
 
+    public void calculateInitialWeather_do() {
+        this.calculateInitialWeather();
+    }
+
     /**
      * Called from World constructor to set rainingStrength and thunderingStrength
      */
     private void calculateInitialWeather()
     {
-        if (this.worldInfo.isRaining())
-        {
-            this.rainingStrength = 1.0F;
-
-            if (this.worldInfo.isThundering())
-            {
-                this.thunderingStrength = 1.0F;
-            }
-        }
+        provider.calculateInitialWeather();
     }
 
     /**
@@ -2672,108 +2564,12 @@
      */
     protected void updateWeather()
     {
-        if (!this.provider.hasNoSky)
-        {
-            if (this.lastLightningBolt > 0)
-            {
-                --this.lastLightningBolt;
-            }
-
-            int var1 = this.worldInfo.getThunderTime();
-
-            if (var1 <= 0)
-            {
-                if (this.worldInfo.isThundering())
-                {
-                    this.worldInfo.setThunderTime(this.rand.nextInt(12000) + 3600);
-                }
-                else
-                {
-                    this.worldInfo.setThunderTime(this.rand.nextInt(168000) + 12000);
-                }
-            }
-            else
-            {
-                --var1;
-                this.worldInfo.setThunderTime(var1);
-
-                if (var1 <= 0)
-                {
-                    this.worldInfo.setThundering(!this.worldInfo.isThundering());
-                }
-            }
-
-            int var2 = this.worldInfo.getRainTime();
-
-            if (var2 <= 0)
-            {
-                if (this.worldInfo.isRaining())
-                {
-                    this.worldInfo.setRainTime(this.rand.nextInt(12000) + 12000);
-                }
-                else
-                {
-                    this.worldInfo.setRainTime(this.rand.nextInt(168000) + 12000);
-                }
-            }
-            else
-            {
-                --var2;
-                this.worldInfo.setRainTime(var2);
-
-                if (var2 <= 0)
-                {
-                    this.worldInfo.setRaining(!this.worldInfo.isRaining());
-                }
-            }
-
-            this.prevRainingStrength = this.rainingStrength;
-
-            if (this.worldInfo.isRaining())
-            {
-                this.rainingStrength = (float)((double)this.rainingStrength + 0.01D);
-            }
-            else
-            {
-                this.rainingStrength = (float)((double)this.rainingStrength - 0.01D);
-            }
-
-            if (this.rainingStrength < 0.0F)
-            {
-                this.rainingStrength = 0.0F;
-            }
-
-            if (this.rainingStrength > 1.0F)
-            {
-                this.rainingStrength = 1.0F;
-            }
-
-            this.prevThunderingStrength = this.thunderingStrength;
-
-            if (this.worldInfo.isThundering())
-            {
-                this.thunderingStrength = (float)((double)this.thunderingStrength + 0.01D);
-            }
-            else
-            {
-                this.thunderingStrength = (float)((double)this.thunderingStrength - 0.01D);
-            }
-
-            if (this.thunderingStrength < 0.0F)
-            {
-                this.thunderingStrength = 0.0F;
-            }
-
-            if (this.thunderingStrength > 1.0F)
-            {
-                this.thunderingStrength = 1.0F;
-            }
-        }
+        provider.updateWeather();
     }
 
     public void toggleRain()
     {
-        this.worldInfo.setRainTime(1);
+        provider.toggleRain();
     }
 
     protected void setActivePlayerChunksAndCheckLight()
@@ -2885,57 +2681,7 @@
      */
     public boolean canBlockFreeze(int par1, int par2, int par3, boolean par4)
     {
-        BiomeGenBase var5 = this.getBiomeGenForCoords(par1, par3);
-        float var6 = var5.getFloatTemperature();
-
-        if (var6 > 0.15F)
-        {
-            return false;
-        }
-        else
-        {
-            if (par2 >= 0 && par2 < 256 && this.getSavedLightValue(EnumSkyBlock.Block, par1, par2, par3) < 10)
-            {
-                int var7 = this.getBlockId(par1, par2, par3);
-
-                if ((var7 == Block.waterStill.blockID || var7 == Block.waterMoving.blockID) && this.getBlockMetadata(par1, par2, par3) == 0)
-                {
-                    if (!par4)
-                    {
-                        return true;
-                    }
-
-                    boolean var8 = true;
-
-                    if (var8 && this.getBlockMaterial(par1 - 1, par2, par3) != Material.water)
-                    {
-                        var8 = false;
-                    }
-
-                    if (var8 && this.getBlockMaterial(par1 + 1, par2, par3) != Material.water)
-                    {
-                        var8 = false;
-                    }
-
-                    if (var8 && this.getBlockMaterial(par1, par2, par3 - 1) != Material.water)
-                    {
-                        var8 = false;
-                    }
-
-                    if (var8 && this.getBlockMaterial(par1, par2, par3 + 1) != Material.water)
-                    {
-                        var8 = false;
-                    }
-
-                    if (!var8)
-                    {
-                        return true;
-                    }
-                }
-            }
-
-            return false;
-        }
+        return provider.canBlockFreeze(par1, par2, par3, par4);
     }
 
     /**
@@ -2943,28 +2689,7 @@
      */
     public boolean canSnowAt(int par1, int par2, int par3)
     {
-        BiomeGenBase var4 = this.getBiomeGenForCoords(par1, par3);
-        float var5 = var4.getFloatTemperature();
-
-        if (var5 > 0.15F)
-        {
-            return false;
-        }
-        else
-        {
-            if (par2 >= 0 && par2 < 256 && this.getSavedLightValue(EnumSkyBlock.Block, par1, par2, par3) < 10)
-            {
-                int var6 = this.getBlockId(par1, par2 - 1, par3);
-                int var7 = this.getBlockId(par1, par2, par3);
-
-                if (var7 == 0 && Block.snow.canPlaceBlockAt(this, par1, par2, par3) && var6 != 0 && var6 != Block.ice.blockID && Block.blocksList[var6].blockMaterial.blocksMovement())
-                {
-                    return true;
-                }
-            }
-
-            return false;
-        }
+        return provider.canSnowAt(par1, par2, par3);
     }
 
     public void updateAllLightTypes(int par1, int par2, int par3)
@@ -3035,7 +2760,7 @@
 
     private int computeBlockLightValue(int par1, int par2, int par3, int par4, int par5, int par6)
     {
-        int var7 = Block.lightValue[par5];
+        int var7 = (par5 == 0 || Block.blocksList[par5] == null ? 0 : Block.blocksList[par5].getLightValue(this, par2, par3, par4));
         int var8 = this.getSavedLightValue(EnumSkyBlock.Block, par2 - 1, par3, par4) - par6;
         int var9 = this.getSavedLightValue(EnumSkyBlock.Block, par2 + 1, par3, par4) - par6;
         int var10 = this.getSavedLightValue(EnumSkyBlock.Block, par2, par3 - 1, par4) - par6;
@@ -3303,10 +3028,10 @@
     public List getEntitiesWithinAABBExcludingEntity(Entity par1Entity, AxisAlignedBB par2AxisAlignedBB)
     {
         this.entitiesWithinAABBExcludingEntity.clear();
-        int var3 = MathHelper.floor_double((par2AxisAlignedBB.minX - 2.0D) / 16.0D);
-        int var4 = MathHelper.floor_double((par2AxisAlignedBB.maxX + 2.0D) / 16.0D);
-        int var5 = MathHelper.floor_double((par2AxisAlignedBB.minZ - 2.0D) / 16.0D);
-        int var6 = MathHelper.floor_double((par2AxisAlignedBB.maxZ + 2.0D) / 16.0D);
+        int var3 = MathHelper.floor_double((par2AxisAlignedBB.minX - MAX_ENTITY_RADIUS) / 16.0D);
+        int var4 = MathHelper.floor_double((par2AxisAlignedBB.maxX + MAX_ENTITY_RADIUS) / 16.0D);
+        int var5 = MathHelper.floor_double((par2AxisAlignedBB.minZ - MAX_ENTITY_RADIUS) / 16.0D);
+        int var6 = MathHelper.floor_double((par2AxisAlignedBB.maxZ + MAX_ENTITY_RADIUS) / 16.0D);
 
         for (int var7 = var3; var7 <= var4; ++var7)
         {
@@ -3327,10 +3052,10 @@
      */
     public List getEntitiesWithinAABB(Class par1Class, AxisAlignedBB par2AxisAlignedBB)
     {
-        int var3 = MathHelper.floor_double((par2AxisAlignedBB.minX - 2.0D) / 16.0D);
-        int var4 = MathHelper.floor_double((par2AxisAlignedBB.maxX + 2.0D) / 16.0D);
-        int var5 = MathHelper.floor_double((par2AxisAlignedBB.minZ - 2.0D) / 16.0D);
-        int var6 = MathHelper.floor_double((par2AxisAlignedBB.maxZ + 2.0D) / 16.0D);
+        int var3 = MathHelper.floor_double((par2AxisAlignedBB.minX - MAX_ENTITY_RADIUS) / 16.0D);
+        int var4 = MathHelper.floor_double((par2AxisAlignedBB.maxX + MAX_ENTITY_RADIUS) / 16.0D);
+        int var5 = MathHelper.floor_double((par2AxisAlignedBB.minZ - MAX_ENTITY_RADIUS) / 16.0D);
+        int var6 = MathHelper.floor_double((par2AxisAlignedBB.maxZ + MAX_ENTITY_RADIUS) / 16.0D);
         ArrayList var7 = new ArrayList();
 
         for (int var8 = var3; var8 <= var4; ++var8)
@@ -3460,7 +3185,10 @@
             {
                 var9 = null;
             }
-
+            if (var9 != null && var9.isBlockReplaceable(this, par2, par3, par4))
+            {
+                var9 = null;
+            }
             return par1 > 0 && var9 == null && var10.canPlaceBlockOnSide(this, par2, par3, par4, par6);
         }
     }
@@ -3650,7 +3378,7 @@
      */
     public void setWorldTime(long par1)
     {
-        this.worldInfo.setWorldTime(par1);
+        provider.setWorldTime(par1);
     }
 
     /**
@@ -3658,12 +3386,12 @@
      */
     public long getSeed()
     {
-        return this.worldInfo.getSeed();
+        return provider.getSeed();
     }
 
     public long getWorldTime()
     {
-        return this.worldInfo.getWorldTime();
+        return provider.getWorldTime();
     }
 
     /**
@@ -3671,13 +3399,13 @@
      */
     public ChunkCoordinates getSpawnPoint()
     {
-        return new ChunkCoordinates(this.worldInfo.getSpawnX(), this.worldInfo.getSpawnY(), this.worldInfo.getSpawnZ());
+        return provider.getSpawnPoint();
     }
 
     @SideOnly(Side.CLIENT)
     public void setSpawnLocation(int par1, int par2, int par3)
     {
-        this.worldInfo.setSpawnPosition(par1, par2, par3);
+        provider.setSpawnLocation(par1, par2, par3);
     }
 
     @SideOnly(Side.CLIENT)
@@ -3821,8 +3549,7 @@
      */
     public boolean isBlockHighHumidity(int par1, int par2, int par3)
     {
-        BiomeGenBase var4 = this.getBiomeGenForCoords(par1, par3);
-        return var4.isHighHumidity();
+        return provider.isBlockHighHumidity(par1, par2, par3);
     }
 
     /**
@@ -3876,7 +3603,7 @@
      */
     public int getHeight()
     {
-        return 256;
+        return provider.getHeight();
     }
 
     /**
@@ -3884,7 +3611,7 @@
      */
     public int getActualHeight()
     {
-        return this.provider.hasNoSky ? 128 : 256;
+        return provider.getActualHeight();
     }
 
     /**
@@ -3924,13 +3651,13 @@
     }
 
     @SideOnly(Side.CLIENT)
-
+    
     /**
      * Returns horizon height for use in rendering the sky.
      */
     public double getHorizon()
     {
-        return this.worldInfo.getTerrainType().getHorizon(this);
+        return provider.getHorizon();
     }
 
     /**
@@ -3958,4 +3685,65 @@
             var7.destroyBlockPartially(par1, par2, par3, par4, par5);
         }
     }
+
+    /**
+     * Adds a single TileEntity to the world.
+     * @param entity The TileEntity to be added.
+     */
+    public void addTileEntity(TileEntity entity) 
+    {
+        List dest = scanningTileEntities ? addedTileEntityList : loadedTileEntityList;
+        if(entity.canUpdate())
+        {
+            dest.add(entity);
+        }
+    }
+
+    /**
+     * Determine if the given block is considered solid on the
+     * specified side.  Used by placement logic.
+     * 
+     * @param X Block X Position
+     * @param Y Block Y Position
+     * @param Z Block Z Position
+     * @param side The Side in question
+     * @return True if the side is solid
+     */
+    public boolean isBlockSolidOnSide(int X, int Y, int Z, ForgeDirection side)
+    {
+        return isBlockSolidOnSide(X, Y, Z, side, false);
+    }
+
+    /**
+     * Determine if the given block is considered solid on the
+     * specified side.  Used by placement logic.
+     * 
+     * @param X Block X Position
+     * @param Y Block Y Position
+     * @param Z Block Z Position
+     * @param side The Side in question
+     * @param _default The defult to return if the block doesn't exist.
+     * @return True if the side is solid
+     */
+    public boolean isBlockSolidOnSide(int X, int Y, int Z, ForgeDirection side, boolean _default)
+    {
+        if (X < -30000000 || Z < -30000000 || X >= 30000000 || Z >= 30000000)
+        {
+            return _default;
+        }
+
+        Chunk var5 = this.chunkProvider.provideChunk(X >> 4, Z >> 4);
+        if (var5 == null || var5.isEmpty())
+        {
+            return _default;
+        }
+
+        Block block = Block.blocksList[getBlockId(X, Y, Z)];
+        if(block == null)
+        {
+            return false;
+        }
+
+        return block.isBlockSolidOnSide(this, X, Y, Z, side);
+    }
 }
