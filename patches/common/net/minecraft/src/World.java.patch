--- ../src_base/common/net/minecraft/src/World.java
+++ ../src_work/common/net/minecraft/src/World.java
@@ -13,8 +13,30 @@
 
 import com.google.common.collect.ImmutableList;
 
+import com.google.common.collect.ImmutableSetMultimap;
+
+import net.minecraftforge.common.ForgeChunkManager;
+import net.minecraftforge.common.ForgeChunkManager.Ticket;
+import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.common.ForgeDirection;
+import net.minecraftforge.common.WorldSpecificSaveHandler;
+import net.minecraftforge.event.entity.EntityEvent;
+import net.minecraftforge.event.entity.EntityJoinWorldEvent;
+import net.minecraftforge.event.world.WorldEvent;
+import net.minecraftforge.event.entity.PlaySoundAtEntityEvent;
+
 public abstract class World implements IBlockAccess
 {
+    /**
+     * Used in the getEntitiesWithinAABB functions to expand the search area for entities.
+     * Modders should change this variable to a higher value if it is less then the radius
+     * of one of there entities.
+     */
+    public static double MAX_ENTITY_RADIUS = 2.0D;
+
+    public final MapStorage perWorldStorage;
+
     /**
      * boolean; if true updates scheduled by scheduleBlockUpdate happen immediately
      */
@@ -139,6 +161,11 @@
      * Gets the biome for a given set of x/z coordinates
      */
     public BiomeGenBase getBiomeGenForCoords(int par1, int par2)
+    {
+        return provider.getBiomeGenForCoords(par1, par2);
+    }
+
+    public BiomeGenBase getBiomeGenForCoordsBody(int par1, int par2)
     {
         if (this.blockExists(par1, 0, par2))
         {
@@ -169,7 +196,13 @@
         this.theProfiler = par5Profiler;
         this.worldInfo = new WorldInfo(par4WorldSettings, par2Str);
         this.provider = par3WorldProvider;
-        this.mapStorage = new MapStorage(par1ISaveHandler);
+        perWorldStorage = new MapStorage((ISaveHandler)null);
+    }
+
+    // Broken up so that the WorldClient gets the chance to set the mapstorage object before the dimension initializes
+    @SideOnly(Side.CLIENT)
+    protected void finishSetup()
+    {
         VillageCollection var6 = (VillageCollection)this.mapStorage.loadData(VillageCollection.class, "villages");
 
         if (var6 == null)
@@ -183,7 +216,7 @@
             this.villageCollectionObj.func_82566_a(this);
         }
 
-        par3WorldProvider.registerWorld(this);
+        this.provider.registerWorld(this);
         this.chunkProvider = this.createChunkProvider();
         this.calculateInitialSkylight();
         this.calculateInitialWeather();
@@ -197,7 +230,7 @@
         this.isRemote = false;
         this.saveHandler = par1ISaveHandler;
         this.theProfiler = par5Profiler;
-        this.mapStorage = new MapStorage(par1ISaveHandler);
+        this.mapStorage = getMapStorage(par1ISaveHandler);
         this.worldInfo = par1ISaveHandler.loadWorldInfo();
 
         if (par4WorldProvider != null)
@@ -250,12 +283,20 @@
             this.worldInfo.setServerInitialized(true);
         }
 
-        VillageCollection var6 = (VillageCollection)this.mapStorage.loadData(VillageCollection.class, "villages");
+        if (this instanceof WorldServer)
+        {
+            this.perWorldStorage = new MapStorage(new WorldSpecificSaveHandler((WorldServer)this, par1ISaveHandler));
+        }
+        else
+        {
+            this.perWorldStorage = new MapStorage((ISaveHandler)null);
+        }
+        VillageCollection var6 = (VillageCollection)perWorldStorage.loadData(VillageCollection.class, "villages");
 
         if (var6 == null)
         {
             this.villageCollectionObj = new VillageCollection(this);
-            this.mapStorage.setData("villages", this.villageCollectionObj);
+            this.perWorldStorage.setData("villages", this.villageCollectionObj);
         }
         else
         {
@@ -265,6 +306,19 @@
 
         this.calculateInitialSkylight();
         this.calculateInitialWeather();
+    }
+
+    private static MapStorage s_mapStorage;
+    private static ISaveHandler s_savehandler;
+    //Provides a solution for different worlds getting different copies of the same data, potentially rewriting the data or causing race conditions/stale data
+    //Buildcraft has suffered from the issue this fixes.  If you load the same data from two different worlds they can get two different copies of the same object, thus the last saved gets final say.
+    private MapStorage getMapStorage(ISaveHandler savehandler)
+    {
+        if (s_savehandler != savehandler || s_mapStorage == null) {
+            s_mapStorage = new MapStorage(savehandler);
+            s_savehandler = savehandler;
+        }
+        return s_mapStorage;
     }
 
     /**
@@ -353,7 +407,8 @@
      */
     public boolean isAirBlock(int par1, int par2, int par3)
     {
-        return this.getBlockId(par1, par2, par3) == 0;
+        int id = getBlockId(par1, par2, par3);
+        return id == 0 || Block.blocksList[id] == null || Block.blocksList[id].isAirBlock(this, par1, par2, par3);
     }
 
     /**
@@ -362,7 +417,8 @@
     public boolean blockHasTileEntity(int par1, int par2, int par3)
     {
         int var4 = this.getBlockId(par1, par2, par3);
-        return Block.blocksList[var4] != null && Block.blocksList[var4].hasTileEntity();
+        int meta = this.getBlockMetadata(par1, par2, par3);
+        return Block.blocksList[var4] != null && Block.blocksList[var4].hasTileEntity(meta);
     }
 
     public int func_85175_e(int par1, int par2, int par3)
@@ -1099,7 +1155,7 @@
      */
     public boolean isDaytime()
     {
-        return this.skylightSubtracted < 4;
+        return provider.isDaytime();
     }
 
     /**
@@ -1131,7 +1187,7 @@
                 int var12 = this.getBlockMetadata(var8, var9, var10);
                 Block var13 = Block.blocksList[var11];
 
-                if ((!par4 || var13 == null || var13.getCollisionBoundingBoxFromPool(this, var8, var9, var10) != null) && var11 > 0 && var13.canCollideCheck(var12, par3))
+                if (var13 != null && (!par4 || var13 == null || var13.getCollisionBoundingBoxFromPool(this, var8, var9, var10) != null) && var11 > 0 && var13.canCollideCheck(var12, par3))
                 {
                     MovingObjectPosition var14 = var13.collisionRayTrace(this, var8, var9, var10, par1Vec3, par2Vec3);
 
@@ -1331,6 +1387,12 @@
      */
     public void playSoundAtEntity(Entity par1Entity, String par2Str, float par3, float par4)
     {
+        PlaySoundAtEntityEvent event = new PlaySoundAtEntityEvent(par1Entity, par2Str, par3, par4);
+        if (MinecraftForge.EVENT_BUS.post(event))
+        {
+            return;
+        }
+        par2Str = event.name;
         if (par1Entity != null && par2Str != null)
         {
             for (int var5 = 0; var5 < this.worldAccesses.size(); ++var5)
@@ -1428,6 +1490,11 @@
                 EntityPlayer var5 = (EntityPlayer)par1Entity;
                 this.playerEntities.add(var5);
                 this.updateAllPlayersSleepingFlag();
+            }
+
+            if (!var4 && MinecraftForge.EVENT_BUS.post(new EntityJoinWorldEvent(par1Entity, this)))
+            {
+                return false;
             }
 
             this.getChunkFromChunkCoords(var2, var3).addEntity(par1Entity);
@@ -1671,6 +1738,12 @@
      * Calculates the color for the skybox
      */
     public Vec3 getSkyColor(Entity par1Entity, float par2)
+    {
+        return provider.getSkyColor(par1Entity, par2);
+    }
+
+    @SideOnly(Side.CLIENT)
+    public Vec3 getSkyColorBody(Entity par1Entity, float par2)
     {
         float var3 = this.getCelestialAngle(par2);
         float var4 = MathHelper.cos(var3 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
@@ -1766,6 +1839,12 @@
     @SideOnly(Side.CLIENT)
     public Vec3 drawClouds(float par1)
     {
+        return provider.drawClouds(par1);
+    }
+
+    @SideOnly(Side.CLIENT)
+    public Vec3 drawCloudsBody(float par1)
+    {
         float var2 = this.getCelestialAngle(par1);
         float var3 = MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
 
@@ -1844,7 +1923,7 @@
         {
             int var5 = var3.getBlockID(par1, var4, par2);
 
-            if (var5 != 0 && Block.blocksList[var5].blockMaterial.blocksMovement() && Block.blocksList[var5].blockMaterial != Material.leaves)
+            if (var5 != 0 && Block.blocksList[var5].blockMaterial.blocksMovement() && Block.blocksList[var5].blockMaterial != Material.leaves && !Block.blocksList[var5].isBlockFoliage(this, par1, var4, par2))
             {
                 return var4 + 1;
             }
@@ -1859,6 +1938,12 @@
      * How bright are stars in the sky
      */
     public float getStarBrightness(float par1)
+    {
+        return provider.getStarBrightness(par1);
+    }
+
+    @SideOnly(Side.CLIENT)
+    public float getStarBrightnessBody(float par1)
     {
         float var2 = this.getCelestialAngle(par1);
         float var3 = 1.0F - (MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.25F);
@@ -2058,7 +2143,7 @@
 
                     if (var11 != null)
                     {
-                        var11.removeChunkBlockTileEntity(var9.xCoord & 15, var9.yCoord, var9.zCoord & 15);
+                        var11.cleanChunkBlockTileEntity(var9.xCoord & 15, var9.yCoord, var9.zCoord & 15);
                     }
                 }
             }
@@ -2068,6 +2153,10 @@
 
         if (!this.entityRemoval.isEmpty())
         {
+            for (Object tile : entityRemoval)
+            {
+               ((TileEntity)tile).onChunkUnload();
+            }
             this.loadedTileEntityList.removeAll(this.entityRemoval);
             this.entityRemoval.clear();
         }
@@ -2086,7 +2175,9 @@
                     {
                         this.loadedTileEntityList.add(var12);
                     }
-
+                }
+                else
+                {
                     if (this.chunkExists(var12.xCoord >> 4, var12.zCoord >> 4))
                     {
                         Chunk var15 = this.getChunkFromChunkCoords(var12.xCoord >> 4, var12.zCoord >> 4);
@@ -2096,8 +2187,6 @@
                             var15.setChunkBlockTileEntity(var12.xCoord & 15, var12.yCoord, var12.zCoord & 15, var12);
                         }
                     }
-
-                    this.markBlockNeedsUpdate(var12.xCoord, var12.yCoord, var12.zCoord);
                 }
             }
 
@@ -2110,13 +2199,13 @@
 
     public void addTileEntity(Collection par1Collection)
     {
-        if (this.scanningTileEntities)
-        {
-            this.addedTileEntityList.addAll(par1Collection);
-        }
-        else
-        {
-            this.loadedTileEntityList.addAll(par1Collection);
+        List dest = scanningTileEntities ? addedTileEntityList : loadedTileEntityList;
+        for(Object entity : par1Collection)
+        {
+            if(((TileEntity)entity).canUpdate())
+            {
+                dest.add(entity);
+            }
         }
     }
 
@@ -2136,9 +2225,17 @@
     {
         int var3 = MathHelper.floor_double(par1Entity.posX);
         int var4 = MathHelper.floor_double(par1Entity.posZ);
-        byte var5 = 32;
-
-        if (!par2 || this.checkChunksExist(var3 - var5, 0, var4 - var5, var3 + var5, 0, var4 + var5))
+
+        boolean isForced = getPersistentChunks().containsKey(new ChunkCoordIntPair(var3 >> 4, var4 >> 4));
+        byte var5 = isForced ? (byte)0 : 32;
+        boolean canUpdate = !par2 || this.checkChunksExist(var3 - var5, 0, var4 - var5, var3 + var5, 0, var4 + var5);
+        if (!canUpdate)
+        {
+            EntityEvent.CanUpdate event = new EntityEvent.CanUpdate(par1Entity);
+            MinecraftForge.EVENT_BUS.post(event);
+            canUpdate = event.canUpdate;
+        }
+        if (canUpdate)
         {
             par1Entity.lastTickPosX = par1Entity.posX;
             par1Entity.lastTickPosY = par1Entity.posY;
@@ -2370,6 +2467,14 @@
                         {
                             return true;
                         }
+                        else
+                        {
+                            Block block = Block.blocksList[var11];
+                            if (block != null && block.isBlockBurning(this, var8, var9, var10))
+                            {
+                                return true;
+                            }
+                        }
                     }
                 }
             }
@@ -2675,25 +2780,21 @@
      */
     public void setBlockTileEntity(int par1, int par2, int par3, TileEntity par4TileEntity)
     {
-        if (par4TileEntity != null && !par4TileEntity.isInvalid())
-        {
-            if (this.scanningTileEntities)
-            {
-                par4TileEntity.xCoord = par1;
-                par4TileEntity.yCoord = par2;
-                par4TileEntity.zCoord = par3;
-                this.addedTileEntityList.add(par4TileEntity);
-            }
-            else
-            {
-                this.loadedTileEntityList.add(par4TileEntity);
-                Chunk var5 = this.getChunkFromChunkCoords(par1 >> 4, par3 >> 4);
-
-                if (var5 != null)
-                {
-                    var5.setChunkBlockTileEntity(par1 & 15, par2, par3 & 15, par4TileEntity);
-                }
-            }
+        if (par4TileEntity == null || par4TileEntity.isInvalid())
+        {
+            return;
+        }
+
+        if (par4TileEntity.canUpdate())
+        {
+            List dest = scanningTileEntities ? addedTileEntityList : loadedTileEntityList;
+            dest.add(par4TileEntity);
+        }
+
+        Chunk chunk = getChunkFromChunkCoords(par1 >> 4, par3 >> 4);
+        if (chunk != null)
+        {
+            chunk.setChunkBlockTileEntity(par1 & 15, par2, par3 & 15, par4TileEntity);
         }
     }
 
@@ -2702,27 +2803,10 @@
      */
     public void removeBlockTileEntity(int par1, int par2, int par3)
     {
-        TileEntity var4 = this.getBlockTileEntity(par1, par2, par3);
-
-        if (var4 != null && this.scanningTileEntities)
-        {
-            var4.invalidate();
-            this.addedTileEntityList.remove(var4);
-        }
-        else
-        {
-            if (var4 != null)
-            {
-                this.addedTileEntityList.remove(var4);
-                this.loadedTileEntityList.remove(var4);
-            }
-
-            Chunk var5 = this.getChunkFromChunkCoords(par1 >> 4, par3 >> 4);
-
-            if (var5 != null)
-            {
-                var5.removeChunkBlockTileEntity(par1 & 15, par2, par3 & 15);
-            }
+        Chunk chunk = getChunkFromChunkCoords(par1 >> 4, par3 >> 4);
+        if (chunk != null)
+        {
+            chunk.removeChunkBlockTileEntity(par1 & 15, par2, par3 & 15);
         }
     }
 
@@ -2748,7 +2832,8 @@
      */
     public boolean isBlockNormalCube(int par1, int par2, int par3)
     {
-        return Block.isNormalCube(this.getBlockId(par1, par2, par3));
+        Block block = Block.blocksList[getBlockId(par1, par2, par3)];
+        return block != null && block.isBlockNormalCube(this, par1, par2, par3);
     }
 
     public boolean func_85174_u(int par1, int par2, int par3)
@@ -2771,8 +2856,7 @@
      */
     public boolean doesBlockHaveSolidTopSurface(int par1, int par2, int par3)
     {
-        Block var4 = Block.blocksList[this.getBlockId(par1, par2, par3)];
-        return var4 == null ? false : (var4.blockMaterial.isOpaque() && var4.renderAsNormalBlock() ? true : (var4 instanceof BlockStairs ? (this.getBlockMetadata(par1, par2, par3) & 4) == 4 : (var4 instanceof BlockHalfSlab ? (this.getBlockMetadata(par1, par2, par3) & 8) == 8 : false)));
+        return isBlockSolidOnSide(par1, par2, par3, ForgeDirection.UP);
     }
 
     /**
@@ -2788,7 +2872,7 @@
             if (var5 != null && !var5.isEmpty())
             {
                 Block var6 = Block.blocksList[this.getBlockId(par1, par2, par3)];
-                return var6 == null ? false : var6.blockMaterial.isOpaque() && var6.renderAsNormalBlock();
+                return var6 == null ? false : isBlockNormalCube(par1, par2, par3);
             }
             else
             {
@@ -2819,8 +2903,7 @@
      */
     public void setAllowedSpawnTypes(boolean par1, boolean par2)
     {
-        this.spawnHostileMobs = par1;
-        this.spawnPeacefulMobs = par2;
+        provider.setAllowedSpawnTypes(par1, par2);
     }
 
     /**
@@ -2836,6 +2919,11 @@
      */
     private void calculateInitialWeather()
     {
+        provider.calculateInitialWeather();
+    }
+
+    public void calculateInitialWeatherBody()
+    {
         if (this.worldInfo.isRaining())
         {
             this.rainingStrength = 1.0F;
@@ -2851,6 +2939,11 @@
      * Updates all weather states.
      */
     protected void updateWeather()
+    {
+        provider.updateWeather();
+    }
+
+    public void updateWeatherBody()
     {
         if (!this.provider.hasNoSky)
         {
@@ -2953,12 +3046,14 @@
 
     public void toggleRain()
     {
-        this.worldInfo.setRainTime(1);
+        provider.toggleRain();
     }
 
     protected void setActivePlayerChunksAndCheckLight()
     {
         this.activeChunkSet.clear();
+        this.activeChunkSet.addAll(getPersistentChunks().keySet());
+
         this.theProfiler.startSection("buildList");
         int var1;
         EntityPlayer var2;
@@ -3065,6 +3160,11 @@
      */
     public boolean canBlockFreeze(int par1, int par2, int par3, boolean par4)
     {
+        return provider.canBlockFreeze(par1, par2, par3, par4);
+    }
+
+    public boolean canBlockFreezeBody(int par1, int par2, int par3, boolean par4)
+    {
         BiomeGenBase var5 = this.getBiomeGenForCoords(par1, par3);
         float var6 = var5.getFloatTemperature();
 
@@ -3122,6 +3222,11 @@
      * Tests whether or not snow can be placed at a given location
      */
     public boolean canSnowAt(int par1, int par2, int par3)
+    {
+        return provider.canSnowAt(par1, par2, par3);
+    }
+
+    public boolean canSnowAtBody(int par1, int par2, int par3)
     {
         BiomeGenBase var4 = this.getBiomeGenForCoords(par1, par3);
         float var5 = var4.getFloatTemperature();
@@ -3215,7 +3320,7 @@
 
     private int computeBlockLightValue(int par1, int par2, int par3, int par4, int par5, int par6)
     {
-        int var7 = Block.lightValue[par5];
+        int var7 = (par5 == 0 || Block.blocksList[par5] == null ? 0 : Block.blocksList[par5].getLightValue(this, par2, par3, par4));
         int var8 = this.getSavedLightValue(EnumSkyBlock.Block, par2 - 1, par3, par4) - par6;
         int var9 = this.getSavedLightValue(EnumSkyBlock.Block, par2 + 1, par3, par4) - par6;
         int var10 = this.getSavedLightValue(EnumSkyBlock.Block, par2, par3 - 1, par4) - par6;
@@ -3350,7 +3455,7 @@
                                     int var21 = var24 + (var18 / 2 + 1) % 3 / 2 * var19;
                                     int var22 = var12 + (var18 / 2 + 2) % 3 / 2 * var19;
                                     var14 = this.getSavedLightValue(par1EnumSkyBlock, var20, var21, var22);
-                                    int var23 = Block.lightOpacity[this.getBlockId(var20, var21, var22)];
+                                    int var23 = this.getBlockLightOpacity(var20, var21, var22);
 
                                     if (var23 == 0)
                                     {
@@ -3381,7 +3486,7 @@
                 var12 = (var9 >> 12 & 63) - 32 + par4;
                 var13 = this.getSavedLightValue(par1EnumSkyBlock, var10, var24, var12);
                 var14 = this.getBlockId(var10, var24, var12);
-                var15 = Block.lightOpacity[var14];
+                var15 = this.getBlockLightOpacity(var10, var24, var12);
 
                 if (var15 == 0)
                 {
@@ -3483,10 +3588,10 @@
     public List getEntitiesWithinAABBExcludingEntity(Entity par1Entity, AxisAlignedBB par2AxisAlignedBB)
     {
         this.entitiesWithinAABBExcludingEntity.clear();
-        int var3 = MathHelper.floor_double((par2AxisAlignedBB.minX - 2.0D) / 16.0D);
-        int var4 = MathHelper.floor_double((par2AxisAlignedBB.maxX + 2.0D) / 16.0D);
-        int var5 = MathHelper.floor_double((par2AxisAlignedBB.minZ - 2.0D) / 16.0D);
-        int var6 = MathHelper.floor_double((par2AxisAlignedBB.maxZ + 2.0D) / 16.0D);
+        int var3 = MathHelper.floor_double((par2AxisAlignedBB.minX - MAX_ENTITY_RADIUS) / 16.0D);
+        int var4 = MathHelper.floor_double((par2AxisAlignedBB.maxX + MAX_ENTITY_RADIUS) / 16.0D);
+        int var5 = MathHelper.floor_double((par2AxisAlignedBB.minZ - MAX_ENTITY_RADIUS) / 16.0D);
+        int var6 = MathHelper.floor_double((par2AxisAlignedBB.maxZ + MAX_ENTITY_RADIUS) / 16.0D);
 
         for (int var7 = var3; var7 <= var4; ++var7)
         {
@@ -3512,10 +3617,10 @@
 
     public List func_82733_a(Class par1Class, AxisAlignedBB par2AxisAlignedBB, IEntitySelector par3IEntitySelector)
     {
-        int var4 = MathHelper.floor_double((par2AxisAlignedBB.minX - 2.0D) / 16.0D);
-        int var5 = MathHelper.floor_double((par2AxisAlignedBB.maxX + 2.0D) / 16.0D);
-        int var6 = MathHelper.floor_double((par2AxisAlignedBB.minZ - 2.0D) / 16.0D);
-        int var7 = MathHelper.floor_double((par2AxisAlignedBB.maxZ + 2.0D) / 16.0D);
+        int var4 = MathHelper.floor_double((par2AxisAlignedBB.minX - MAX_ENTITY_RADIUS) / 16.0D);
+        int var5 = MathHelper.floor_double((par2AxisAlignedBB.maxX + MAX_ENTITY_RADIUS) / 16.0D);
+        int var6 = MathHelper.floor_double((par2AxisAlignedBB.minZ - MAX_ENTITY_RADIUS) / 16.0D);
+        int var7 = MathHelper.floor_double((par2AxisAlignedBB.maxZ + MAX_ENTITY_RADIUS) / 16.0D);
         ArrayList var8 = new ArrayList();
 
         for (int var9 = var4; var9 <= var5; ++var9)
@@ -3608,11 +3713,14 @@
      */
     public void addLoadedEntities(List par1List)
     {
-        this.loadedEntityList.addAll(par1List);
-
         for (int var2 = 0; var2 < par1List.size(); ++var2)
         {
-            this.obtainEntitySkin((Entity)par1List.get(var2));
+            Entity entity = (Entity)par1List.get(var2);
+            if (!MinecraftForge.EVENT_BUS.post(new EntityJoinWorldEvent(entity, this)))
+            {
+                loadedEntityList.add(entity);
+                this.obtainEntitySkin(entity);
+            }
         }
     }
 
@@ -3646,6 +3754,11 @@
         else
         {
             if (var9 != null && (var9 == Block.waterMoving || var9 == Block.waterStill || var9 == Block.lavaMoving || var9 == Block.lavaStill || var9 == Block.fire || var9.blockMaterial.isGroundCover()))
+            {
+                var9 = null;
+            }
+
+            if (var9 != null && var9.isBlockReplaceable(this, par2, par3, par4))
             {
                 var9 = null;
             }
@@ -3863,7 +3976,7 @@
      */
     public long getSeed()
     {
-        return this.worldInfo.getSeed();
+        return provider.getSeed();
     }
 
     public long getTotalWorldTime()
@@ -3873,7 +3986,7 @@
 
     public long getWorldTime()
     {
-        return this.worldInfo.getWorldTime();
+        return provider.getWorldTime();
     }
 
     /**
@@ -3881,7 +3994,7 @@
      */
     public void setWorldTime(long par1)
     {
-        this.worldInfo.setWorldTime(par1);
+        provider.setWorldTime(par1);
     }
 
     /**
@@ -3889,13 +4002,13 @@
      */
     public ChunkCoordinates getSpawnPoint()
     {
-        return new ChunkCoordinates(this.worldInfo.getSpawnX(), this.worldInfo.getSpawnY(), this.worldInfo.getSpawnZ());
+        return provider.getSpawnPoint();
     }
 
     @SideOnly(Side.CLIENT)
     public void setSpawnLocation(int par1, int par2, int par3)
     {
-        this.worldInfo.setSpawnPosition(par1, par2, par3);
+        provider.setSpawnPoint(par1, par2, par3);
     }
 
     @SideOnly(Side.CLIENT)
@@ -3919,7 +4032,10 @@
 
         if (!this.loadedEntityList.contains(par1Entity))
         {
-            this.loadedEntityList.add(par1Entity);
+            if (!MinecraftForge.EVENT_BUS.post(new EntityJoinWorldEvent(par1Entity, this)))
+            {
+                loadedEntityList.add(par1Entity);
+            }
         }
     }
 
@@ -3927,6 +4043,11 @@
      * Called when checking if a certain block can be mined or not. The 'spawn safe zone' check is located here.
      */
     public boolean canMineBlock(EntityPlayer par1EntityPlayer, int par2, int par3, int par4)
+    {
+        return provider.canMineBlock(par1EntityPlayer, par2, par3, par4);
+    }
+
+    public boolean canMineBlockBody(EntityPlayer par1EntityPlayer, int par2, int par3, int par4)
     {
         return true;
     }
@@ -4047,8 +4168,7 @@
      */
     public boolean isBlockHighHumidity(int par1, int par2, int par3)
     {
-        BiomeGenBase var4 = this.getBiomeGenForCoords(par1, par3);
-        return var4.isHighHumidity();
+        return provider.isBlockHighHumidity(par1, par2, par3);
     }
 
     /**
@@ -4110,7 +4230,7 @@
      */
     public int getHeight()
     {
-        return 256;
+        return provider.getHeight();
     }
 
     /**
@@ -4118,7 +4238,7 @@
      */
     public int getActualHeight()
     {
-        return this.provider.hasNoSky ? 128 : 256;
+        return provider.getActualHeight();
     }
 
     public IUpdatePlayerListBox func_82735_a(EntityMinecart par1EntityMinecart)
@@ -4161,7 +4281,7 @@
      */
     public double getHorizon()
     {
-        return this.worldInfo.getTerrainType().getHorizon(this);
+        return provider.getHorizon();
     }
 
     /**
@@ -4219,4 +4339,75 @@
 
         return this.theCalendar;
     }
+
+    /**
+     * Adds a single TileEntity to the world.
+     * @param entity The TileEntity to be added.
+     */
+    public void addTileEntity(TileEntity entity)
+    {
+        List dest = scanningTileEntities ? addedTileEntityList : loadedTileEntityList;
+        if(entity.canUpdate())
+        {
+            dest.add(entity);
+        }
+    }
+
+    /**
+     * Determine if the given block is considered solid on the
+     * specified side.  Used by placement logic.
+     *
+     * @param X Block X Position
+     * @param Y Block Y Position
+     * @param Z Block Z Position
+     * @param side The Side in question
+     * @return True if the side is solid
+     */
+    public boolean isBlockSolidOnSide(int X, int Y, int Z, ForgeDirection side)
+    {
+        return isBlockSolidOnSide(X, Y, Z, side, false);
+    }
+
+    /**
+     * Determine if the given block is considered solid on the
+     * specified side.  Used by placement logic.
+     *
+     * @param X Block X Position
+     * @param Y Block Y Position
+     * @param Z Block Z Position
+     * @param side The Side in question
+     * @param _default The defult to return if the block doesn't exist.
+     * @return True if the side is solid
+     */
+    public boolean isBlockSolidOnSide(int X, int Y, int Z, ForgeDirection side, boolean _default)
+    {
+        if (X < -30000000 || Z < -30000000 || X >= 30000000 || Z >= 30000000)
+        {
+            return _default;
+        }
+
+        Chunk var5 = this.chunkProvider.provideChunk(X >> 4, Z >> 4);
+        if (var5 == null || var5.isEmpty())
+        {
+            return _default;
+        }
+
+        Block block = Block.blocksList[getBlockId(X, Y, Z)];
+        if(block == null)
+        {
+            return false;
+        }
+
+        return block.isBlockSolidOnSide(this, X, Y, Z, side);
+    }
+
+    /**
+     * Get the persistent chunks for this world
+     *
+     * @return
+     */
+    public ImmutableSetMultimap<ChunkCoordIntPair, Ticket> getPersistentChunks()
+    {
+        return ForgeChunkManager.getPersistentChunksFor(this);
+    }
 }
