--- ../src_base/common/net/minecraft/src/EntityPlayer.java
+++ ../src_work/common/net/minecraft/src/EntityPlayer.java
@@ -1,12 +1,21 @@
 package net.minecraft.src;
 
+import java.util.Iterator;
+import java.util.List;
+
+import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.common.ISpecialArmor.ArmorProperties;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.entity.item.ItemTossEvent;
+import net.minecraftforge.event.entity.living.LivingHurtEvent;
+import net.minecraftforge.event.entity.player.AttackEntityEvent;
+import net.minecraftforge.event.entity.player.EntityInteractEvent;
+import net.minecraftforge.event.entity.player.PlayerDestroyItemEvent;
+import net.minecraftforge.event.entity.player.PlayerSleepInBedEvent;
 import cpw.mods.fml.common.FMLCommonHandler;
 import cpw.mods.fml.common.Side;
 import cpw.mods.fml.common.asm.SideOnly;
 import cpw.mods.fml.common.network.FMLNetworkHandler;
-
-import java.util.Iterator;
-import java.util.List;
 
 public abstract class EntityPlayer extends EntityLiving implements ICommandSender
 {
@@ -222,6 +231,7 @@
 
             if (var1 == this.itemInUse)
             {
+                itemInUse.getItem().onUsingItemTick(itemInUse, this, itemInUseCount);
                 if (this.itemInUseCount <= 25 && this.itemInUseCount % 4 == 0)
                 {
                     this.updateItemUse(var1, 5);
@@ -573,13 +583,15 @@
         this.setSize(0.2F, 0.2F);
         this.setPosition(this.posX, this.posY, this.posZ);
         this.motionY = 0.10000000149011612D;
-
+        
         if (this.username.equals("Notch"))
         {
-            this.dropPlayerItemWithRandomChoice(new ItemStack(Item.appleRed, 1), true);
-        }
-
-        this.inventory.dropAllItems();
+            EntityItem eItem = this.createDroppedItem(new ItemStack(Item.appleRed, 1), false, 0);
+            this.joinEntityItemWithWorld(eItem);
+            this.addStat(StatList.dropStat, 1);
+        }
+
+        this.inventory.dropAllItems(par1DamageSource);
 
         if (par1DamageSource != null)
         {
@@ -623,63 +635,108 @@
     }
 
     /**
-     * Called when player presses the drop item key
+     * Drops a single item from the player's currently selected item into the
+     * world. Called when a player presses the drop item key.
      */
     public EntityItem dropOneItem()
     {
-        return this.dropPlayerItemWithRandomChoice(this.inventory.decrStackSize(this.inventory.currentItem, 1), false);
-    }
-
-    /**
-     * Args: itemstack - called when player drops an item stack that's not in his inventory (like items still placed in
-     * a workbench while the workbench'es GUI gets closed)
-     */
-    public EntityItem dropPlayerItem(ItemStack par1ItemStack)
-    {
-        return this.dropPlayerItemWithRandomChoice(par1ItemStack, false);
-    }
-
-    /**
-     * Args: itemstack, flag
-     */
-    public EntityItem dropPlayerItemWithRandomChoice(ItemStack par1ItemStack, boolean par2)
-    {
-        if (par1ItemStack == null)
-        {
-            return null;
-        }
+        ItemStack stack = inventory.getCurrentItem();
+        if (stack == null) return null;
+
+        if (stack.getItem().onDroppedByPlayer(stack, this))
+        {
+            // Create EntityItem, register with world, and update stats.
+            EntityItem drop = this.createDroppedItem(inventory.decrStackSize(inventory.currentItem, 1), true, 0);
+
+            ItemTossEvent event = new ItemTossEvent(drop, this);
+            if (!MinecraftForge.EVENT_BUS.post(event))
+            {
+                this.joinEntityItemWithWorld(drop);
+                this.addStat(StatList.dropStat, drop.item.stackSize);
+                return drop;
+            }
+        }
+        return null;
+    }
+
+    /**
+     * Drops an entire stack of items into the world. Called when a player drops
+     * an item stack by drag-dropping it outside an inventory screen, creating
+     * an item with a full inventory (filled buckets, bottles, etc.), or leaving
+     * it in certain inventories when they close (workbenches, etc).
+     * 
+     * @param itemStack
+     *            The ItemStack being dropped.
+     */
+    public EntityItem dropPlayerItem(ItemStack itemStack)
+    {
+        EntityItem drop = this.createDroppedItem(itemStack, true, 0);
+
+        ItemTossEvent event = new ItemTossEvent(drop, this);
+        if (!MinecraftForge.EVENT_BUS.post(event))
+        {
+            this.joinEntityItemWithWorld(drop);
+            this.addStat(StatList.dropStat, drop.item.stackSize);
+            return drop;
+        }
+        return null;
+    }
+
+    /**
+     * Creates a configured EntityItem from an ItemStack based on the player's
+     * current transformation.
+     * @param itemStack The ItemStack to prepare for dropping.
+     * @param toss If true, the item will be tossed forward rather than given
+     * a random velocity.
+     * @return An instantiated EntityItem, ready to be entered into the world.
+     */
+    public EntityItem createDroppedItem(ItemStack itemStack, boolean toss, int x)
+    {
+        if (itemStack == null) return null;
         else
         {
-            EntityItem var3 = new EntityItem(this.worldObj, this.posX, this.posY - 0.30000001192092896D + (double)this.getEyeHeight(), this.posZ, par1ItemStack);
-            var3.delayBeforeCanPickup = 40;
-            float var4 = 0.1F;
-            float var5;
-
-            if (par2)
-            {
-                var5 = this.rand.nextFloat() * 0.5F;
-                float var6 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
-                var3.motionX = (double)(-MathHelper.sin(var6) * var5);
-                var3.motionZ = (double)(MathHelper.cos(var6) * var5);
-                var3.motionY = 0.20000000298023224D;
+            EntityItem eItem = new EntityItem(this.worldObj, this.posX, this.posY - 0.30000001192092896D + (double)this.getEyeHeight(), this.posZ, itemStack);
+            eItem.delayBeforeCanPickup = 40;
+
+            boolean cancelled = false;
+            
+            if (toss)
+            {
+                //Add forward throw velocity.
+                float velocity = 0.3F;
+                eItem.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * velocity);
+                eItem.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * velocity);
+                eItem.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI) * velocity + 0.1F);
+                //Add some random noise to the velocity.
+                velocity = 0.02F;
+                float theta = this.rand.nextFloat() * (float)Math.PI * 2.0F;
+                velocity *= this.rand.nextFloat();
+                eItem.motionX += Math.cos((double)theta) * (double)velocity;
+                eItem.motionY += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
+                eItem.motionZ += Math.sin((double)theta) * (double)velocity;
+                
+                //ItemTossEvent event = new ItemTossEvent(eItem, this);
+                //cancelled = MinecraftForge.EVENT_BUS.post(event);
             }
             else
             {
-                var4 = 0.3F;
-                var3.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var4);
-                var3.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var4);
-                var3.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI) * var4 + 0.1F);
-                var4 = 0.02F;
-                var5 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
-                var4 *= this.rand.nextFloat();
-                var3.motionX += Math.cos((double)var5) * (double)var4;
-                var3.motionY += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
-                var3.motionZ += Math.sin((double)var5) * (double)var4;
-            }
-
-            this.joinEntityItemWithWorld(var3);
-            this.addStat(StatList.dropStat, 1);
-            return var3;
+                //Add random x,z velocity, fixed y velocity.
+                float velocity = this.rand.nextFloat() * 0.5F;
+                float theta = this.rand.nextFloat() * (float)Math.PI * 2.0F;
+                eItem.motionX = (double)(-MathHelper.sin(theta) * velocity);
+                eItem.motionZ = (double)(MathHelper.cos(theta) * velocity);
+                eItem.motionY = 0.20000000298023224D;
+                
+                //ItemDropEvent event = new ItemDropEvent(var3, this);
+                //cancelled = MinecraftForge.EVENT_BUS.post(event);
+            }
+
+            //If the event was cancelled, we're done.
+            //if (cancelled) return null;
+            
+            //this.joinEntityItemWithWorld(var3);
+            //this.addStat(StatList.dropStat, 1);
+            return eItem;
         }
     }
 
@@ -693,13 +750,21 @@
 
     /**
      * Returns how strong the player is against the specified block at this moment
-     */
+     * Deprecated in favor of the moresensitive version
+     */
+    @Deprecated
     public float getCurrentPlayerStrVsBlock(Block par1Block)
     {
-        float var2 = this.inventory.getStrVsBlock(par1Block);
+        return getCurrentPlayerStrVsBlock(par1Block, 0);
+    }
+
+    public float getCurrentPlayerStrVsBlock(Block par1Block, int meta)
+    {
+        ItemStack stack = inventory.getCurrentItem();
+        float var2 = (stack == null ? 1.0F : stack.getItem().getStrVsBlock(stack, par1Block, meta));
         int var3 = EnchantmentHelper.getEfficiencyModifier(this.inventory);
 
-        if (var3 > 0 && this.inventory.canHarvestBlock(par1Block))
+        if (var3 > 0 && ForgeHooks.canHarvestBlock(par1Block, this, meta))
         {
             var2 += (float)(var3 * var3 + 1);
         }
@@ -992,12 +1057,23 @@
      */
     protected void damageEntity(DamageSource par1DamageSource, int par2)
     {
+        LivingHurtEvent event = new LivingHurtEvent(this, par1DamageSource, par2);
+        if (MinecraftForge.EVENT_BUS.post(event) || event.ammount == 0)
+        {
+            return;
+        }
+        par2 = event.ammount;
+
         if (!par1DamageSource.isUnblockable() && this.isBlocking())
         {
             par2 = 1 + par2 >> 1;
         }
 
-        par2 = this.applyArmorCalculations(par1DamageSource, par2);
+        par2 = ArmorProperties.ApplyArmor(this, inventory.armorInventory, par1DamageSource, par2);
+        if (par2 <= 0)
+        {
+            return;
+        }
         par2 = this.applyPotionDamageCalculations(par1DamageSource, par2);
         this.addExhaustion(par1DamageSource.getHungerDamage());
         this.health -= par2;
@@ -1032,6 +1108,10 @@
 
     public boolean interactWith(Entity par1Entity)
     {
+        if (MinecraftForge.EVENT_BUS.post(new EntityInteractEvent(this, par1Entity)))
+        {
+            return false;
+        }
         if (par1Entity.interact(this))
         {
             return true;
@@ -1075,7 +1155,9 @@
      */
     public void destroyCurrentEquippedItem()
     {
+        ItemStack orig = getCurrentEquippedItem();
         this.inventory.setInventorySlotContents(this.inventory.currentItem, (ItemStack)null);
+        MinecraftForge.EVENT_BUS.post(new PlayerDestroyItemEvent(this, orig));
     }
 
     /**
@@ -1104,6 +1186,15 @@
      */
     public void attackTargetEntityWithCurrentItem(Entity par1Entity)
     {
+        if (MinecraftForge.EVENT_BUS.post(new AttackEntityEvent(this, par1Entity)))
+        {
+            return;
+        }
+        ItemStack stack = getCurrentEquippedItem();
+        if (stack != null && stack.getItem().onLeftClickEntity(stack, this, par1Entity))
+        {
+            return;
+        }
         if (par1Entity.canAttackWithItem())
         {
             int var2 = this.inventory.getDamageVsEntity(par1Entity);
@@ -1247,6 +1338,12 @@
      */
     public EnumStatus sleepInBedAt(int par1, int par2, int par3)
     {
+        PlayerSleepInBedEvent event = new PlayerSleepInBedEvent(this, par1, par2, par3);
+        MinecraftForge.EVENT_BUS.post(event);
+        if (event.result != null)
+        {
+            return event.result;
+        }
         if (!this.worldObj.isRemote)
         {
             if (this.isPlayerSleeping() || !this.isEntityAlive())
@@ -1286,6 +1383,11 @@
         {
             int var9 = this.worldObj.getBlockMetadata(par1, par2, par3);
             int var5 = BlockBed.getDirection(var9);
+            Block block = Block.blocksList[worldObj.getBlockId(par1, par2, par3)];
+            if (block != null)
+            {
+                var5 = block.getBedDirection(worldObj, par1, par2, par3);
+            }
             float var10 = 0.5F;
             float var7 = 0.5F;
 
@@ -1356,10 +1458,12 @@
         ChunkCoordinates var4 = this.playerLocation;
         ChunkCoordinates var5 = this.playerLocation;
 
-        if (var4 != null && this.worldObj.getBlockId(var4.posX, var4.posY, var4.posZ) == Block.bed.blockID)
-        {
-            BlockBed.setBedOccupied(this.worldObj, var4.posX, var4.posY, var4.posZ, false);
-            var5 = BlockBed.getNearestEmptyChunkCoordinates(this.worldObj, var4.posX, var4.posY, var4.posZ, 0);
+        Block block = (var4 == null ? null : Block.blocksList[worldObj.getBlockId(var4.posX, var4.posY, var4.posZ)]);
+
+        if (var4 != null && block != null && block.isBed(worldObj, var4.posX, var4.posY, var4.posZ, this))
+        {
+            block.setBedOccupied(this.worldObj, var4.posX, var4.posY, var4.posZ, this, false);
+            var5 = block.getBedSpawnPosition(worldObj, var4.posX, var4.posY, var4.posZ, this);
 
             if (var5 == null)
             {
@@ -1396,7 +1500,9 @@
      */
     private boolean isInBed()
     {
-        return this.worldObj.getBlockId(this.playerLocation.posX, this.playerLocation.posY, this.playerLocation.posZ) == Block.bed.blockID;
+        ChunkCoordinates c = playerLocation;
+        int blockID = worldObj.getBlockId(c.posX, c.posY, c.posZ);
+        return Block.blocksList[blockID] != null && Block.blocksList[blockID].isBed(worldObj, c.posX, c.posY, c.posZ, this);
     }
 
     /**
@@ -1411,13 +1517,15 @@
         var2.loadChunk(par1ChunkCoordinates.posX - 3 >> 4, par1ChunkCoordinates.posZ + 3 >> 4);
         var2.loadChunk(par1ChunkCoordinates.posX + 3 >> 4, par1ChunkCoordinates.posZ + 3 >> 4);
 
-        if (par0World.getBlockId(par1ChunkCoordinates.posX, par1ChunkCoordinates.posY, par1ChunkCoordinates.posZ) != Block.bed.blockID)
+        ChunkCoordinates c = par1ChunkCoordinates;
+        Block block = Block.blocksList[par0World.getBlockId(c.posX, c.posY, c.posZ)];
+        if (block == null || !block.isBed(par0World, c.posX, c.posY, c.posZ, null))
         {
             return null;
         }
         else
         {
-            ChunkCoordinates var3 = BlockBed.getNearestEmptyChunkCoordinates(par0World, par1ChunkCoordinates.posX, par1ChunkCoordinates.posY, par1ChunkCoordinates.posZ, 0);
+            ChunkCoordinates var3 = block.getBedSpawnPosition(par0World, c.posX, c.posY, c.posZ, null);
             return var3;
         }
     }
@@ -1431,8 +1539,11 @@
     {
         if (this.playerLocation != null)
         {
-            int var1 = this.worldObj.getBlockMetadata(this.playerLocation.posX, this.playerLocation.posY, this.playerLocation.posZ);
-            int var2 = BlockBed.getDirection(var1);
+            int x = playerLocation.posX;
+            int y = playerLocation.posY;
+            int z = playerLocation.posZ;
+            Block block = Block.blocksList[worldObj.getBlockId(x, y, z)];
+            int var2 = (block == null ? 0 : block.getBedDirection(worldObj, x, y, z));
 
             switch (var2)
             {
@@ -1725,6 +1836,7 @@
                     return 101;
                 }
             }
+            var3 = par1ItemStack.getItem().getIconIndex(par1ItemStack, par2, this, itemInUse, itemInUseCount);
         }
 
         return var3;
