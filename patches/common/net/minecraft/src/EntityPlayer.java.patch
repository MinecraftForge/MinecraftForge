--- ../src_base/common/net/minecraft/src/EntityPlayer.java
+++ ../src_work/common/net/minecraft/src/EntityPlayer.java
@@ -7,6 +7,16 @@
 
 import java.util.Iterator;
 import java.util.List;
+
+import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.common.ISpecialArmor.ArmorProperties;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.entity.living.LivingHurtEvent;
+import net.minecraftforge.event.entity.player.AttackEntityEvent;
+import net.minecraftforge.event.entity.player.EntityInteractEvent;
+import net.minecraftforge.event.entity.player.PlayerDestroyItemEvent;
+import net.minecraftforge.event.entity.player.PlayerDropsEvent;
+import net.minecraftforge.event.entity.player.PlayerSleepInBedEvent;
 
 public abstract class EntityPlayer extends EntityLiving implements ICommandSender
 {
@@ -222,6 +232,7 @@
 
             if (var1 == this.itemInUse)
             {
+                itemInUse.getItem().onUsingItemTick(itemInUse, this, itemInUseCount);
                 if (this.itemInUseCount <= 25 && this.itemInUseCount % 4 == 0)
                 {
                     this.updateItemUse(var1, 5);
@@ -574,12 +585,28 @@
         this.setPosition(this.posX, this.posY, this.posZ);
         this.motionY = 0.10000000149011612D;
 
+        captureDrops = true;
+        capturedDrops.clear();
+
         if (this.username.equals("Notch"))
         {
             this.dropPlayerItemWithRandomChoice(new ItemStack(Item.appleRed, 1), true);
         }
 
         this.inventory.dropAllItems();
+        captureDrops = false;
+
+        if (!worldObj.isRemote)
+        {
+            PlayerDropsEvent event = new PlayerDropsEvent(this, par1DamageSource, capturedDrops, recentlyHit > 0);
+            if (!MinecraftForge.EVENT_BUS.post(event))
+            {
+                for (EntityItem item : capturedDrops)
+                {
+                    joinEntityItemWithWorld(item);
+                }
+            }
+        }
 
         if (par1DamageSource != null)
         {
@@ -627,7 +654,16 @@
      */
     public EntityItem dropOneItem()
     {
-        return this.dropPlayerItemWithRandomChoice(this.inventory.decrStackSize(this.inventory.currentItem, 1), false);
+        ItemStack stack = inventory.getCurrentItem();
+        if (stack == null)
+        {
+            return null;
+        }
+        if (stack.getItem().onDroppedByPlayer(stack, this))
+        {
+            return ForgeHooks.onPlayerTossEvent(this, inventory.decrStackSize(inventory.currentItem, 1));
+        }
+        return null;
     }
 
     /**
@@ -636,7 +672,7 @@
      */
     public EntityItem dropPlayerItem(ItemStack par1ItemStack)
     {
-        return this.dropPlayerItemWithRandomChoice(par1ItemStack, false);
+        return ForgeHooks.onPlayerTossEvent(this, par1ItemStack);
     }
 
     /**
@@ -688,18 +724,33 @@
      */
     public void joinEntityItemWithWorld(EntityItem par1EntityItem)
     {
-        this.worldObj.spawnEntityInWorld(par1EntityItem);
+        if (captureDrops)
+        {
+            capturedDrops.add(par1EntityItem);
+        }
+        else
+        {
+            this.worldObj.spawnEntityInWorld(par1EntityItem);
+        }
     }
 
     /**
      * Returns how strong the player is against the specified block at this moment
-     */
+     * Deprecated in favor of the more sensitive version
+     */
+    @Deprecated
     public float getCurrentPlayerStrVsBlock(Block par1Block)
     {
-        float var2 = this.inventory.getStrVsBlock(par1Block);
+        return getCurrentPlayerStrVsBlock(par1Block, 0);
+    }
+
+    public float getCurrentPlayerStrVsBlock(Block par1Block, int meta)
+    {
+        ItemStack stack = inventory.getCurrentItem();
+        float var2 = (stack == null ? 1.0F : stack.getItem().getStrVsBlock(stack, par1Block, meta));
         int var3 = EnchantmentHelper.getEfficiencyModifier(this.inventory);
 
-        if (var3 > 0 && this.inventory.canHarvestBlock(par1Block))
+        if (var3 > 0 && ForgeHooks.canHarvestBlock(par1Block, this, meta))
         {
             var2 += (float)(var3 * var3 + 1);
         }
@@ -992,12 +1043,23 @@
      */
     protected void damageEntity(DamageSource par1DamageSource, int par2)
     {
+        LivingHurtEvent event = new LivingHurtEvent(this, par1DamageSource, par2);
+        if (MinecraftForge.EVENT_BUS.post(event) || event.ammount == 0)
+        {
+            return;
+        }
+        par2 = event.ammount;
+
         if (!par1DamageSource.isUnblockable() && this.isBlocking())
         {
             par2 = 1 + par2 >> 1;
         }
 
-        par2 = this.applyArmorCalculations(par1DamageSource, par2);
+        par2 = ArmorProperties.ApplyArmor(this, inventory.armorInventory, par1DamageSource, par2);
+        if (par2 <= 0)
+        {
+            return;
+        }
         par2 = this.applyPotionDamageCalculations(par1DamageSource, par2);
         this.addExhaustion(par1DamageSource.getHungerDamage());
         this.health -= par2;
@@ -1032,6 +1094,10 @@
 
     public boolean interactWith(Entity par1Entity)
     {
+        if (MinecraftForge.EVENT_BUS.post(new EntityInteractEvent(this, par1Entity)))
+        {
+            return false;
+        }
         if (par1Entity.interact(this))
         {
             return true;
@@ -1075,7 +1141,9 @@
      */
     public void destroyCurrentEquippedItem()
     {
+        ItemStack orig = getCurrentEquippedItem();
         this.inventory.setInventorySlotContents(this.inventory.currentItem, (ItemStack)null);
+        MinecraftForge.EVENT_BUS.post(new PlayerDestroyItemEvent(this, orig));
     }
 
     /**
@@ -1104,6 +1172,15 @@
      */
     public void attackTargetEntityWithCurrentItem(Entity par1Entity)
     {
+        if (MinecraftForge.EVENT_BUS.post(new AttackEntityEvent(this, par1Entity)))
+        {
+            return;
+        }
+        ItemStack stack = getCurrentEquippedItem();
+        if (stack != null && stack.getItem().onLeftClickEntity(stack, this, par1Entity))
+        {
+            return;
+        }
         if (par1Entity.canAttackWithItem())
         {
             int var2 = this.inventory.getDamageVsEntity(par1Entity);
@@ -1247,6 +1324,12 @@
      */
     public EnumStatus sleepInBedAt(int par1, int par2, int par3)
     {
+        PlayerSleepInBedEvent event = new PlayerSleepInBedEvent(this, par1, par2, par3);
+        MinecraftForge.EVENT_BUS.post(event);
+        if (event.result != null)
+        {
+            return event.result;
+        }
         if (!this.worldObj.isRemote)
         {
             if (this.isPlayerSleeping() || !this.isEntityAlive())
@@ -1286,6 +1369,11 @@
         {
             int var9 = this.worldObj.getBlockMetadata(par1, par2, par3);
             int var5 = BlockBed.getDirection(var9);
+            Block block = Block.blocksList[worldObj.getBlockId(par1, par2, par3)];
+            if (block != null)
+            {
+                var5 = block.getBedDirection(worldObj, par1, par2, par3);
+            }
             float var10 = 0.5F;
             float var7 = 0.5F;
 
@@ -1356,10 +1444,12 @@
         ChunkCoordinates var4 = this.playerLocation;
         ChunkCoordinates var5 = this.playerLocation;
 
-        if (var4 != null && this.worldObj.getBlockId(var4.posX, var4.posY, var4.posZ) == Block.bed.blockID)
-        {
-            BlockBed.setBedOccupied(this.worldObj, var4.posX, var4.posY, var4.posZ, false);
-            var5 = BlockBed.getNearestEmptyChunkCoordinates(this.worldObj, var4.posX, var4.posY, var4.posZ, 0);
+        Block block = (var4 == null ? null : Block.blocksList[worldObj.getBlockId(var4.posX, var4.posY, var4.posZ)]);
+
+        if (var4 != null && block != null && block.isBed(worldObj, var4.posX, var4.posY, var4.posZ, this))
+        {
+            block.setBedOccupied(this.worldObj, var4.posX, var4.posY, var4.posZ, this, false);
+            var5 = block.getBedSpawnPosition(worldObj, var4.posX, var4.posY, var4.posZ, this);
 
             if (var5 == null)
             {
@@ -1396,7 +1486,9 @@
      */
     private boolean isInBed()
     {
-        return this.worldObj.getBlockId(this.playerLocation.posX, this.playerLocation.posY, this.playerLocation.posZ) == Block.bed.blockID;
+        ChunkCoordinates c = playerLocation;
+        int blockID = worldObj.getBlockId(c.posX, c.posY, c.posZ);
+        return Block.blocksList[blockID] != null && Block.blocksList[blockID].isBed(worldObj, c.posX, c.posY, c.posZ, this);
     }
 
     /**
@@ -1411,13 +1503,15 @@
         var2.loadChunk(par1ChunkCoordinates.posX - 3 >> 4, par1ChunkCoordinates.posZ + 3 >> 4);
         var2.loadChunk(par1ChunkCoordinates.posX + 3 >> 4, par1ChunkCoordinates.posZ + 3 >> 4);
 
-        if (par0World.getBlockId(par1ChunkCoordinates.posX, par1ChunkCoordinates.posY, par1ChunkCoordinates.posZ) != Block.bed.blockID)
+        ChunkCoordinates c = par1ChunkCoordinates;
+        Block block = Block.blocksList[par0World.getBlockId(c.posX, c.posY, c.posZ)];
+        if (block == null || !block.isBed(par0World, c.posX, c.posY, c.posZ, null))
         {
             return null;
         }
         else
         {
-            ChunkCoordinates var3 = BlockBed.getNearestEmptyChunkCoordinates(par0World, par1ChunkCoordinates.posX, par1ChunkCoordinates.posY, par1ChunkCoordinates.posZ, 0);
+            ChunkCoordinates var3 = block.getBedSpawnPosition(par0World, c.posX, c.posY, c.posZ, null);
             return var3;
         }
     }
@@ -1431,8 +1525,11 @@
     {
         if (this.playerLocation != null)
         {
-            int var1 = this.worldObj.getBlockMetadata(this.playerLocation.posX, this.playerLocation.posY, this.playerLocation.posZ);
-            int var2 = BlockBed.getDirection(var1);
+            int x = playerLocation.posX;
+            int y = playerLocation.posY;
+            int z = playerLocation.posZ;
+            Block block = Block.blocksList[worldObj.getBlockId(x, y, z)];
+            int var2 = (block == null ? 0 : block.getBedDirection(worldObj, x, y, z));
 
             switch (var2)
             {
@@ -1725,6 +1822,7 @@
                     return 101;
                 }
             }
+            var3 = par1ItemStack.getItem().getIconIndex(par1ItemStack, par2, this, itemInUse, itemInUseCount);
         }
 
         return var3;
