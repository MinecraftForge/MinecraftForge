--- ../src_base/common/net/minecraft/src/ColorizerFoliage.java
+++ ../src_work/common/net/minecraft/src/ColorizerFoliage.java
@@ -1,48 +1,112 @@
 package net.minecraft.src;
 
+import net.minecraftforge.client.IFoliageColorizer;
 import cpw.mods.fml.common.Side;
 import cpw.mods.fml.common.asm.SideOnly;
 
 @SideOnly(Side.CLIENT)
-public class ColorizerFoliage
+public class ColorizerFoliage implements IFoliageColorizer
 {
+    /**
+     * Interface for overriding the functions within this class. Normally you
+     * could just extend the class, but since all methods are static, rather
+     * than being called through an instance, that won't really work.
+     */
+    public static IFoliageColorizer FoliageColorizer = new ColorizerFoliage();
+
     /** Color buffer for foliage */
     private static int[] foliageBuffer = new int[65536];
 
-    public static void getFoilageBiomeColorizer(int[] par0ArrayOfInteger)
+    public static void setFoilageBiomeColorizer(int[] par0ArrayOfInteger)
     {
         foliageBuffer = par0ArrayOfInteger;
     }
 
     /**
-     * Gets foliage color from temperature and humidity. Args: temperature, humidity
+     * Calculates the grass color for blocks based on their biome data. Returns
+     * the output of the current IFoliageColorizer interface.
+     * 
+     * @param temperature
+     *            The temperature of the biome.
+     * @param rainfall
+     *            The rainfall of the biome.
+     * @param grassBuffer
+     *            The default gradient image loaded into ColorizerGrass, as a 1D
+     *            array.
+     * @return The grass color to use for rendering, as an ARGB int (though A is
+     *         ignored).
      */
-    public static int getFoliageColor(double par0, double par2)
+    public static int getFoliageColor(double temperature, double rainfall)
     {
-        par2 *= par0;
-        int var4 = (int)((1.0D - par0) * 255.0D);
-        int var5 = (int)((1.0D - par2) * 255.0D);
+        return FoliageColorizer.colorizeFoliage(temperature, rainfall, foliageBuffer);
+    }
+
+    /**
+     * Gets the foliage color for spruce / pine (meta 1) trees. Returns the
+     * output of the current IFoliageColorizer interface.
+     * 
+     * @return The foliage color to use for rendering, as an ARGB int (though A
+     *         is ignored).
+     */
+    public static int getFoliageColorPine()
+    {
+        return FoliageColorizer.colorizePineFoliage();
+    }
+
+    /**
+     * Gets the foliage color for birch (meta 2) trees. Returns the output of
+     * the current IFoliageColorizer interface.
+     * 
+     * @return The foliage color to use for rendering, as an ARGB int (though A
+     *         is ignored).
+     */
+    public static int getFoliageColorBirch()
+    {
+        return FoliageColorizer.colorizeBirchFoliage();
+    }
+
+    /**
+     * Gets the foliage color for oak (meta 0) trees. Returns the output of the
+     * current IFoliageColorizer interface.
+     * 
+     * @return The foliage color to use for rendering, as an ARGB int (though A
+     *         is ignored).
+     */
+    public static int getFoliageColorBasic()
+    {
+        return FoliageColorizer.colorizeBasicFoliage();
+    }
+
+    @Override
+    public int colorizeFoliage(double temperature, double rainfall, int[] foliageBuffer)
+    {
+        rainfall *= temperature;
+        int var4 = (int) ((1.0D - temperature) * 255.0D);
+        int var5 = (int) ((1.0D - rainfall) * 255.0D);
         return foliageBuffer[var5 << 8 | var4];
     }
 
-    /**
-     * Gets the foliage color for pine type (metadata 1) trees
-     */
-    public static int getFoliageColorPine()
+    @Override
+    public int colorizePineFoliage()
     {
-        return 6396257;
+        // Converted to hex, since color values are meaningless as ints.
+        // return 6396257;
+        return 0x619961;
     }
 
-    /**
-     * Gets the foliage color for birch type (metadata 2) trees
-     */
-    public static int getFoliageColorBirch()
+    @Override
+    public int colorizeBirchFoliage()
     {
-        return 8431445;
+        // Converted to hex, since color values are meaningless as ints.
+        // return 8431445;
+        return 0x80A755;
     }
 
-    public static int getFoliageColorBasic()
+    @Override
+    public int colorizeBasicFoliage()
     {
-        return 4764952;
+        // Converted to hex, since color values are meaningless as ints.
+        // return 4764952;
+        return 0x48B518;
     }
 }
