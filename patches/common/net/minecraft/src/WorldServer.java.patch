--- ../src_base/common/net/minecraft/src/WorldServer.java
+++ ../src_work/common/net/minecraft/src/WorldServer.java
@@ -2,6 +2,8 @@
 
 import cpw.mods.fml.common.Side;
 import cpw.mods.fml.common.asm.SideOnly;
+
+import java.io.File;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -10,6 +12,11 @@
 import java.util.Set;
 import java.util.TreeSet;
 import net.minecraft.server.MinecraftServer;
+import net.minecraftforge.common.ChestGenHooks;
+import static net.minecraftforge.common.ChestGenHooks.*;
+import net.minecraftforge.common.DimensionManager;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.world.WorldEvent;
 
 public class WorldServer extends World
 {
@@ -44,6 +51,9 @@
     /** An IntHashMap of entity IDs (integers) to their Entity objects. */
     private IntHashMap entityIdMap;
 
+    /** Stores the recently processed (lighting) chunks */
+    protected Set<ChunkCoordIntPair> doneChunks = new HashSet<ChunkCoordIntPair>();
+
     public WorldServer(MinecraftServer par1MinecraftServer, ISaveHandler par2ISaveHandler, String par3Str, int par4, WorldSettings par5WorldSettings, Profiler par6Profiler)
     {
         super(par2ISaveHandler, par3Str, par5WorldSettings, WorldProvider.getProviderForDimension(par4), par6Profiler);
@@ -65,6 +75,7 @@
         {
             this.pendingTickListEntries = new TreeSet();
         }
+        DimensionManager.setWorld(par4, this);
     }
 
     /**
@@ -179,10 +190,7 @@
 
     private void resetRainAndThunder()
     {
-        this.worldInfo.setRainTime(0);
-        this.worldInfo.setRaining(false);
-        this.worldInfo.setThunderTime(0);
-        this.worldInfo.setThundering(false);
+        provider.resetRainAndThunder();
     }
 
     public boolean areAllPlayersAsleep()
@@ -253,6 +261,14 @@
         int var1 = 0;
         int var2 = 0;
         Iterator var3 = this.activeChunkSet.iterator();
+
+        doneChunks.retainAll(activeChunkSet);
+        if (doneChunks.size() == activeChunkSet.size())
+        {
+            doneChunks.clear();
+        }
+
+        final long time = -System.currentTimeMillis();
 
         while (var3.hasNext())
         {
@@ -263,14 +279,16 @@
             Chunk var7 = this.getChunkFromChunkCoords(var4.chunkXPos, var4.chunkZPos);
             this.moodSoundAndLightCheck(var5, var6, var7);
             this.theProfiler.endStartSection("tickChunk");
-            var7.updateSkylight();
+            if (System.currentTimeMillis() + time <= 4 && doneChunks.add(var4)) { //Limits and evenly distributes the lighting update time
+                var7.updateSkylight();
+            }
             this.theProfiler.endStartSection("thunder");
             int var8;
             int var9;
             int var10;
             int var11;
 
-            if (this.rand.nextInt(100000) == 0 && this.isRaining() && this.isThundering())
+            if (provider.canDoLightning(var7) && this.rand.nextInt(100000) == 0 && this.isRaining() && this.isThundering())
             {
                 this.updateLCG = this.updateLCG * 3 + 1013904223;
                 var8 = this.updateLCG >> 2;
@@ -288,7 +306,7 @@
             this.theProfiler.endStartSection("iceandsnow");
             int var13;
 
-            if (this.rand.nextInt(16) == 0)
+            if (provider.canDoRainSnowIce(var7) && this.rand.nextInt(16) == 0)
             {
                 this.updateLCG = this.updateLCG * 3 + 1013904223;
                 var8 = this.updateLCG >> 2;
@@ -367,7 +385,8 @@
     public void func_82740_a(int par1, int par2, int par3, int par4, int par5, int par6)
     {
         NextTickListEntry var7 = new NextTickListEntry(par1, par2, par3, par4);
-        byte var8 = 8;
+        boolean isForced = getPersistentChunks().containsKey(new ChunkCoordIntPair(var7.xCoord >> 4, var7.zCoord >> 4));
+        byte var8 = isForced ? (byte)0 : 8;
 
         if (this.scheduledUpdatesAreImmediate && par4 > 0)
         {
@@ -429,7 +448,7 @@
      */
     public void updateEntities()
     {
-        if (this.playerEntities.isEmpty())
+        if (this.playerEntities.isEmpty() && getPersistentChunks().isEmpty())
         {
             if (this.updateEntityTick++ >= 1200)
             {
@@ -478,7 +497,8 @@
 
                 this.pendingTickListEntries.remove(var4);
                 this.field_73064_N.remove(var4);
-                byte var5 = 8;
+                boolean isForced = getPersistentChunks().containsKey(new ChunkCoordIntPair(var4.xCoord >> 4, var4.zCoord >> 4));
+                byte var5 = isForced ? (byte)0 : 8;
 
                 if (this.checkChunksExist(var4.xCoord - var5, var4.yCoord - var5, var4.zCoord - var5, var4.xCoord + var5, var4.yCoord + var5, var4.zCoord + var5))
                 {
@@ -575,15 +595,27 @@
     public List getAllTileEntityInBox(int par1, int par2, int par3, int par4, int par5, int par6)
     {
         ArrayList var7 = new ArrayList();
-        Iterator var8 = this.loadedTileEntityList.iterator();
-
-        while (var8.hasNext())
-        {
-            TileEntity var9 = (TileEntity)var8.next();
-
-            if (var9.xCoord >= par1 && var9.yCoord >= par2 && var9.zCoord >= par3 && var9.xCoord < par4 && var9.yCoord < par5 && var9.zCoord < par6)
-            {
-                var7.add(var9);
+
+        for(int x = (par1 >> 4); x <= (par4 >> 4); x++)
+        {
+            for(int z = (par3 >> 4); z <= (par6 >> 4); z++)
+            {
+                Chunk chunk = getChunkFromChunkCoords(x, z);
+                if (chunk != null)
+                {
+                    for(Object obj : chunk.chunkTileEntityMap.values())
+                    {
+                        TileEntity entity = (TileEntity)obj;
+                        if (!entity.isInvalid())
+                        {
+                            if (entity.xCoord >= par1 && entity.yCoord >= par2 && entity.zCoord >= par3 &&
+                                entity.xCoord <= par4 && entity.yCoord <= par5 && entity.zCoord <= par6)
+                            {
+                                var7.add(entity);
+                            }
+                        }
+                    }
+                }
             }
         }
 
@@ -594,6 +626,11 @@
      * Called when checking if a certain block can be mined or not. The 'spawn safe zone' check is located here.
      */
     public boolean canMineBlock(EntityPlayer par1EntityPlayer, int par2, int par3, int par4)
+    {
+        return super.canMineBlock(par1EntityPlayer, par2, par3, par4);
+    }
+
+    public boolean canMineBlockBody(EntityPlayer par1EntityPlayer, int par2, int par3, int par4)
     {
         int var5 = MathHelper.abs_int(par2 - this.worldInfo.getSpawnX());
         int var6 = MathHelper.abs_int(par4 - this.worldInfo.getSpawnZ());
@@ -603,7 +640,7 @@
             var6 = var5;
         }
 
-        return var6 > 16 || this.mcServer.getConfigurationManager().areCommandsAllowed(par1EntityPlayer.username) || this.mcServer.isSinglePlayer();
+        return var6 > mcServer.func_82357_ak() || this.mcServer.getConfigurationManager().areCommandsAllowed(par1EntityPlayer.username) || this.mcServer.isSinglePlayer();
     }
 
     protected void initialize(WorldSettings par1WorldSettings)
@@ -686,7 +723,7 @@
      */
     protected void createBonusChest()
     {
-        WorldGeneratorBonusChest var1 = new WorldGeneratorBonusChest(bonusChestContent, 10);
+        WorldGeneratorBonusChest var1 = new WorldGeneratorBonusChest(ChestGenHooks.getItems(BONUS_CHEST), ChestGenHooks.getCount(BONUS_CHEST, rand));
 
         for (int var2 = 0; var2 < 10; ++var2)
         {
@@ -729,6 +766,7 @@
             }
 
             this.chunkProvider.saveChunks(par1, par2IProgressUpdate);
+            MinecraftForge.EVENT_BUS.post(new WorldEvent.Save(this));
         }
     }
 
@@ -965,4 +1003,9 @@
     {
         return this.thePlayerManager;
     }
+
+    public File getChunkSaveLocation()
+    {
+        return ((AnvilChunkLoader)theChunkProviderServer.currentChunkLoader).chunkSaveLocation;
+    }
 }
