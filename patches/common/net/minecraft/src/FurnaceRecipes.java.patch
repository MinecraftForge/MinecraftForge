--- ../src_base/common/net/minecraft/src/FurnaceRecipes.java
+++ ../src_work/common/net/minecraft/src/FurnaceRecipes.java
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -10,6 +11,7 @@
     /** The list of smelting results. */
     private Map smeltingList = new HashMap();
     private Map experienceList = new HashMap();
+    private Map metaSmeltingList = new HashMap();
 
     /**
      * Used to call methods addSmelting and getSmeltingResult.
@@ -45,12 +47,14 @@
     public void addSmelting(int par1, ItemStack par2ItemStack, float par3)
     {
         this.smeltingList.put(Integer.valueOf(par1), par2ItemStack);
-        this.experienceList.put(Integer.valueOf(par2ItemStack.itemID), Float.valueOf(par3));
+        this.experienceList.put(Arrays.asList(par2ItemStack.itemID, par2ItemStack.getItemDamage()), Float.valueOf(par3));
     }
 
     /**
      * Returns the smelting result of an item.
+     * Deprecated in favor of a metadata sensitive version
      */
+    @Deprecated
     public ItemStack getSmeltingResult(int par1)
     {
         return (ItemStack)this.smeltingList.get(Integer.valueOf(par1));
@@ -61,8 +65,51 @@
         return this.smeltingList;
     }
 
-    public float getExperience(int par1)
+    public float getExperience(int par1, int par2)
     {
-        return this.experienceList.containsKey(Integer.valueOf(par1)) ? ((Float)this.experienceList.get(Integer.valueOf(par1))).floatValue() : 0.0F;
+     return this.experienceList.containsKey(Arrays.asList(par1, par2)) ? ((Float)this.experienceList.get(Arrays.asList(par1, par2))).floatValue() : 0.0F;
+    }
+
+    /**
+     * Add a metadata-sensitive furnace recipe
+     * @param itemID The Item ID
+     * @param metadata The Item Metadata
+     * @param itemstack The ItemStack for the result
+     */
+    public void addSmelting(int itemID, int metadata, ItemStack itemstack)
+    {
+        metaSmeltingList.put(Arrays.asList(itemID, metadata), itemstack);
+    }
+
+    /**
+     * Add a metadata-sensitive furnace recipe with experience
+     * @param itemID The Item ID
+     * @param metadata The Item Metadata
+     * @param itemstack The ItemStack for the result
+     * @param experience released upon removal from furnace
+     */
+    public void addSmelting(int itemID, int metadata, ItemStack itemstack, float par4)
+    {
+        metaSmeltingList.put(Arrays.asList(itemID, metadata), itemstack);
+        this.experienceList.put(Arrays.asList(itemstack.itemID, itemstack.getItemDamage()), Float.valueOf(par4));
+    }
+    
+    /**
+     * Used to get the resulting ItemStack form a source ItemStack
+     * @param item The Source ItemStack
+     * @return The result ItemStack
+     */
+    public ItemStack getSmeltingResult(ItemStack item) 
+    {
+        if (item == null)
+        {
+            return null;
+        }
+        ItemStack ret = (ItemStack)metaSmeltingList.get(Arrays.asList(item.itemID, item.getItemDamage()));
+        if (ret != null) 
+        {
+            return ret;
+        }
+        return (ItemStack)smeltingList.get(Integer.valueOf(item.itemID));
     }
 }
