--- ../src_base/common/net/minecraft/src/FurnaceRecipes.java
+++ ../src_work/common/net/minecraft/src/FurnaceRecipes.java
@@ -1,6 +1,8 @@
 package net.minecraft.src;
 
+import java.util.Arrays;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 
 public class FurnaceRecipes
@@ -10,6 +12,8 @@
     /** The list of smelting results. */
     private Map smeltingList = new HashMap();
     private Map experienceList = new HashMap();
+    private HashMap<List<Integer>, ItemStack> metaSmeltingList = new HashMap<List<Integer>, ItemStack>();
+    private HashMap<List<Integer>, Float> metaExperience = new HashMap<List<Integer>, Float>();
 
     /**
      * Used to call methods addSmelting and getSmeltingResult.
@@ -51,7 +55,9 @@
 
     /**
      * Returns the smelting result of an item.
+     * Deprecated in favor of a metadata sensitive version
      */
+    @Deprecated
     public ItemStack getSmeltingResult(int par1)
     {
         return (ItemStack)this.smeltingList.get(Integer.valueOf(par1));
@@ -62,8 +68,70 @@
         return this.smeltingList;
     }
 
+    @Deprecated //In favor of ItemStack sensitive version
     public float getExperience(int par1)
     {
         return this.experienceList.containsKey(Integer.valueOf(par1)) ? ((Float)this.experienceList.get(Integer.valueOf(par1))).floatValue() : 0.0F;
     }
+
+    /**
+     * Add a metadata-sensitive furnace recipe
+     * @param itemID The Item ID
+     * @param metadata The Item Metadata
+     * @param itemstack The ItemStack for the result
+     */
+    @Deprecated //In favor of the exp version, will remove next major MC version.
+    public void addSmelting(int itemID, int metadata, ItemStack itemstack)
+    {
+        addSmelting(itemID, metadata, itemstack, 0.0f);
+    }
+
+    /**
+     * A metadata sensitive version of adding a furnace recipe.
+     */
+    public void addSmelting(int itemID, int metadata, ItemStack itemstack, float experience)
+    {
+        metaSmeltingList.put(Arrays.asList(itemID, metadata), itemstack);
+        metaExperience.put(Arrays.asList(itemID, metadata), experience);
+    }
+
+    /**
+     * Used to get the resulting ItemStack form a source ItemStack
+     * @param item The Source ItemStack
+     * @return The result ItemStack
+     */
+    public ItemStack getSmeltingResult(ItemStack item) 
+    {
+        if (item == null)
+        {
+            return null;
+        }
+        ItemStack ret = (ItemStack)metaSmeltingList.get(Arrays.asList(item.itemID, item.getItemDamage()));
+        if (ret != null) 
+        {
+            return ret;
+        }
+        return (ItemStack)smeltingList.get(Integer.valueOf(item.itemID));
+    }
+
+    /**
+     * Grabs the amount of base experience for this item to give when pulled from the furnace slot.
+     */
+    public float getExperience(ItemStack item)
+    {
+        if (item == null || item.getItem() == null)
+        {
+            return 0;
+        }
+        float ret = item.getItem().getSmeltingExperience(item);
+        if (ret < 0 && metaExperience.containsKey(Arrays.asList(item.itemID, item.getItemDamage())))
+        {
+            ret = metaExperience.get(Arrays.asList(item.itemID, item.getItemDamage()));
+        }
+        if (ret < 0 && experienceList.containsKey(item.itemID))
+        {
+            ret = ((Float)experienceList.get(item.itemID)).floatValue();
+        }
+        return (ret < 0 ? 0 : ret);
+    }
 }
