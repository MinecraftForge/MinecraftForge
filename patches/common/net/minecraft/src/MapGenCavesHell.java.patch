--- ../src_base/common/net/minecraft/src/MapGenCavesHell.java
+++ ../src_work/common/net/minecraft/src/MapGenCavesHell.java
@@ -7,15 +7,15 @@
     /**
      * Generates a larger initial cave node than usual. Called 25% of the time.
      */
-    protected void generateLargeCaveNode(int par1, int par2, byte[] par3ArrayOfByte, double par4, double par6, double par8)
+    protected void generateLargeCaveNode(int par1, int par2, int[] par3ArrayOfInt, double par4, double par6, double par8)
     {
-        this.generateCaveNode(par1, par2, par3ArrayOfByte, par4, par6, par8, 1.0F + this.rand.nextFloat() * 6.0F, 0.0F, 0.0F, -1, -1, 0.5D);
+        this.generateCaveNode(par1, par2, par3ArrayOfInt, par4, par6, par8, 1.0F + this.rand.nextFloat() * 6.0F, 0.0F, 0.0F, -1, -1, 0.5D);
     }
 
     /**
      * Generates a node in the current cave system recursion tree.
      */
-    protected void generateCaveNode(int par1, int par2, byte[] par3ArrayOfByte, double par4, double par6, double par8, float par10, float par11, float par12, int par13, int par14, double par15)
+    protected void generateCaveNode(int par1, int par2, int[] par3ArrayOfInt, double par4, double par6, double par8, float par10, float par11, float par12, int par13, int par14, double par15)
     {
         double var17 = (double)(par1 * 16 + 8);
         double var19 = (double)(par2 * 16 + 8);
@@ -67,8 +67,8 @@
 
             if (!var51 && par13 == var25 && par10 > 1.0F)
             {
-                this.generateCaveNode(par1, par2, par3ArrayOfByte, par4, par6, par8, var23.nextFloat() * 0.5F + 0.5F, par11 - ((float)Math.PI / 2F), par12 / 3.0F, par13, par14, 1.0D);
-                this.generateCaveNode(par1, par2, par3ArrayOfByte, par4, par6, par8, var23.nextFloat() * 0.5F + 0.5F, par11 + ((float)Math.PI / 2F), par12 / 3.0F, par13, par14, 1.0D);
+                this.generateCaveNode(par1, par2, par3ArrayOfInt, par4, par6, par8, var23.nextFloat() * 0.5F + 0.5F, par11 - ((float)Math.PI / 2F), par12 / 3.0F, par13, par14, 1.0D);
+                this.generateCaveNode(par1, par2, par3ArrayOfInt, par4, par6, par8, var23.nextFloat() * 0.5F + 0.5F, par11 + ((float)Math.PI / 2F), par12 / 3.0F, par13, par14, 1.0D);
                 return;
             }
 
@@ -137,7 +137,7 @@
 
                                 if (var42 >= 0 && var42 < 128)
                                 {
-                                    if (par3ArrayOfByte[var43] == Block.lavaMoving.blockID || par3ArrayOfByte[var43] == Block.lavaStill.blockID)
+                                    if (par3ArrayOfInt[var43] == Block.lavaMoving.blockID || par3ArrayOfInt[var43] == Block.lavaStill.blockID)
                                     {
                                         var54 = true;
                                     }
@@ -168,11 +168,11 @@
 
                                     if (var48 > -0.7D && var56 * var56 + var48 * var48 + var44 * var44 < 1.0D)
                                     {
-                                        byte var50 = par3ArrayOfByte[var46];
+                                        int var50 = par3ArrayOfInt[var46];
 
                                         if (var50 == Block.netherrack.blockID || var50 == Block.dirt.blockID || var50 == Block.grass.blockID)
                                         {
-                                            par3ArrayOfByte[var46] = 0;
+                                            par3ArrayOfInt[var46] = 0;
                                         }
                                     }
 
@@ -194,7 +194,7 @@
     /**
      * Recursively called by generate() (generate) and optionally by itself.
      */
-    protected void recursiveGenerate(World par1World, int par2, int par3, int par4, int par5, byte[] par6ArrayOfByte)
+    protected void recursiveGenerate(World par1World, int par2, int par3, int par4, int par5, int[] par6ArrayOfInt)
     {
         int var7 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(10) + 1) + 1);
 
@@ -212,7 +212,7 @@
 
             if (this.rand.nextInt(4) == 0)
             {
-                this.generateLargeCaveNode(par4, par5, par6ArrayOfByte, var9, var11, var13);
+                this.generateLargeCaveNode(par4, par5, par6ArrayOfInt, var9, var11, var13);
                 var15 += this.rand.nextInt(4);
             }
 
@@ -221,7 +221,7 @@
                 float var17 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
                 float var18 = (this.rand.nextFloat() - 0.5F) * 2.0F / 8.0F;
                 float var19 = this.rand.nextFloat() * 2.0F + this.rand.nextFloat();
-                this.generateCaveNode(par4, par5, par6ArrayOfByte, var9, var11, var13, var19 * 2.0F, var17, var18, 0, 0, 0.5D);
+                this.generateCaveNode(par4, par5, par6ArrayOfInt, var9, var11, var13, var19 * 2.0F, var17, var18, 0, 0, 0.5D);
             }
         }
     }
