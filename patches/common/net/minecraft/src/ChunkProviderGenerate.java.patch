--- ../src_base/common/net/minecraft/src/ChunkProviderGenerate.java
+++ ../src_work/common/net/minecraft/src/ChunkProviderGenerate.java
@@ -93,7 +93,7 @@
      * Generates the shape of the terrain for the chunk though its all stone though the water is frozen if the
      * temperature is low enough
      */
-    public void generateTerrain(int par1, int par2, byte[] par3ArrayOfByte)
+    public void generateTerrain(int par1, int par2, int[] par3ArrayOfInt)
     {
         byte var4 = 4;
         byte var5 = 16;
@@ -141,15 +141,15 @@
                             {
                                 if ((var47 += var49) > 0.0D)
                                 {
-                                    par3ArrayOfByte[var43 += var44] = (byte)Block.stone.blockID;
+                                    par3ArrayOfInt[var43 += var44] = Block.stone.blockID;
                                 }
                                 else if (var12 * 8 + var31 < var6)
                                 {
-                                    par3ArrayOfByte[var43 += var44] = (byte)Block.waterStill.blockID;
+                                    par3ArrayOfInt[var43 += var44] = Block.waterStill.blockID;
                                 }
                                 else
                                 {
-                                    par3ArrayOfByte[var43 += var44] = 0;
+                                    par3ArrayOfInt[var43 += var44] = 0;
                                 }
                             }
 
@@ -170,7 +170,7 @@
     /**
      * Replaces the stone that was placed in with blocks that match the biome
      */
-    public void replaceBlocksForBiome(int par1, int par2, byte[] par3ArrayOfByte, BiomeGenBase[] par4ArrayOfBiomeGenBase)
+    public void replaceBlocksForBiome(int par1, int par2, int[] par3ArrayOfInt, BiomeGenBase[] par4ArrayOfBiomeGenBase)
     {
         byte var5 = 63;
         double var6 = 0.03125D;
@@ -184,8 +184,8 @@
                 float var11 = var10.getFloatTemperature();
                 int var12 = (int)(this.stoneNoise[var8 + var9 * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
                 int var13 = -1;
-                byte var14 = var10.topBlock;
-                byte var15 = var10.fillerBlock;
+                int var14 = var10.topBlock;
+                int var15 = var10.fillerBlock;
 
                 for (int var16 = 127; var16 >= 0; --var16)
                 {
@@ -193,11 +193,11 @@
 
                     if (var16 <= 0 + this.rand.nextInt(5))
                     {
-                        par3ArrayOfByte[var17] = (byte)Block.bedrock.blockID;
+                        par3ArrayOfInt[var17] = Block.bedrock.blockID;
                     }
                     else
                     {
-                        byte var18 = par3ArrayOfByte[var17];
+                        int var18 = par3ArrayOfInt[var17];
 
                         if (var18 == 0)
                         {
@@ -210,7 +210,7 @@
                                 if (var12 <= 0)
                                 {
                                     var14 = 0;
-                                    var15 = (byte)Block.stone.blockID;
+                                    var15 = Block.stone.blockID;
                                 }
                                 else if (var16 >= var5 - 4 && var16 <= var5 + 1)
                                 {
@@ -222,11 +222,11 @@
                                 {
                                     if (var11 < 0.15F)
                                     {
-                                        var14 = (byte)Block.ice.blockID;
+                                        var14 = Block.ice.blockID;
                                     }
                                     else
                                     {
-                                        var14 = (byte)Block.waterStill.blockID;
+                                        var14 = Block.waterStill.blockID;
                                     }
                                 }
 
@@ -234,22 +234,22 @@
 
                                 if (var16 >= var5 - 1)
                                 {
-                                    par3ArrayOfByte[var17] = var14;
+                                    par3ArrayOfInt[var17] = var14;
                                 }
                                 else
                                 {
-                                    par3ArrayOfByte[var17] = var15;
+                                    par3ArrayOfInt[var17] = var15;
                                 }
                             }
                             else if (var13 > 0)
                             {
                                 --var13;
-                                par3ArrayOfByte[var17] = var15;
+                                par3ArrayOfInt[var17] = var15;
 
                                 if (var13 == 0 && var15 == Block.sand.blockID)
                                 {
                                     var13 = this.rand.nextInt(4);
-                                    var15 = (byte)Block.sandStone.blockID;
+                                    var15 = Block.sandStone.blockID;
                                 }
                             }
                         }
@@ -274,7 +274,7 @@
     public Chunk provideChunk(int par1, int par2)
     {
         this.rand.setSeed((long)par1 * 341873128712L + (long)par2 * 132897987541L);
-        byte[] var3 = new byte[32768];
+        int[] var3 = new int[32768];
         this.generateTerrain(par1, par2, var3);
         this.biomesForGeneration = this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration, par1 * 16, par2 * 16, 16, 16);
         this.replaceBlocksForBiome(par1, par2, var3, this.biomesForGeneration);
@@ -605,10 +605,10 @@
     {
         if (this.mapFeaturesEnabled)
         {
-            this.mineshaftGenerator.generate(this, this.worldObj, par1, par2, (byte[])null);
-            this.villageGenerator.generate(this, this.worldObj, par1, par2, (byte[])null);
-            this.strongholdGenerator.generate(this, this.worldObj, par1, par2, (byte[])null);
-            this.scatteredFeatureGenerator.generate(this, this.worldObj, par1, par2, (byte[])null);
+            this.mineshaftGenerator.generate(this, this.worldObj, par1, par2, (int[])null);
+            this.villageGenerator.generate(this, this.worldObj, par1, par2, (int[])null);
+            this.strongholdGenerator.generate(this, this.worldObj, par1, par2, (int[])null);
+            this.scatteredFeatureGenerator.generate(this, this.worldObj, par1, par2, (int[])null);
         }
     }
 }
