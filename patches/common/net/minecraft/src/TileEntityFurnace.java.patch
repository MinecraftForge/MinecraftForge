--- ../src_base/common/net/minecraft/src/TileEntityFurnace.java
+++ ../src_work/common/net/minecraft/src/TileEntityFurnace.java
@@ -1,11 +1,14 @@
 package net.minecraft.src;
 
+import net.minecraftforge.common.IRestrictiveInventory;
+import net.minecraftforge.common.ISidedInventory;
+import net.minecraftforge.common.ForgeDirection;
 import cpw.mods.fml.common.registry.GameRegistry;
 
 import cpw.mods.fml.common.Side;
 import cpw.mods.fml.common.asm.SideOnly;
 
-public class TileEntityFurnace extends TileEntity implements IInventory
+public class TileEntityFurnace extends TileEntity implements IInventory, ISidedInventory, IRestrictiveInventory
 {
     /**
      * The ItemStacks that hold the items currently being used in the furnace
@@ -235,8 +238,7 @@
 
                         if (this.furnaceItemStacks[1].stackSize == 0)
                         {
-                            Item var3 = this.furnaceItemStacks[1].getItem().getContainerItem();
-                            this.furnaceItemStacks[1] = var3 != null ? new ItemStack(var3) : null;
+                            this.furnaceItemStacks[1] = this.furnaceItemStacks[1].getItem().getContainerItemStack(furnaceItemStacks[1]);
                         }
                     }
                 }
@@ -282,8 +284,12 @@
         }
         else
         {
-            ItemStack var1 = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0].getItem().shiftedIndex);
-            return var1 == null ? false : (this.furnaceItemStacks[2] == null ? true : (!this.furnaceItemStacks[2].isItemEqual(var1) ? false : (this.furnaceItemStacks[2].stackSize < this.getInventoryStackLimit() && this.furnaceItemStacks[2].stackSize < this.furnaceItemStacks[2].getMaxStackSize() ? true : this.furnaceItemStacks[2].stackSize < var1.getMaxStackSize())));
+            ItemStack var1 = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0]);
+            if (var1 == null) return false;
+            if (this.furnaceItemStacks[2] == null) return true;
+            if (!this.furnaceItemStacks[2].isItemEqual(var1)) return false;
+            int result = furnaceItemStacks[2].stackSize + var1.stackSize;
+            return (result <= getInventoryStackLimit() && result <= var1.getMaxStackSize());
         }
     }
 
@@ -294,15 +300,15 @@
     {
         if (this.canSmelt())
         {
-            ItemStack var1 = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0].getItem().shiftedIndex);
+            ItemStack var1 = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0]);
 
             if (this.furnaceItemStacks[2] == null)
             {
                 this.furnaceItemStacks[2] = var1.copy();
             }
-            else if (this.furnaceItemStacks[2].itemID == var1.itemID)
-            {
-                ++this.furnaceItemStacks[2].stackSize;
+            else if (this.furnaceItemStacks[2].isItemEqual(var1))
+            {
+                furnaceItemStacks[2].stackSize += var1.stackSize;
             }
 
             --this.furnaceItemStacks[0].stackSize;
@@ -329,7 +335,7 @@
             int var1 = par0ItemStack.getItem().shiftedIndex;
             Item var2 = par0ItemStack.getItem();
 
-            if (var1 < 256 && Block.blocksList[var1] != null)
+            if (par0ItemStack.getItem() instanceof ItemBlock && Block.blocksList[var1] != null)
             {
                 Block var3 = Block.blocksList[var1];
 
@@ -374,4 +380,24 @@
     public void openChest() {}
 
     public void closeChest() {}
+
+    @Override
+    public int getStartInventorySide(ForgeDirection side)
+    {
+        if (side == ForgeDirection.DOWN) return 1;
+        if (side == ForgeDirection.UP) return 0; 
+        return 2;
+    }
+
+    @Override
+    public int getSizeInventorySide(ForgeDirection side)
+    {
+        return 1;
+    }
+    
+    @Override
+    public boolean isItemValid(int slot, ItemStack item)
+    {
+        return slot != 2;
+    }
 }
