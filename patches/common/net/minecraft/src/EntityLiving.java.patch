--- ../src_base/common/net/minecraft/src/EntityLiving.java
+++ ../src_work/common/net/minecraft/src/EntityLiving.java
@@ -7,6 +7,10 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
+import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.entity.living.*;
+import static net.minecraftforge.event.entity.living.LivingEvent.*;
 
 public abstract class EntityLiving extends Entity
 {
@@ -337,6 +341,7 @@
     public void setAttackTarget(EntityLiving par1EntityLiving)
     {
         this.attackTarget = par1EntityLiving;
+        ForgeHooks.onLivingSetAttackTarget(this, par1EntityLiving);
     }
 
     public boolean isExplosiveMob(Class par1Class)
@@ -420,6 +425,7 @@
     {
         this.entityLivingToAttack = par1EntityLiving;
         this.revengeTimer = this.entityLivingToAttack != null ? 60 : 0;
+        ForgeHooks.onLivingSetAttackTarget(this, par1EntityLiving);
     }
 
     protected void entityInit()
@@ -708,6 +714,11 @@
      */
     public void onUpdate()
     {
+        if (ForgeHooks.onLivingUpdate(this))
+        {
+            return;
+        }
+
         super.onUpdate();
 
         if (!this.worldObj.isRemote)
@@ -889,6 +900,11 @@
      */
     public boolean attackEntityFrom(DamageSource par1DamageSource, int par2)
     {
+        if (ForgeHooks.onLivingAttack(this, par1DamageSource, par2))
+        {
+            return false;
+        }
+
         if (this.worldObj.isRemote)
         {
             return false;
@@ -1095,6 +1111,11 @@
     {
         if (!this.field_83001_bt)
         {
+            par2 = ForgeHooks.onLivingHurt(this, par1DamageSource, par2);
+            if (par2 <= 0)
+            {
+                return;
+            }
             par2 = this.applyArmorCalculations(par1DamageSource, par2);
             par2 = this.applyPotionDamageCalculations(par1DamageSource, par2);
             this.health -= par2;
@@ -1159,6 +1180,11 @@
      */
     public void onDeath(DamageSource par1DamageSource)
     {
+        if (ForgeHooks.onLivingDeath(this, par1DamageSource))
+        {
+            return;
+        }
+
         Entity var2 = par1DamageSource.getEntity();
 
         if (this.scoreValue >= 0 && var2 != null)
@@ -1181,6 +1207,10 @@
             {
                 var3 = EnchantmentHelper.getLootingModifier((EntityLiving)var2);
             }
+
+            captureDrops = true;
+            capturedDrops.clear();
+            int var4 = 0;
 
             if (!this.isChild() && this.worldObj.func_82736_K().func_82766_b("doMobLoot"))
             {
@@ -1189,7 +1219,7 @@
 
                 if (this.recentlyHit > 0)
                 {
-                    int var4 = this.rand.nextInt(200) - var3;
+                    var4 = this.rand.nextInt(200) - var3;
 
                     if (var4 < 5)
                     {
@@ -1197,6 +1227,16 @@
                     }
                 }
             }
+
+            captureDrops = false;
+
+            if (!ForgeHooks.onLivingDrops(this, par1DamageSource, capturedDrops, var3, recentlyHit > 0, var4))
+            {
+                for (EntityItem item : capturedDrops)
+                {
+                    worldObj.spawnEntityInWorld(item);
+                }
+            }
         }
 
         this.worldObj.setEntityState(this, (byte)3);
@@ -1240,6 +1280,12 @@
      */
     protected void fall(float par1)
     {
+        par1 = ForgeHooks.onLivingFall(this, par1);
+        if (par1 <= 0)
+        {
+            return;
+        }
+
         super.fall(par1);
         int var2 = MathHelper.ceiling_float_int(par1 - 3.0F);
 
@@ -1427,7 +1473,7 @@
         int var2 = MathHelper.floor_double(this.boundingBox.minY);
         int var3 = MathHelper.floor_double(this.posZ);
         int var4 = this.worldObj.getBlockId(var1, var2, var3);
-        return var4 == Block.ladder.blockID || var4 == Block.vine.blockID;
+        return ForgeHooks.isLivingOnLadder(Block.blocksList[var4], worldObj, var1, var2, var3);
     }
 
     /**
@@ -1835,6 +1881,7 @@
         }
 
         this.isAirBorne = true;
+        ForgeHooks.onLivingJump(this);
     }
 
     /**
@@ -2362,8 +2409,6 @@
         return this.getCreatureAttribute() == EnumCreatureAttribute.UNDEAD;
     }
 
-    @SideOnly(Side.CLIENT)
-
     /**
      * input is the potion id to remove from the current active potion effects
      */
@@ -2781,4 +2826,30 @@
     {
         return false;
     }
+
+    /***
+     * Removes all potion effects that have curativeItem as a curative item for its effect
+     * @param curativeItem The itemstack we are using to cure potion effects
+     */
+    public void curePotionEffects(ItemStack curativeItem)
+    {
+        Iterator<Integer> potionKey = activePotionsMap.keySet().iterator();
+        
+        if (worldObj.isRemote)
+        {
+            return;
+        }
+        
+        while (potionKey.hasNext())
+        {
+            Integer key = potionKey.next();
+            PotionEffect effect = (PotionEffect)activePotionsMap.get(key);
+            
+            if (effect.isCurativeItem(curativeItem))
+            {
+                potionKey.remove();
+                onFinishedPotionEffect(effect);
+            }
+        }
+    }
 }
