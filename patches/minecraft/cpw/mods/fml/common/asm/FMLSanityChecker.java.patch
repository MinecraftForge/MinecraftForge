--- ../src_base/minecraft/cpw/mods/fml/common/asm/FMLSanityChecker.java
+++ ../src_work/minecraft/cpw/mods/fml/common/asm/FMLSanityChecker.java
@@ -90,10 +90,8 @@
     {
         CodeSource codeSource = getClass().getProtectionDomain().getCodeSource();
         boolean goodFML = false;
-        boolean fmlIsJar = false;
         if (codeSource.getLocation().getProtocol().equals("jar"))
         {
-            fmlIsJar = true;
             Certificate[] certificates = codeSource.getCertificates();
             if (certificates!=null)
             {
@@ -121,67 +119,6 @@
         else
         {
             goodFML = true;
-        }
-
-        boolean goodMC = FMLLaunchHandler.side() == Side.SERVER; //Server is not signed, so assume it's good.
-        try
-        {
-            Class cbr = Class.forName("net.minecraft.server.MinecraftServer",false, cl);
-            codeSource = cbr.getProtectionDomain().getCodeSource();
-        }
-        catch (Exception e)
-        {
-            // Probably a development environment
-            goodMC = true;
-        }
-        if (fmlIsJar && !goodMC && codeSource.getLocation().getProtocol().equals("jar"))
-        {
-            try
-            {
-                String mcPath = codeSource.getLocation().getPath().substring(5);
-                mcPath = mcPath.substring(0, mcPath.lastIndexOf('!'));
-                mcPath = URLDecoder.decode(mcPath, Charsets.UTF_8.name());
-                JarFile mcJarFile = new JarFile(mcPath,true);
-                mcJarFile.getManifest();
-                JarEntry serverEntry = mcJarFile.getJarEntry("net/minecraft/server/MinecraftServer.class");
-                ByteStreams.toByteArray(mcJarFile.getInputStream(serverEntry));
-                Certificate[] certificates = serverEntry.getCertificates();
-                if (certificates!=null)
-                {
-
-                    for (Certificate cert : certificates)
-                    {
-                        String fingerprint = CertificateHelper.getFingerprint(cert);
-                        if (fingerprint.equals(MCFINGERPRINT))
-                        {
-                            FMLRelaunchLog.info("Found valid fingerprint for Minecraft. Certificate fingerprint %s", fingerprint);
-                            goodMC = true;
-                        }
-                    }
-                }
-            }
-            catch (Throwable e)
-            {
-                FMLRelaunchLog.log(Level.SEVERE, e, "A critical error occurred trying to read the minecraft jar file");
-            }
-        }
-        else
-        {
-            goodMC = true;
-        }
-        if (!goodMC)
-        {
-            FMLRelaunchLog.severe("The minecraft jar %s appears to be corrupt! There has been CRITICAL TAMPERING WITH MINECRAFT, it is highly unlikely minecraft will work! STOP NOW, get a clean copy and try again!",codeSource.getLocation().getFile());
-            if (!Boolean.parseBoolean(System.getProperty("fml.ignoreInvalidMinecraftCertificates","false")))
-            {
-                FMLRelaunchLog.severe("For your safety, FML will not launch minecraft. You will need to fetch a clean version of the minecraft jar file");
-                System.exit(1);
-            }
-            else
-            {
-                FMLRelaunchLog.severe("FML has been ordered to ignore the invalid or missing minecraft certificate. THIS IS A VERY DANGEROUS THING TO DO");
-
-            }
         }
         if (!goodFML)
         {
@@ -218,8 +155,10 @@
         cl = (LaunchClassLoader) data.get("classLoader");
         File mcDir = (File)data.get("mcLocation");
         FMLDeobfuscatingRemapper.INSTANCE.setup(mcDir, cl, (String) data.get("deobfuscationFileName"));
-        File binpatches = new File(mcDir,"binpatch");
-        ClassPatchManager.INSTANCE.setup(FMLLaunchHandler.side());
+        // MCPC+ start - disable binary patches
+        // File binpatches = new File(mcDir,"binpatch");
+        // ClassPatchManager.INSTANCE.setup(FMLLaunchHandler.side());
+        // MCPC+ end
     }
 
 }
