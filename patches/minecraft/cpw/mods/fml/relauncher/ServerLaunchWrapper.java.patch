--- ../src_base/minecraft/cpw/mods/fml/relauncher/ServerLaunchWrapper.java
+++ ../src_work/minecraft/cpw/mods/fml/relauncher/ServerLaunchWrapper.java
@@ -7,13 +7,50 @@
 
 import com.google.common.base.Throwables;
 
+// MCPC+ - start
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.URL;
+import java.net.URLConnection;
+import java.util.List;
+import za.co.mcportcentral.VersionInfo;
+import argo.jdom.JsonNode;
+import com.google.common.base.Joiner;
+import com.google.common.base.Splitter;
+import com.google.common.collect.Iterables;
+import com.google.common.collect.Lists;
+import com.google.common.io.Files;
+import com.google.common.io.InputSupplier;
+// MCPC+ - end
+
 public class ServerLaunchWrapper {
+
+    // MCPC+ start
+    public static String[] startupArgs;
+    private List<String> grabbed;
+
+    private class URLISSupplier implements InputSupplier<InputStream> {
+        private final URLConnection connection;
+
+        private URLISSupplier(URLConnection connection)
+        {
+            this.connection = connection;
+        }
+
+        @Override
+        public InputStream getInput() throws IOException
+        {
+            return connection.getInputStream();
+        }
+    }
+    // MCPC+ end
 
     /**
      * @param args
      */
     public static void main(String[] args)
     {
+        startupArgs = args; // MCPC+
         new ServerLaunchWrapper().run(args);
     }
 
@@ -24,6 +61,7 @@
 
     private void run(String[] args)
     {
+        installLibraries(new File(".")); // MCPC+ - install any required libraries
         Class<?> launchwrapper = null;
         try
         {
@@ -55,4 +93,81 @@
         }
     }
 
+    // MCPC+ start
+    public boolean installLibraries(File target)
+    {
+        if (target.exists() && !target.isDirectory())
+        {
+            System.err.printf("There is a file at this location, the server cannot be installed here!");
+            return false;
+        }
+
+        File librariesDir = new File(target,"libraries");
+        if (!target.exists())
+        {
+            target.mkdirs();
+        }
+        librariesDir.mkdir();
+        List<JsonNode> libraries = VersionInfo.getVersionInfo().getArrayNode("libraries");
+        grabbed = Lists.newArrayList();
+        List<String> bad = Lists.newArrayList();
+
+        for (JsonNode library : libraries)
+        {
+            String libName = library.getStringValue("name");
+            System.out.println(String.format("Considering library %s",libName));
+            if (library.isBooleanValue("serverreq") && library.getBooleanValue("serverreq"))
+            {
+                String[] nameparts = Iterables.toArray(Splitter.on(':').split(libName),String.class);
+                nameparts[0]=nameparts[0].replace('.', '/');
+                String jarName = nameparts[1]+'-'+nameparts[2]+".jar";
+                String pathName = nameparts[0]+'/'+nameparts[1]+'/'+nameparts[2]+'/'+jarName;
+                File libPath = new File(librariesDir,pathName.replace('/', File.separatorChar));
+                String libURL = library.isStringValue("url") ? library.getStringValue("url")+"/" : "https://s3.amazonaws.com/Minecraft.Download/libraries/";
+                if (libPath.exists())
+                {
+                    continue;
+                }
+                libPath.getParentFile().mkdirs();
+                System.out.println(String.format("Downloading library %s",libName));
+                libURL+=pathName;
+                if (!downloadFile(libName, libPath, libURL))
+                {
+                    bad.add(libName);
+                }
+                else
+                {
+                    grabbed.add(libName);
+                }
+            }
+        }
+
+        if (bad.size() > 0)
+        {
+            String list = Joiner.on(", ").join(bad);
+            System.err.println("These libraries failed to download, try again. "+list);
+            return false;
+        }
+
+        return true;
+    }
+
+    private boolean downloadFile(String libName, File libPath, String libURL)
+    {
+        try
+        {
+            URL url = new URL(libURL);
+            URLConnection connection = url.openConnection();
+            connection.setConnectTimeout(5000);
+            connection.setReadTimeout(5000);
+            InputSupplier<InputStream> urlSupplier = new URLISSupplier(connection);
+            Files.copy(urlSupplier, libPath);
+            return true;
+        }
+        catch (Exception e)
+        {
+            return false;
+        }
+    }
+    // MCPC+ end
 }
