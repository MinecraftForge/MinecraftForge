--- a/net/minecraft/tags/TagManager.java
+++ b/net/minecraft/tags/TagManager.java
@@ -21,6 +_,7 @@
 public class TagManager implements PreparableReloadListener {
    private static final Logger f_144568_ = LogManager.getLogger();
    private final RegistryAccess f_144569_;
+   protected java.util.Map<ResourceLocation, TagLoader<?>> customTagTypeReaders = net.minecraftforge.common.ForgeTagHandler.createCustomTagTypeReaders();
    private TagContainer f_13478_ = TagContainer.f_13420_;
 
    public TagManager(RegistryAccess p_144572_) {
@@ -40,15 +_,16 @@
          }
 
       });
-      return CompletableFuture.allOf(list.stream().map((p_144591_) -> {
-         return p_144591_.f_144598_;
-      }).toArray((p_144574_) -> {
-         return new CompletableFuture[p_144574_];
-      })).thenCompose(p_13482_::m_6769_).thenAcceptAsync((p_144594_) -> {
+      CompletableFuture<java.util.List<net.minecraftforge.common.ForgeTagHandler.TagCollectionReaderInfo>> customTagTypeResults = net.minecraftforge.common.ForgeTagHandler.getCustomTagTypeReloadResults(p_13483_, p_13486_, customTagTypeReaders);
+      List<CompletableFuture<?>> futures = Lists.newArrayList();
+      list.stream().map(li -> li.f_144598_).forEach(futures::add);
+      futures.add(customTagTypeResults);
+      return CompletableFuture.allOf(futures.toArray(CompletableFuture[]::new)).thenCompose(p_13482_::m_6769_).thenAcceptAsync((p_144594_) -> {
          TagContainer.Builder tagcontainer$builder = new TagContainer.Builder();
          list.forEach((p_144586_) -> {
             p_144586_.m_144602_(tagcontainer$builder);
          });
+         net.minecraftforge.common.ForgeTagHandler.updateCustomTagTypes(customTagTypeResults.join());
          TagContainer tagcontainer = tagcontainer$builder.m_144485_();
          Multimap<ResourceKey<? extends Registry<?>>, ResourceLocation> multimap = StaticTags.m_13283_(tagcontainer);
          if (!multimap.isEmpty()) {
@@ -56,6 +_,8 @@
                return p_144596_.getKey() + ":" + p_144596_.getValue();
             }).sorted().collect(Collectors.joining(",")));
          } else {
+            tagcontainer = TagContainer.reinjectOptionalTags(tagcontainer);
+            net.minecraftforge.common.ForgeTagHandler.reinjectOptionalTagsCustomTypes();
             SerializationTags.m_13202_(tagcontainer);
             this.f_13478_ = tagcontainer;
          }
