--- a/net/minecraft/tags/TagManager.java
+++ b/net/minecraft/tags/TagManager.java
@@ -21,6 +_,7 @@
 public class TagManager implements PreparableReloadListener {
    private static final Logger f_144568_ = LogManager.getLogger();
    private final RegistryAccess f_144569_;
+   protected java.util.Map<ResourceLocation, TagLoader<?>> customTagTypeReaders = net.minecraftforge.common.ForgeTagHandler.createCustomTagTypeReaders();
    private TagContainer f_13478_ = TagContainer.f_13420_;
 
    public TagManager(RegistryAccess p_144572_) {
@@ -56,6 +_,7 @@
                return p_144596_.getKey() + ":" + p_144596_.getValue();
             }).sorted().collect(Collectors.joining(",")));
          } else {
+            tagcontainer = net.minecraftforge.common.ForgeTagHandler.reinjectOptionalTags(tagcontainer);
             SerializationTags.m_13202_(tagcontainer);
             this.f_13478_ = tagcontainer;
          }
@@ -73,6 +_,8 @@
          }, p_144577_);
          return new TagManager.LoaderInfo<>(p_144578_, completablefuture);
       } else {
+         if (net.minecraftforge.common.ForgeTagHandler.getCustomTagTypeNames().contains(p_144578_.m_144338_().m_135782_()))
+            return new TagManager.LoaderInfo<>(p_144578_, CompletableFuture.supplyAsync(() -> ((TagLoader<T>) customTagTypeReaders.get(p_144578_.m_144338_().m_135782_())).m_144544_(p_144576_), p_144577_));
          f_144568_.warn("Can't find registry for {}", (Object)p_144578_.m_144338_());
          return null;
       }
