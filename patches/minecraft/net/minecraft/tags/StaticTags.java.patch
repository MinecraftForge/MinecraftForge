--- a/net/minecraft/tags/StaticTags.java
+++ b/net/minecraft/tags/StaticTags.java
@@ -14,15 +_,16 @@
 import net.minecraft.resources.ResourceLocation;
 
 public class StaticTags {
-   private static final Set<ResourceKey<?>> f_144340_ = Sets.newHashSet();
-   private static final List<StaticTagHelper<?>> f_13264_ = Lists.newArrayList();
+   private static final java.util.Map<ResourceKey<?>, StaticTagHelper<?>> HELPER_MAP = new java.util.HashMap<>(); // Forge: Minecraft separates this for no reason, lets make it a map again!
+   private static final Set<ResourceKey<?>> f_144340_ = HELPER_MAP.keySet();
+   private static final java.util.Collection<StaticTagHelper<?>> f_13264_ = HELPER_MAP.values();
 
    public static <T> StaticTagHelper<T> m_144351_(ResourceKey<? extends Registry<T>> p_144352_, String p_144353_) {
-      if (!f_144340_.add(p_144352_)) {
+      if (f_144340_.contains(p_144352_)) {
          throw new IllegalStateException("Duplicate entry for static tag collection: " + p_144352_);
       } else {
          StaticTagHelper<T> statictaghelper = new StaticTagHelper<>(p_144352_, p_144353_);
-         f_13264_.add(statictaghelper);
+         HELPER_MAP.put(p_144352_, statictaghelper);
          return statictaghelper;
       }
    }
@@ -55,11 +_,29 @@
 
    private static void m_144356_() {
       Set<ResourceKey<?>> set = m_144355_().stream().map(StaticTagHelper::m_144338_).collect(Collectors.toSet());
-      if (!Sets.difference(f_144340_, set).isEmpty()) {
+      if (!Sets.difference(set, f_144340_).isEmpty()) { // Forge: Fix bug with extra tag collections crashing
          throw new IllegalStateException("Missing helper registrations");
       }
    }
 
+   @javax.annotation.Nullable
+   public static StaticTagHelper<?> get(ResourceLocation rl) {
+      return HELPER_MAP.get(ResourceKey.m_135788_(rl));
+   }
+
+   public static Multimap<ResourceKey<? extends Registry<?>>, ResourceLocation> validateVanillaTags(TagContainer tagCollectionSupplier) {
+      Multimap<ResourceKey<? extends Registry<?>>, ResourceLocation> multimap = HashMultimap.create();
+      f_13264_.forEach((tagHelper) -> {
+         if (!net.minecraftforge.common.ForgeTagHandler.getCustomTagTypeNames().contains(tagHelper.m_144338_().m_135782_()))
+            multimap.putAll(tagHelper.m_144338_(), tagHelper.m_13247_(tagCollectionSupplier));
+      });
+      return multimap;
+   }
+
+   public static void fetchCustomTagTypes(TagContainer tagCollectionSupplier) {
+      net.minecraftforge.common.ForgeTagHandler.getCustomTagTypeNames().forEach(tagRegistry -> HELPER_MAP.get(ResourceKey.m_135788_(tagRegistry)).m_13242_(tagCollectionSupplier));
+   }
+
    public static void m_144349_(Consumer<StaticTagHelper<?>> p_144350_) {
       f_13264_.forEach(p_144350_);
    }
@@ -70,6 +_,7 @@
       f_13264_.forEach((p_144344_) -> {
          p_144344_.m_144336_(tagcontainer$builder);
       });
+      net.minecraftforge.common.ForgeTagHandler.populateTagCollectionManager();
       return tagcontainer$builder.m_144485_();
    }
 }
