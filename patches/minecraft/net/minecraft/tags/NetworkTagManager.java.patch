--- a/net/minecraft/tags/NetworkTagManager.java
+++ b/net/minecraft/tags/NetworkTagManager.java
@@ -20,6 +_,7 @@
    protected TagCollectionReader<Item> items = new TagCollectionReader<>(Registry.ITEM::getOptional, "tags/items", "item");
    protected TagCollectionReader<Fluid> fluids = new TagCollectionReader<>(Registry.FLUID::getOptional, "tags/fluids", "fluid");
    protected TagCollectionReader<EntityType<?>> entityTypes = new TagCollectionReader<>(Registry.ENTITY_TYPE::getOptional, "tags/entity_types", "entity_type");
+   protected Map<ResourceLocation, TagCollectionReader<?>> customTagTypeReaders = net.minecraftforge.common.ForgeTagHandler.createCustomTagTypeReaders();
    private ITagCollectionSupplier tags = ITagCollectionSupplier.EMPTY;
 
    public ITagCollectionSupplier getTags() {
@@ -31,11 +_,13 @@
       CompletableFuture<Map<ResourceLocation, ITag.Builder>> completablefuture1 = this.items.prepare(p_215226_2_, p_215226_5_);
       CompletableFuture<Map<ResourceLocation, ITag.Builder>> completablefuture2 = this.fluids.prepare(p_215226_2_, p_215226_5_);
       CompletableFuture<Map<ResourceLocation, ITag.Builder>> completablefuture3 = this.entityTypes.prepare(p_215226_2_, p_215226_5_);
-      return CompletableFuture.allOf(completablefuture, completablefuture1, completablefuture2, completablefuture3).thenCompose(p_215226_1_::wait).thenAcceptAsync((p_232979_5_) -> {
+      CompletableFuture<java.util.List<net.minecraftforge.common.ForgeTagHandler.TagCollectionReaderInfo>> customTagTypeResults = net.minecraftforge.common.ForgeTagHandler.getCustomTagTypeReloadResults(p_215226_2_, p_215226_5_, customTagTypeReaders);
+      return CompletableFuture.allOf(completablefuture, completablefuture1, completablefuture2, completablefuture3, customTagTypeResults).thenCompose(p_215226_1_::wait).thenAcceptAsync((p_232979_5_) -> {
          ITagCollection<Block> itagcollection = this.blocks.load(completablefuture.join());
          ITagCollection<Item> itagcollection1 = this.items.load(completablefuture1.join());
          ITagCollection<Fluid> itagcollection2 = this.fluids.load(completablefuture2.join());
          ITagCollection<EntityType<?>> itagcollection3 = this.entityTypes.load(completablefuture3.join());
+         net.minecraftforge.common.ForgeTagHandler.updateCustomTagTypes(customTagTypeResults.join());
          ITagCollectionSupplier itagcollectionsupplier = ITagCollectionSupplier.of(itagcollection, itagcollection1, itagcollection2, itagcollection3);
          Multimap<ResourceLocation, ResourceLocation> multimap = TagRegistryManager.getAllMissingTags(itagcollectionsupplier);
          if (!multimap.isEmpty()) {
@@ -43,6 +_,8 @@
                return p_232978_0_.getKey() + ":" + p_232978_0_.getValue();
             }).sorted().collect(Collectors.joining(",")));
          } else {
+            itagcollectionsupplier = ITagCollectionSupplier.reinjectOptionalTags(itagcollectionsupplier);
+            net.minecraftforge.common.ForgeTagHandler.reinjectOptionalTagsCustomTypes();
             TagCollectionManager.bind(itagcollectionsupplier);
             this.tags = itagcollectionsupplier;
          }
