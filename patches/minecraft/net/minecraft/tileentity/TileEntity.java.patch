--- ../src-base/minecraft/net/minecraft/tileentity/TileEntity.java
+++ ../src-work/minecraft/net/minecraft/tileentity/TileEntity.java
@@ -3,6 +3,7 @@
 import cpw.mods.fml.common.FMLLog;
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
+
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.Callable;
@@ -12,8 +13,12 @@
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.init.Blocks;
 import net.minecraft.nbt.NBTTagCompound;
+import net.minecraft.network.NetworkManager;
 import net.minecraft.network.Packet;
+import net.minecraft.network.play.server.S35PacketUpdateTileEntity;
+import net.minecraft.util.AxisAlignedBB;
 import net.minecraft.world.World;
+import net.minecraftforge.common.util.ForgeDirection;
 
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
@@ -296,4 +301,141 @@
         addMapping(TileEntityComparator.class, "Comparator");
         addMapping(TileEntityFlowerPot.class, "FlowerPot");
     }
+
+    // -- BEGIN FORGE PATCHES --
+    /**
+     * Determines if this TileEntity requires update calls.
+     * @return True if you want updateEntity() to be called, false if not
+     */
+    public boolean canUpdate()
+    {
+        return true;
+    }
+
+    /**
+     * Called when you receive a TileEntityData packet for the location this
+     * TileEntity is currently in. On the client, the NetworkManager will always
+     * be the remote server. On the server, it will be whomever is responsible for
+     * sending the packet.
+     *
+     * @param net The NetworkManager the packet originated from
+     * @param pkt The data packet
+     */
+    public void onDataPacket(NetworkManager net, S35PacketUpdateTileEntity pkt)
+    {
+    }
+
+    /**
+     * Called when the chunk this TileEntity is on is Unloaded.
+     */
+    public void onChunkUnload()
+    {
+    }
+
+    private boolean isVanilla = getClass().getName().startsWith("net.minecraft.tileentity");
+    /**
+     * Called from Chunk.setBlockIDWithMetadata, determines if this tile entity should be re-created when the ID, or Metadata changes.
+     * Use with caution as this will leave straggler TileEntities, or create conflicts with other TileEntities if not used properly.
+     *
+     * @param oldID The old ID of the block
+     * @param newID The new ID of the block (May be the same)
+     * @param oldMeta The old metadata of the block
+     * @param newMeta The new metadata of the block (May be the same)
+     * @param world Current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z Position
+     * @return True to remove the old tile entity, false to keep it in tact {and create a new one if the new values specify to}
+     */
+    public boolean shouldRefresh(Block oldBlock, Block newBlock, int oldMeta, int newMeta, World world, int x, int y, int z)
+    {
+        return !isVanilla || (oldBlock != newBlock);
+    }
+
+    public boolean shouldRenderInPass(int pass)
+    {
+        return pass == 0;
+    }
+    /**
+     * Sometimes default render bounding box: infinite in scope. Used to control rendering on {@link TileEntitySpecialRenderer}.
+     */
+    public static final AxisAlignedBB INFINITE_EXTENT_AABB = AxisAlignedBB.getBoundingBox(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
+    /**
+     * Return an {@link AxisAlignedBB} that controls the visible scope of a {@link TileEntitySpecialRenderer} associated with this {@link TileEntity}
+     * Defaults to the collision bounding box {@link Block#getCollisionBoundingBoxFromPool(World, int, int, int)} associated with the block
+     * at this location.
+     *
+     * @return an appropriately size {@link AxisAlignedBB} for the {@link TileEntity}
+     */
+    @SideOnly(Side.CLIENT)
+    public AxisAlignedBB getRenderBoundingBox()
+    {
+        AxisAlignedBB bb = INFINITE_EXTENT_AABB;
+        Block type = getBlockType();
+        if (type == Blocks.enchanting_table)
+        {
+            bb = AxisAlignedBB.getAABBPool().getAABB(xCoord, yCoord, zCoord, xCoord + 1, yCoord + 1, zCoord + 1);
+        }
+        else if (type == Blocks.chest || type == Blocks.trapped_chest)
+        {
+            bb = AxisAlignedBB.getAABBPool().getAABB(xCoord - 1, yCoord, zCoord - 1, xCoord + 2, yCoord + 2, zCoord + 2);
+        }
+        else if (type != null && type != Blocks.beacon)
+        {
+            AxisAlignedBB cbb = type.getCollisionBoundingBoxFromPool(worldObj, xCoord, yCoord, zCoord);
+            if (cbb != null)
+            {
+                bb = cbb;
+            }
+        }
+        return bb;
+    }
+    /** Use this method to request any required behavior, like IInventory, instead of simple type cast
+     * 
+     * Sample override which utilizes internal behaviors map (we assume that addition to map is properly guarded)
+     * @code
+     * private Map<Class, Object> behaviors = new HashMap<Class, Object>();
+     * 
+     * public<T> T getBehavior(Class<T> clazz, ForgeDirection side) {
+     *     Object behavior = behaviors.get(clazz);
+     *     if (behavior != null)
+     *         return (T)behavior; 
+     *     return super.getBehavior(clazz, side);
+     * }
+     * @endcode
+     * Sample usage:
+     * @code
+     * IInventory inv = tileEntity.getBehavior(IInventory.class, ForgeDirection.UP);
+     * if (inv != null)
+     *     // perform actions with IInventory
+     * @endcode
+     * 
+     * @param  clazz Requested behavior type
+     * @param  side  Side to get behavior from 
+     * @return       Behavior reference or null, if this TileEntity doesn't support requested behavior on specified side
+     */
+    public<T> T getBehavior(Class<T> clazz, ForgeDirection side) {
+        if (clazz != null && clazz.isInstance(this))
+            return (T)this;
+        return null;
+    }
+    /** Requests behavior from ForgeDirection.UNKNOWN side.
+     *  Shouldn't be overridden. Override other overload, which requests side explicitly, instead.
+     * 
+     * @param clazz Requested behavior type
+     * @return      Behavior reference or null, if this TileEntity doesn't support requested behavior on unknown side
+     */
+    final public<T> T getBehavior(Class<T> clazz) {
+        return getBehavior(clazz, ForgeDirection.UNKNOWN);
+    }
+    /** Requests behavior from specified side.
+     *  Shouldn't be overridden. Override other overload, which requests side explicitly as ForgeDirection, instead.
+     * 
+     * @param clazz Requested behavior type
+     * @param side  Behavior is requested from this side; specified via integer
+     * @return      Behavior reference or null, if this TileEntity doesn't support requested behavior on unknown side
+     */
+    final public<T> T getBehavior(Class<T> clazz, int side) {
+        return getBehavior(clazz, ForgeDirection.getOrientation(side));
+    }
 }
