--- ../src_base/minecraft/net/minecraft/server/integrated/IntegratedServer.java
+++ ../src_work/minecraft/net/minecraft/server/integrated/IntegratedServer.java
@@ -13,8 +13,10 @@
 import net.minecraft.network.NetworkListenThread;
 import net.minecraft.profiler.PlayerUsageSnooper;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.dedicated.PropertyManager;
 import net.minecraft.util.CryptManager;
 import net.minecraft.world.EnumGameType;
+import net.minecraft.world.MinecraftException;
 import net.minecraft.world.WorldManager;
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.WorldServerMulti;
@@ -23,6 +25,10 @@
 import net.minecraft.world.demo.DemoWorldServer;
 import net.minecraft.world.storage.ISaveHandler;
 
+import net.minecraftforge.common.DimensionManager;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.world.WorldEvent;
+
 @SideOnly(Side.CLIENT)
 public class IntegratedServer extends MinecraftServer
 {
@@ -41,7 +47,7 @@
     {
         super(new File(par1Minecraft.mcDataDir, "saves"));
         this.serverLogAgent = new LogAgent("Minecraft-Server", " [SERVER]", (new File(par1Minecraft.mcDataDir, "output-server.log")).getAbsolutePath());
-        this.setServerOwner(par1Minecraft.func_110432_I().func_111285_a());
+        this.setServerOwner(par1Minecraft.getSession().getUsername());
         this.setFolderName(par2Str);
         this.setWorldName(par3Str);
         this.setDemo(par1Minecraft.isDemo());
@@ -49,7 +55,7 @@
         this.setBuildLimit(256);
         this.setConfigurationManager(new IntegratedPlayerList(this));
         this.mc = par1Minecraft;
-        this.field_110456_c = par1Minecraft.func_110437_J();
+        this.serverProxy = par1Minecraft.getProxy();
         this.theWorldSettings = par4WorldSettings;
 
         try
@@ -65,44 +71,23 @@
     protected void loadAllWorlds(String par1Str, String par2Str, long par3, WorldType par5WorldType, String par6Str)
     {
         this.convertMapIfNeeded(par1Str);
-        this.worldServers = new WorldServer[3];
-        this.timeOfLastDimensionTick = new long[this.worldServers.length][100];
         ISaveHandler isavehandler = this.getActiveAnvilConverter().getSaveLoader(par1Str, true);
 
-        for (int j = 0; j < this.worldServers.length; ++j)
-        {
-            byte b0 = 0;
-
-            if (j == 1)
+        WorldServer overWorld = (isDemo() ? new DemoWorldServer(this, isavehandler, par2Str, 0, theProfiler, getLogAgent()) : new WorldServer(this, isavehandler, par2Str, 0, theWorldSettings, theProfiler, getLogAgent()));
+        for (int dim : DimensionManager.getStaticDimensionIDs())
+        {
+            WorldServer world = (dim == 0 ? overWorld : new WorldServerMulti(this, isavehandler, par2Str, dim, theWorldSettings, overWorld, theProfiler, getLogAgent()));
+            world.addWorldAccess(new WorldManager(this, world));
+
+            if (!this.isSinglePlayer())
             {
-                b0 = -1;
+                world.getWorldInfo().setGameType(this.getGameType());
             }
 
-            if (j == 2)
-            {
-                b0 = 1;
-            }
-
-            if (j == 0)
-            {
-                if (this.isDemo())
-                {
-                    this.worldServers[j] = new DemoWorldServer(this, isavehandler, par2Str, b0, this.theProfiler, this.getLogAgent());
-                }
-                else
-                {
-                    this.worldServers[j] = new WorldServer(this, isavehandler, par2Str, b0, this.theWorldSettings, this.theProfiler, this.getLogAgent());
-                }
-            }
-            else
-            {
-                this.worldServers[j] = new WorldServerMulti(this, isavehandler, par2Str, b0, this.theWorldSettings, this.worldServers[0], this.theProfiler, this.getLogAgent());
-            }
-
-            this.worldServers[j].addWorldAccess(new WorldManager(this, this.worldServers[j]));
-            this.getConfigurationManager().setPlayerManager(this.worldServers);
-        }
-
+            MinecraftForge.EVENT_BUS.post(new WorldEvent.Load(world));
+        }
+
+        this.getConfigurationManager().setPlayerManager(new WorldServer[]{ overWorld });
         this.setDifficultyForAllWorlds(this.getDifficulty());
         this.initialWorldChunkLoad();
     }
@@ -110,7 +95,7 @@
     /**
      * Initialises the server and starts it.
      */
-    protected boolean startServer() throws IOException
+    protected boolean startServer()
     {
         this.serverLogAgent.logInfo("Starting integrated minecraft server version 1.6.2");
         this.setOnlineMode(false);
@@ -129,7 +114,7 @@
     /**
      * Main function called by run() every loop.
      */
-    public void tick()
+    public void tick() throws MinecraftException
     {
         boolean flag = this.isGamePaused;
         this.isGamePaused = this.theServerListeningThread.isGamePaused();
@@ -205,8 +190,8 @@
     public CrashReport addServerInfoToCrashReport(CrashReport par1CrashReport)
     {
         par1CrashReport = super.addServerInfoToCrashReport(par1CrashReport);
-        par1CrashReport.func_85056_g().addCrashSectionCallable("Type", new CallableType3(this));
-        par1CrashReport.func_85056_g().addCrashSectionCallable("Is Modded", new CallableIsModded(this));
+        par1CrashReport.getCategory().addCrashSectionCallable("Type", new CallableType3(this));
+        par1CrashReport.getCategory().addCrashSectionCallable("Is Modded", new CallableIsModded(this));
         return par1CrashReport;
     }
 
@@ -254,7 +239,7 @@
     /**
      * Saves all necessary data as preparation for stopping the server.
      */
-    public void stopServer()
+    public void stopServer() throws MinecraftException
     {
         super.stopServer();
 
@@ -312,4 +297,11 @@
     {
         return this.getServerListeningThread();
     }
+
+    @Override
+    public PropertyManager getPropertyManager()
+    {
+        // TODO Auto-generated method stub
+        return null;
+    }
 }
