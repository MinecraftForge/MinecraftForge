--- ../src_base/minecraft/net/minecraft/server/MinecraftServer.java
+++ ../src_work/minecraft/net/minecraft/server/MinecraftServer.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import cpw.mods.fml.common.FMLCommonHandler;
+import cpw.mods.fml.common.Mod;
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
 import java.awt.GraphicsEnvironment;
@@ -11,8 +12,10 @@
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Date;
+import java.util.Hashtable;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import net.minecraft.command.CommandBase;
@@ -54,6 +57,15 @@
 import net.minecraft.world.storage.ISaveHandler;
 import net.minecraft.world.storage.WorldInfo;
 
+import net.minecraftforge.common.DimensionManager;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.world.WorldEvent;
+import net.minecraftforge.permissions.PermissibleBase;
+import net.minecraftforge.permissions.Permission;
+import net.minecraftforge.permissions.PermissionAttachment;
+import net.minecraftforge.permissions.PermissionAttachmentInfo;
+import net.minecraftforge.permissions.api.IPermissible;
+
 public abstract class MinecraftServer implements ICommandSender, Runnable, IPlayerUsage
 {
     /** Instance of Minecraft Server. */
@@ -78,7 +90,7 @@
     private int serverPort = -1;
 
     /** The server world instances. */
-    public WorldServer[] worldServers;
+    public WorldServer[] worldServers = new WorldServer[0];
 
     /** The ServerConfigurationManager instance. */
     private ServerConfigurationManager serverConfigManager;
@@ -132,7 +144,8 @@
     public final long[] tickTimeArray;
 
     /** Stats are [dimension][tick%100] system.nanoTime is stored. */
-    public long[][] timeOfLastDimensionTick;
+    //public long[][] timeOfLastDimensionTick;
+    public Hashtable<Integer, long[]> worldTickTimes = new Hashtable<Integer, long[]>();
     private KeyPair serverKeyPair;
 
     /** Username of the server owner (for integrated servers) */
@@ -216,8 +229,6 @@
     {
         this.convertMapIfNeeded(par1Str);
         this.setUserMessage("menu.loadingLevel");
-        this.worldServers = new WorldServer[3];
-        this.timeOfLastDimensionTick = new long[this.worldServers.length][100];
         ISaveHandler isavehandler = this.anvilConverterForAnvilFile.getSaveLoader(par1Str, true);
         WorldInfo worldinfo = isavehandler.loadWorldInfo();
         WorldSettings worldsettings;
@@ -237,46 +248,23 @@
             worldsettings.enableBonusChest();
         }
 
-        for (int j = 0; j < this.worldServers.length; ++j)
-        {
-            byte b0 = 0;
-
-            if (j == 1)
-            {
-                b0 = -1;
-            }
-
-            if (j == 2)
-            {
-                b0 = 1;
-            }
-
-            if (j == 0)
-            {
-                if (this.isDemo())
-                {
-                    this.worldServers[j] = new DemoWorldServer(this, isavehandler, par2Str, b0, this.theProfiler, this.getLogAgent());
-                }
-                else
-                {
-                    this.worldServers[j] = new WorldServer(this, isavehandler, par2Str, b0, worldsettings, this.theProfiler, this.getLogAgent());
-                }
-            }
-            else
-            {
-                this.worldServers[j] = new WorldServerMulti(this, isavehandler, par2Str, b0, worldsettings, this.worldServers[0], this.theProfiler, this.getLogAgent());
-            }
-
-            this.worldServers[j].addWorldAccess(new WorldManager(this, this.worldServers[j]));
+        WorldServer overWorld = (isDemo() ? new DemoWorldServer(this, isavehandler, par2Str, 0, theProfiler, getLogAgent()) : new WorldServer(this, isavehandler, par2Str, 0, worldsettings, theProfiler, getLogAgent()));
+        for (int dim : DimensionManager.getStaticDimensionIDs())
+        {
+            WorldServer world = (dim == 0 ? overWorld : new WorldServerMulti(this, isavehandler, par2Str, dim, worldsettings, overWorld, theProfiler, getLogAgent()));
+            world.addWorldAccess(new WorldManager(this, world));
 
             if (!this.isSinglePlayer())
             {
-                this.worldServers[j].getWorldInfo().setGameType(this.getGameType());
+                world.getWorldInfo().setGameType(this.getGameType());
             }
 
             this.serverConfigManager.setPlayerManager(this.worldServers);
-        }
-
+
+            MinecraftForge.EVENT_BUS.post(new WorldEvent.Load(world));
+        }
+
+        this.serverConfigManager.setPlayerManager(new WorldServer[]{ overWorld });
         this.setDifficultyForAllWorlds(this.getDifficulty());
         this.initialWorldChunkLoad();
     }
@@ -358,6 +346,7 @@
         if (!this.worldIsBeingDeleted)
         {
             WorldServer[] aworldserver = this.worldServers;
+            if (aworldserver == null) return; //ForgE: Just in case, NPE protection as it has been encountered.
             int i = aworldserver.length;
 
             for (int j = 0; j < i; ++j)
@@ -411,7 +400,14 @@
             for (int i = 0; i < this.worldServers.length; ++i)
             {
                 WorldServer worldserver = this.worldServers[i];
+                MinecraftForge.EVENT_BUS.post(new WorldEvent.Unload(worldserver));
                 worldserver.flush();
+            }
+
+            WorldServer[] tmp = worldServers;
+            for (WorldServer world : tmp)
+            {
+                DimensionManager.setWorld(world.provider.dimensionId, null);
             }
 
             if (this.usageSnooper != null && this.usageSnooper.isSnooperRunning())
@@ -636,13 +632,15 @@
         this.theProfiler.startSection("levels");
         int i;
 
-        for (i = 0; i < this.worldServers.length; ++i)
-        {
+        Integer[] ids = DimensionManager.getIDs(this.tickCounter % 200 == 0);
+        for (int x = 0; x < ids.length; x++)
+        {
+            int id = ids[x];
             long j = System.nanoTime();
 
-            if (i == 0 || this.getAllowNether())
-            {
-                WorldServer worldserver = this.worldServers[i];
+            if (id == 0 || this.getAllowNether())
+            {
+                WorldServer worldserver = DimensionManager.getWorld(id);
                 this.theProfiler.startSection(worldserver.getWorldInfo().getWorldName());
                 this.theProfiler.startSection("pools");
                 worldserver.getWorldVec3Pool().clear();
@@ -689,9 +687,11 @@
                 this.theProfiler.endSection();
             }
 
-            this.timeOfLastDimensionTick[i][this.tickCounter % 100] = System.nanoTime() - j;
-        }
-
+            worldTickTimes.get(id)[this.tickCounter % 100] = System.nanoTime() - j;
+        }
+
+        this.theProfiler.endStartSection("dim_unloading");
+        DimensionManager.unloadWorlds(worldTickTimes);
         this.theProfiler.endStartSection("connection");
         this.getNetworkThread().networkTick();
         this.theProfiler.endStartSection("players");
@@ -745,7 +745,13 @@
      */
     public WorldServer worldServerForDimension(int par1)
     {
-        return par1 == -1 ? this.worldServers[1] : (par1 == 1 ? this.worldServers[2] : this.worldServers[0]);
+        WorldServer ret = DimensionManager.getWorld(par1);
+        if (ret == null)
+        {
+            DimensionManager.initDimension(par1);
+            ret = DimensionManager.getWorld(par1);
+        }
+        return ret;
     }
 
     @SideOnly(Side.SERVER)
@@ -1108,6 +1114,7 @@
 
             if (worldserver != null)
             {
+                MinecraftForge.EVENT_BUS.post(new WorldEvent.Unload(worldserver));
                 worldserver.flush();
             }
         }
@@ -1501,4 +1508,75 @@
             }
         }
     }
+    
+    /* * * * * * * * * * * * *
+     * Permissions Management
+     * * * * * * * * * * * * * */
+        public IPermissible permissibleManager = new PermissibleBase(this);
+        
+
+        public boolean isOp()
+        {
+            return true;
+        }
+
+        public void setOp(boolean value)
+        {
+          //Server is always op.
+        }
+
+        public boolean isPermissionSet(String name){
+            return permissibleManager.isPermissionSet(name);
+        }
+
+        public boolean isPermissionSet(Permission perm)
+        {
+            return permissibleManager.isPermissionSet(perm);
+        }
+
+        public boolean hasPermission(String name)
+        {
+            return permissibleManager.hasPermission(name);
+        }
+
+        public boolean hasPermission(Permission perm)
+        {
+            return permissibleManager.hasPermission(perm);
+        }
+
+        public PermissionAttachment addAttachment(Mod mod, String name, boolean value)
+        {
+            return permissibleManager.addAttachment(mod, name, value);
+        }
+
+        public PermissionAttachment addAttachment(Mod mod)
+        {
+            return permissibleManager.addAttachment(mod);
+        }
+
+        public PermissionAttachment addAttachment(Mod mod, String name, boolean value, int ticks)
+        {
+            return permissibleManager.addAttachment(mod, name, value, ticks);
+        }
+
+        public PermissionAttachment addAttachment(Mod mod, int ticks)
+        {
+            return permissibleManager.addAttachment(mod);
+        }
+
+        public void removeAttachment(PermissionAttachment attachment)
+        {
+            permissibleManager.removeAttachment(attachment);
+        }
+
+        public void recalculatePermissions()
+        {
+            permissibleManager.recalculatePermissions();
+        }
+
+        public Set<PermissionAttachmentInfo> getEffectivePermissions()
+        {
+            return permissibleManager.getEffectivePermissions();
+        }
+
 }
