--- a/net/minecraft/server/level/ChunkMap.java
+++ b/net/minecraft/server/level/ChunkMap.java
@@ -392,6 +_,7 @@
             this.modified = true;
          }
 
+         net.minecraftforge.event.ForgeEventFactory.fireChunkTicketLevelUpdated(this.level, p_140177_, p_140180_, p_140178_, p_140179_);
          return p_140179_;
       }
    }
@@ -497,6 +_,7 @@
             if (this.pendingUnloads.remove(p_140182_, p_140183_) && p_203002_ != null) {
                if (p_203002_ instanceof LevelChunk) {
                   ((LevelChunk)p_203002_).setLoaded(false);
+                  net.minecraftforge.event.ForgeEventFactory.onChunkUnload(p_203002_);
                }
 
                this.save(p_203002_);
@@ -707,8 +_,14 @@
             levelchunk.runPostLoad();
             if (this.entitiesInLevel.add(chunkpos.toLong())) {
                levelchunk.setLoaded(true);
+               try {
+               p_140384_.currentlyLoading = levelchunk; // Forge - bypass the future chain when getChunk is called, this prevents deadlocks.
                levelchunk.registerAllBlockEntitiesAfterLevelLoad();
                levelchunk.registerTickContainerInLevel(this.level);
+               net.minecraftforge.event.ForgeEventFactory.onChunkLoad(levelchunk, !(protochunk instanceof ImposterProtoChunk));
+               } finally {
+                   p_140384_.currentlyLoading = null; // Forge - Stop bypassing the future chain.
+               }
             }
 
             return levelchunk;
@@ -756,6 +_,7 @@
       for(ServerPlayer serverplayer : this.playerMap.getAllPlayers()) {
          if (serverplayer.getChunkTrackingView().contains(chunkpos)) {
             markChunkPendingToSend(serverplayer, p_299599_);
+            net.minecraftforge.event.ForgeEventFactory.fireChunkWatch(serverplayer, p_299599_, this.level);
          }
       }
 
@@ -823,6 +_,7 @@
 
             this.level.getProfiler().incrementCounter("chunkSave");
             CompoundTag compoundtag = ChunkSerializer.write(this.level, p_140259_);
+            net.minecraftforge.event.ForgeEventFactory.onChunkDataSave(p_140259_, p_140259_.getWorldForge() != null ? p_140259_.getWorldForge() : this.level, compoundtag);
             this.write(chunkpos, compoundtag);
             this.markPosition(chunkpos, chunkstatus.getChunkType());
             return true;
@@ -877,6 +_,7 @@
       LevelChunk levelchunk = this.getChunkToSend(p_298062_.toLong());
       if (levelchunk != null) {
          markChunkPendingToSend(p_297974_, levelchunk);
+         net.minecraftforge.event.ForgeEventFactory.fireChunkWatch(p_297974_, levelchunk, this.level);
       }
 
    }
@@ -1099,6 +_,7 @@
             this.markChunkPendingToSend(p_301380_, p_296566_);
          }, (p_296568_) -> {
             dropChunk(p_301380_, p_296568_);
+            net.minecraftforge.event.ForgeEventFactory.fireChunkUnWatch(p_301380_, p_296568_, this.level);
          });
          p_301380_.setChunkTrackingView(p_301057_);
       }
@@ -1118,7 +_,7 @@
    }
 
    protected void addEntity(Entity p_140200_) {
-      if (!(p_140200_ instanceof EnderDragonPart)) {
+      if (!(p_140200_ instanceof net.minecraftforge.entity.PartEntity)) {
          EntityType<?> entitytype = p_140200_.getType();
          int i = entitytype.clientTrackingRange() * 16;
          if (i != 0) {
