--- a/net/minecraft/server/packs/VanillaPackResources.java
+++ b/net/minecraft/server/packs/VanillaPackResources.java
@@ -148,6 +_,9 @@
       try {
          Path path = f_182296_.get(p_215346_);
          if (path != null) {
+            if (net.minecraftforge.resource.ResourceCacheManager.shouldUseCache() && this.cacheManager.hasCached(p_215346_, p_215347_)) {
+               set.addAll(this.cacheManager.getResources(p_215346_, p_215347_, path.getFileSystem().getPath(p_215348_), p_215349_));
+            } else
             m_215357_(set, p_215347_, path, p_215348_, p_215349_);
          } else {
             f_10315_.error("Can't access assets root for type: {}", (Object)p_215346_);
@@ -210,7 +_,7 @@
 
       try {
          URL url = VanillaPackResources.class.getResource(s);
-         return m_10335_(s, url) ? url.openStream() : null;
+         return m_10335_(s, url) ? getExtraInputStream(p_10359_, s) : null;
       } catch (IOException ioexception) {
          return VanillaPackResources.class.getResourceAsStream(s);
       }
@@ -226,7 +_,7 @@
 
    @Nullable
    protected InputStream m_5539_(String p_10334_) {
-      return VanillaPackResources.class.getResourceAsStream("/" + p_10334_);
+      return getExtraInputStream(PackType.SERVER_DATA, "/" + p_10334_);
    }
 
    public boolean m_7211_(PackType p_10355_, ResourceLocation p_10356_) {
@@ -301,11 +_,39 @@
    public void close() {
    }
 
+   //Vanilla used to just grab from the classpath, this breaks dev environments, and Forge runtime
+   //as forge ships vanilla assets in an 'extra' jar with no classes.
+   //So find that extra jar using the .mcassetsroot marker.
+   private InputStream getExtraInputStream(PackType type, String resource) {
+      try {
+         Path rootDir = f_182296_.get(type);
+         if (rootDir != null)
+            return Files.newInputStream(rootDir.resolve(resource));
+         return VanillaPackResources.class.getResourceAsStream(resource);
+      } catch (IOException e) {
+         return VanillaPackResources.class.getResourceAsStream(resource);
+      }
+   }
+
    public ResourceProvider m_215363_() {
       return (p_215344_) -> {
          return Optional.of(new Resource(this.m_8017_(), () -> {
             return this.m_8031_(PackType.CLIENT_RESOURCES, p_215344_);
          }));
       };
+   }
+
+   private final net.minecraftforge.resource.ResourceCacheManager cacheManager = new net.minecraftforge.resource.ResourceCacheManager(false, net.minecraftforge.common.ForgeConfig.COMMON.indexVanillaPackCachesOnThread, (packType, namespace) -> f_182296_.get(packType).resolve(namespace));
+
+   @Override
+   public void initForNamespace(final String nameSpace) {
+      if (net.minecraftforge.resource.ResourceCacheManager.shouldUseCache())
+         this.cacheManager.index(nameSpace);
+   }
+
+   @Override
+   public void init(final PackType packType) {
+      initForNamespace("minecraft"); //Default namespaces.
+      initForNamespace("realms");
    }
 }
