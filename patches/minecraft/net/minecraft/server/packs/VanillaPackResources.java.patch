--- a/net/minecraft/server/packs/VanillaPackResources.java
+++ b/net/minecraft/server/packs/VanillaPackResources.java
@@ -18,12 +_,7 @@
 import java.nio.file.NoSuchFileException;
 import java.nio.file.Path;
 import java.nio.file.Paths;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Enumeration;
-import java.util.Map;
-import java.util.Optional;
-import java.util.Set;
+import java.util.*;
 import java.util.function.Predicate;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
@@ -33,13 +_,17 @@
 import net.minecraft.server.packs.metadata.pack.PackMetadataSection;
 import net.minecraft.server.packs.resources.Resource;
 import net.minecraft.server.packs.resources.ResourceProvider;
+import net.minecraftforge.resource.ResourceCacheManager;
 import org.slf4j.Logger;
 
 public class VanillaPackResources implements PackResources {
+   private static final boolean ENABLE_CACHE = true;
    @Nullable
    public static Path f_10312_;
    private static final Logger f_10315_ = LogUtils.getLogger();
    public static Class<?> f_10313_;
+   private final ResourceCacheManager cacheManager = new ResourceCacheManager(false, true, (packType, namespace) -> f_182296_.get(packType).resolve(namespace));
+
    private static final Map<PackType, Path> f_182296_ = Util.m_137537_(() -> {
       synchronized(VanillaPackResources.class) {
          ImmutableMap.Builder<PackType, Path> builder = ImmutableMap.builder();
@@ -92,6 +_,19 @@
       this.f_10314_ = ImmutableSet.copyOf(p_143762_);
    }
 
+   @Override
+   public void initForNamespace(final String nameSpace) {
+      if (!ENABLE_CACHE) return;
+
+      this.cacheManager.index(nameSpace);
+   }
+
+   @Override
+   public void init(final PackType packType) {
+      initForNamespace("minecraft"); //Default namespaces.
+      initForNamespace("realms");
+   }
+
    public InputStream m_5542_(String p_10358_) throws IOException {
       if (!p_10358_.contains("/") && !p_10358_.contains("\\")) {
          if (f_10312_ != null) {
@@ -146,7 +_,9 @@
 
       try {
          Path path = f_182296_.get(p_215346_);
-         if (path != null) {
+         if (ENABLE_CACHE && path != null && this.cacheManager.hasCached(p_215346_, p_215347_)) {
+            set.addAll(this.cacheManager.getResources(p_215346_, p_215347_, path.getFileSystem().getPath(p_215348_), p_215349_));
+         } else if (path != null) {
             m_215357_(set, p_215347_, path, p_215348_, p_215349_);
          } else {
             f_10315_.error("Can't access assets root for type: {}", (Object)p_215346_);
@@ -209,7 +_,7 @@
 
       try {
          URL url = VanillaPackResources.class.getResource(s);
-         return m_10335_(s, url) ? url.openStream() : null;
+         return m_10335_(s, url) ? getExtraInputStream(p_10359_, s) : null;
       } catch (IOException ioexception) {
          return VanillaPackResources.class.getResourceAsStream(s);
       }
@@ -225,7 +_,7 @@
 
    @Nullable
    protected InputStream m_5539_(String p_10334_) {
-      return VanillaPackResources.class.getResourceAsStream("/" + p_10334_);
+      return getExtraInputStream(PackType.SERVER_DATA, "/" + p_10334_);
    }
 
    public boolean m_7211_(PackType p_10355_, ResourceLocation p_10356_) {
@@ -298,6 +_,20 @@
    }
 
    public void close() {
+   }
+
+   //Vanilla used to just grab from the classpath, this breaks dev environments, and Forge runtime
+   //as forge ships vanilla assets in an 'extra' jar with no classes.
+   //So find that extra jar using the .mcassetsroot marker.
+   private InputStream getExtraInputStream(PackType type, String resource) {
+      try {
+         Path rootDir = f_182296_.get(type);
+         if (rootDir != null)
+            return Files.newInputStream(rootDir.resolve(resource));
+         return VanillaPackResources.class.getResourceAsStream(resource);
+      } catch (IOException e) {
+         return VanillaPackResources.class.getResourceAsStream(resource);
+      }
    }
 
    public ResourceProvider m_215363_() {
