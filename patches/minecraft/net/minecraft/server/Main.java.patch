--- a/net/minecraft/server/Main.java
+++ b/net/minecraft/server/Main.java
@@ -76,6 +_,18 @@
       OptionSpec<String> optionspec12 = optionparser.accepts("serverId").withRequiredArg();
       OptionSpec<Void> optionspec13 = optionparser.accepts("jfrProfile");
       OptionSpec<String> optionspec14 = optionparser.nonOptions();
+      optionparser.accepts("allowUpdates").withRequiredArg().ofType(Boolean.class).defaultsTo(Boolean.TRUE); // Forge: allow mod updates to proceed
+      optionparser.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File(".")); //Forge: Consume this argument, we use it in the launcher, and the client side.
+      final OptionSpec<net.minecraft.core.BlockPos> spawnPosOpt;
+      final OptionSpec<String> enableNamespaceOpt;
+      boolean gametestEnabled = net.minecraftforge.gametest.ForgeGameTestHooks.isGametestEnabled();
+      if (gametestEnabled) {
+         spawnPosOpt = optionparser.accepts("spawnPos").withRequiredArg().withValuesConvertedBy(new net.minecraftforge.gametest.BlockPosValueConverter()).defaultsTo(new net.minecraft.core.BlockPos(0, 60, 0));
+         enableNamespaceOpt = optionparser.accepts("enableNamespace", "Adds an enabled namespace. Only gametests with templates using an enabled namespace will be loaded. If none are added, all gametests are enabled.").withRequiredArg().withValuesSeparatedBy(",");
+      } else {
+          spawnPosOpt = null;
+          enableNamespaceOpt = null;
+      }
 
       try {
          OptionSet optionset = optionparser.parse(p_129699_);
@@ -83,6 +_,13 @@
             optionparser.printHelpOn(System.err);
             return;
          }
+         Path path1 = Paths.get("eula.txt");
+         Eula eula = new Eula(path1);
+
+         if (!eula.m_135944_()) {
+            f_129670_.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
+            return;
+         }
 
          CrashReport.m_127529_();
          if (optionset.has(optionspec13)) {
@@ -92,30 +_,30 @@
          Bootstrap.m_135870_();
          Bootstrap.m_135889_();
          Util.m_137584_();
-         RegistryAccess.RegistryHolder registryaccess$registryholder = RegistryAccess.m_123086_();
+         if (!optionset.has(optionspec1)) net.minecraftforge.server.loading.ServerModLoader.load(); // Load mods before we load almost anything else anymore. Single spot now. Only loads if they haven't passed the initserver param
+         RegistryAccess.RegistryHolder registryaccess$registryholder; // RegistryAccess.builtin(); // Delay initialization until after we read additional save data
          Path path = Paths.get("server.properties");
          DedicatedServerSettings dedicatedserversettings = new DedicatedServerSettings(path);
          dedicatedserversettings.m_139780_();
-         Path path1 = Paths.get("eula.txt");
-         Eula eula = new Eula(path1);
          if (optionset.has(optionspec1)) {
             f_129670_.info("Initialized '{}' and '{}'", path.toAbsolutePath(), path1.toAbsolutePath());
             return;
          }
 
-         if (!eula.m_135944_()) {
-            f_129670_.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
-            return;
-         }
-
          File file1 = new File(optionset.valueOf(optionspec9));
          YggdrasilAuthenticationService yggdrasilauthenticationservice = new YggdrasilAuthenticationService(Proxy.NO_PROXY);
          MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
          GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
          GameProfileCache gameprofilecache = new GameProfileCache(gameprofilerepository, new File(file1, MinecraftServer.f_129742_.getName()));
          String s = Optional.ofNullable(optionset.valueOf(optionspec10)).orElse(dedicatedserversettings.m_139777_().f_139741_);
+         if (s == null || s.isEmpty() || new File(file1, s).getAbsolutePath().equals(new File(s).getAbsolutePath())) {
+            f_129670_.error("Invalid world directory specified, must not be null, empty or the same directory as your universe! " + s);
+            return;
+         }
          LevelStorageSource levelstoragesource = LevelStorageSource.m_78242_(file1.toPath());
          LevelStorageSource.LevelStorageAccess levelstoragesource$levelstorageaccess = levelstoragesource.m_78260_(s);
+         levelstoragesource$levelstorageaccess.readAdditionalLevelSaveData();
+         registryaccess$registryholder = RegistryAccess.m_123086_();
          LevelSummary levelsummary = levelstoragesource$levelstorageaccess.m_78308_();
          if (levelsummary != null) {
             if (levelsummary.m_193020_()) {
@@ -164,6 +_,8 @@
                worldgensettings = optionset.has(optionspec3) ? dedicatedserverproperties.m_180927_(registryaccess$registryholder).m_64671_() : dedicatedserverproperties.m_180927_(registryaccess$registryholder);
             }
 
+            // Forge: Deserialize the DimensionGeneratorSettings to ensure modded dims are loaded on first server load (see SimpleRegistryCodec#decode). Vanilla behaviour only loads from the server.properties and deserializes only after the 2nd server load.
+            worldgensettings = WorldGenSettings.f_64600_.encodeStart(net.minecraft.resources.RegistryWriteOps.m_135767_(NbtOps.f_128958_, registryaccess$registryholder), worldgensettings).flatMap(nbt -> WorldGenSettings.f_64600_.parse(registryreadops, nbt)).getOrThrow(false, errorMsg->{});
             worlddata = new PrimaryLevelData(levelsettings, worldgensettings, Lifecycle.stable());
          }
 
@@ -175,22 +_,33 @@
 
          levelstoragesource$levelstorageaccess.m_78287_(registryaccess$registryholder, worlddata);
          WorldData worlddata1 = worlddata;
-         final DedicatedServer dedicatedserver = MinecraftServer.m_129872_((p_129697_) -> {
-            DedicatedServer dedicatedserver1 = new DedicatedServer(p_129697_, registryaccess$registryholder, levelstoragesource$levelstorageaccess, packrepository, serverresources, worlddata1, dedicatedserversettings, DataFixers.m_14512_(), minecraftsessionservice, gameprofilerepository, gameprofilecache, LoggerChunkProgressListener::new);
+         final MinecraftServer dedicatedserver = MinecraftServer.m_129872_((p_129697_) -> {
+            MinecraftServer dedicatedserver1;
+            if (gametestEnabled) {
+               net.minecraftforge.gametest.ForgeGameTestHooks.registerGametests(java.util.Set.copyOf(optionset.valuesOf(enableNamespaceOpt)));
+               java.util.Collection<net.minecraft.gametest.framework.GameTestBatch> testBatches = net.minecraft.gametest.framework.GameTestRunner.m_127724_(net.minecraft.gametest.framework.GameTestRegistry.m_127658_());
+               net.minecraft.core.BlockPos spawnPos = optionset.valueOf(spawnPosOpt);
+               dedicatedserver1 = new net.minecraft.gametest.framework.GameTestServer(p_129697_, levelstoragesource$levelstorageaccess, packrepository, serverresources, testBatches, spawnPos, registryaccess$registryholder);
+            } else {
+               dedicatedserver1 = new DedicatedServer(p_129697_, registryaccess$registryholder, levelstoragesource$levelstorageaccess, packrepository, serverresources, worlddata1, dedicatedserversettings, DataFixers.m_14512_(), minecraftsessionservice, gameprofilerepository, gameprofilecache, LoggerChunkProgressListener::new);
+            }
             dedicatedserver1.m_129981_(optionset.valueOf(optionspec8));
             dedicatedserver1.m_129801_(optionset.valueOf(optionspec11));
             dedicatedserver1.m_129975_(optionset.has(optionspec2));
             dedicatedserver1.m_129948_(optionset.valueOf(optionspec12));
             boolean flag1 = !optionset.has(optionspec) && !optionset.valuesOf(optionspec14).contains("nogui");
-            if (flag1 && !GraphicsEnvironment.isHeadless()) {
-               dedicatedserver1.m_139667_();
+            if (dedicatedserver1 instanceof DedicatedServer dedicatedServer && flag1 && !GraphicsEnvironment.isHeadless()) {
+               dedicatedServer.m_139667_();
             }
 
             return dedicatedserver1;
          });
          Thread thread = new Thread("Server Shutdown Thread") {
             public void run() {
+               // FORGE: Halting as GameTestServer will cause issues as it always calls System#exit on both crash and normal exit, so skip it
+               if (!(dedicatedserver instanceof net.minecraft.gametest.framework.GameTestServer))
                dedicatedserver.m_7570_(true);
+               LogManager.shutdown(); // we're manually managing the logging shutdown on the server. Make sure we do it here at the end.
             }
          };
          thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(f_129670_));
