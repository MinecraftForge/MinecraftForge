--- ../src_base/minecraft/net/minecraft/server/management/PlayerInstance.java
+++ ../src_work/minecraft/net/minecraft/server/management/PlayerInstance.java
@@ -1,6 +1,7 @@
 package net.minecraft.server.management;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.network.packet.Packet;
@@ -10,6 +11,9 @@
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.world.ChunkCoordIntPair;
 import net.minecraft.world.chunk.Chunk;
+import net.minecraftforge.common.ForgeDummyContainer;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.world.ChunkWatchEvent;
 
 public class PlayerInstance
 {
@@ -66,6 +70,8 @@
             this.playersInChunk.remove(par1EntityPlayerMP);
             par1EntityPlayerMP.loadedChunks.remove(this.chunkLocation);
 
+            MinecraftForge.EVENT_BUS.post(new ChunkWatchEvent.UnWatch(chunkLocation, par1EntityPlayerMP));
+
             if (this.playersInChunk.isEmpty())
             {
                 long i = (long)this.chunkLocation.chunkXPos + 2147483647L | (long)this.chunkLocation.chunkZPos + 2147483647L << 32;
@@ -109,7 +115,7 @@
 
         this.flagsYAreasToUpdate |= 1 << (par2 >> 4);
 
-        if (this.numberOfTilesToUpdate < 64)
+        //if (this.numberOfTilesToUpdate < 64) //Forge; Cache everything, so always run
         {
             short short1 = (short)(par1 << 12 | par3 << 8 | par2);
 
@@ -121,6 +127,10 @@
                 }
             }
 
+            if (numberOfTilesToUpdate == locationOfBlockChange.length)
+            {
+                locationOfBlockChange = Arrays.copyOf(locationOfBlockChange, locationOfBlockChange.length << 1);
+            }
             this.locationOfBlockChange[this.numberOfTilesToUpdate++] = short1;
         }
     }
@@ -162,12 +172,13 @@
             {
                 int l;
 
-                if (this.numberOfTilesToUpdate == 64)
+                if (this.numberOfTilesToUpdate >= ForgeDummyContainer.clumpingThreshold)
                 {
                     i = this.chunkLocation.chunkXPos * 16;
                     j = this.chunkLocation.chunkZPos * 16;
                     this.sendToAllPlayersWatchingChunk(new Packet51MapChunk(PlayerManager.getWorldServer(this.thePlayerManager).getChunkFromChunkCoords(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos), false, this.flagsYAreasToUpdate));
 
+                    /* Forge: Grabs ALL tile entities is costly on a modded server, only send needed ones
                     for (k = 0; k < 16; ++k)
                     {
                         if ((this.flagsYAreasToUpdate & 1 << k) != 0)
@@ -181,11 +192,14 @@
                             }
                         }
                     }
+                    */
                 }
                 else
                 {
                     this.sendToAllPlayersWatchingChunk(new Packet52MultiBlockChange(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos, this.locationOfBlockChange, this.numberOfTilesToUpdate, PlayerManager.getWorldServer(this.thePlayerManager)));
-
+                }
+
+                { //Forge: Send only the tile entities that are updated, Adding this brace lets us keep the indent and the patch small
                     for (i = 0; i < this.numberOfTilesToUpdate; ++i)
                     {
                         j = this.chunkLocation.chunkXPos * 16 + (this.locationOfBlockChange[i] >> 12 & 15);
