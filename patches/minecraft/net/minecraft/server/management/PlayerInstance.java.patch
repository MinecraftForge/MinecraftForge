--- ../src_base/minecraft/net/minecraft/server/management/PlayerInstance.java
+++ ../src_work/minecraft/net/minecraft/server/management/PlayerInstance.java
@@ -1,6 +1,7 @@
 package net.minecraft.server.management;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.network.packet.Packet;
@@ -10,6 +11,9 @@
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.world.ChunkCoordIntPair;
 import net.minecraft.world.chunk.Chunk;
+import net.minecraftforge.common.ForgeDummyContainer;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.world.ChunkWatchEvent;
 
 public class PlayerInstance
 {
@@ -21,6 +25,7 @@
     private int numberOfTilesToUpdate;
     private int field_73260_f;
     private long field_111198_g;
+    private boolean loaded = false; // CraftBukkit
 
     final PlayerManager thePlayerManager;
 
@@ -30,13 +35,21 @@
         this.playersInChunk = new ArrayList();
         this.locationOfBlockChange = new short[64];
         this.chunkLocation = new ChunkCoordIntPair(par2, par3);
-        par1PlayerManager.getWorldServer().theChunkProviderServer.loadChunk(par2, par3);
+        // CraftBukkit start
+        par1PlayerManager.getWorldServer().theChunkProviderServer.getChunkAt(par2, par3, new Runnable()
+        {
+            public void run()
+            {
+                PlayerInstance.this.loaded = true;
+            }
+        });
+        // CraftBukkit end
     }
 
     /**
      * called for all chunks within the visible radius of the player
      */
-    public void addPlayerToChunkWatchingList(EntityPlayerMP par1EntityPlayerMP)
+    public void addPlayerToChunkWatchingList(final EntityPlayerMP par1EntityPlayerMP)   // CraftBukkit - added final to argument
     {
         if (this.playersInChunk.contains(par1EntityPlayerMP))
         {
@@ -50,7 +63,25 @@
             }
 
             this.playersInChunk.add(par1EntityPlayerMP);
-            par1EntityPlayerMP.loadedChunks.add(this.chunkLocation);
+
+            // CraftBukkit start
+            if (this.loaded)
+            {
+                par1EntityPlayerMP.loadedChunks.add(this.chunkLocation);
+            }
+            else
+            {
+                // Abuse getChunkAt to add another callback
+                this.thePlayerManager.getWorldServer().theChunkProviderServer.getChunkAt(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos, new Runnable()
+                {
+                    public void run()
+                    {
+                        par1EntityPlayerMP.loadedChunks.add(PlayerInstance.this.chunkLocation);
+                    }
+                });
+            }
+
+            // CraftBukkit end
         }
     }
 
@@ -58,16 +89,16 @@
     {
         if (this.playersInChunk.contains(par1EntityPlayerMP))
         {
-            Chunk chunk = PlayerManager.getWorldServer(this.thePlayerManager).getChunkFromChunkCoords(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos);
-            par1EntityPlayerMP.playerNetServerHandler.sendPacketToPlayer(new Packet51MapChunk(chunk, true, 0));
+            // TODO: MCPC finish patching
+            par1EntityPlayerMP.playerNetServerHandler.sendPacketToPlayer(new Packet51MapChunk(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos)); // Spigot - remove chunk load call just to unload in favour of specialized constructor
             this.playersInChunk.remove(par1EntityPlayerMP);
             par1EntityPlayerMP.loadedChunks.remove(this.chunkLocation);
 
+            MinecraftForge.EVENT_BUS.post(new ChunkWatchEvent.UnWatch(chunkLocation, par1EntityPlayerMP));
+
             if (this.playersInChunk.isEmpty())
             {
                 long i = (long)this.chunkLocation.chunkXPos + 2147483647L | (long)this.chunkLocation.chunkZPos + 2147483647L << 32;
-                this.func_111196_a(chunk);
-                PlayerManager.getChunkWatchers(this.thePlayerManager).remove(i);
                 PlayerManager.func_111191_d(this.thePlayerManager).remove(this);
 
                 if (this.numberOfTilesToUpdate > 0)
@@ -100,7 +131,7 @@
 
         this.field_73260_f |= 1 << (par2 >> 4);
 
-        if (this.numberOfTilesToUpdate < 64)
+        //if (this.numberOfTilesToUpdate < 64) //Forge; Cache everything, so always run
         {
             short short1 = (short)(par1 << 12 | par3 << 8 | par2);
 
@@ -112,6 +143,10 @@
                 }
             }
 
+            if (numberOfTilesToUpdate == locationOfBlockChange.length)
+            {
+                locationOfBlockChange = Arrays.copyOf(locationOfBlockChange, locationOfBlockChange.length << 1);
+            }
             this.locationOfBlockChange[this.numberOfTilesToUpdate++] = short1;
         }
     }
@@ -142,7 +177,7 @@
                 i = this.chunkLocation.chunkXPos * 16 + (this.locationOfBlockChange[0] >> 12 & 15);
                 j = this.locationOfBlockChange[0] & 255;
                 k = this.chunkLocation.chunkZPos * 16 + (this.locationOfBlockChange[0] >> 8 & 15);
-                this.sendToAllPlayersWatchingChunk(new Packet53BlockChange(i, j, k, PlayerManager.getWorldServer(this.thePlayerManager)));
+                this.sendToAllPlayersWatchingChunk(new Packet51MapChunk(PlayerManager.getWorldServer(this.thePlayerManager).getChunkFromChunkCoords(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos), (this.field_73260_f == 0xFFFF), this.field_73260_f)); // CraftBukkit - send everything (including biome) if all sections flagged
 
                 if (PlayerManager.getWorldServer(this.thePlayerManager).blockHasTileEntity(i, j, k))
                 {
@@ -153,12 +188,13 @@
             {
                 int l;
 
-                if (this.numberOfTilesToUpdate == 64)
+                if (this.numberOfTilesToUpdate >= ForgeDummyContainer.clumpingThreshold)
                 {
                     i = this.chunkLocation.chunkXPos * 16;
                     j = this.chunkLocation.chunkZPos * 16;
                     this.sendToAllPlayersWatchingChunk(new Packet51MapChunk(PlayerManager.getWorldServer(this.thePlayerManager).getChunkFromChunkCoords(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos), false, this.field_73260_f));
 
+                    /* Forge: Grabs ALL tile entities is costly on a modded server, only send needed ones
                     for (k = 0; k < 16; ++k)
                     {
                         if ((this.field_73260_f & 1 << k) != 0)
@@ -172,11 +208,14 @@
                             }
                         }
                     }
+                    */
                 }
                 else
                 {
                     this.sendToAllPlayersWatchingChunk(new Packet52MultiBlockChange(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos, this.locationOfBlockChange, this.numberOfTilesToUpdate, PlayerManager.getWorldServer(this.thePlayerManager)));
-
+                }
+
+                { //Forge: Send only the tile entities that are updated, Adding this brace lets us keep the indent and the patch small
                     for (i = 0; i < this.numberOfTilesToUpdate; ++i)
                     {
                         j = this.chunkLocation.chunkXPos * 16 + (this.locationOfBlockChange[i] >> 12 & 15);
