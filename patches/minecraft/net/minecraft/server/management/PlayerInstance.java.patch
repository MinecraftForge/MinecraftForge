--- ../src_base/minecraft/net/minecraft/server/management/PlayerInstance.java
+++ ../src_work/minecraft/net/minecraft/server/management/PlayerInstance.java
@@ -1,6 +1,7 @@
 package net.minecraft.server.management;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.network.packet.Packet;
@@ -10,6 +11,9 @@
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.world.ChunkCoordIntPair;
 import net.minecraft.world.chunk.Chunk;
+import net.minecraftforge.common.ForgeDummyContainer;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.world.ChunkWatchEvent;
 
 public class PlayerInstance
 {
@@ -19,14 +23,9 @@
     private final ChunkCoordIntPair chunkLocation;
     private short[] locationOfBlockChange;
     private int numberOfTilesToUpdate;
-
-    /**
-     * Integer field where each bit means to make update 16x16x16 division of chunk (from bottom).
-     */
-    private int flagsYAreasToUpdate;
-
-    /** time what is using when chunk InhabitedTime is being calculated */
-    private long previousWorldTime;
+    private int field_73260_f;
+    private long field_111198_g;
+    private boolean loaded = false; // CraftBukkit
 
     final PlayerManager thePlayerManager;
 
@@ -36,10 +35,21 @@
         this.playersInChunk = new ArrayList();
         this.locationOfBlockChange = new short[64];
         this.chunkLocation = new ChunkCoordIntPair(par2, par3);
-        par1PlayerManager.getWorldServer().theChunkProviderServer.loadChunk(par2, par3);
-    }
-
-    public void addPlayer(EntityPlayerMP par1EntityPlayerMP)
+        // CraftBukkit start
+        par1PlayerManager.getWorldServer().theChunkProviderServer.getChunkAt(par2, par3, new Runnable()
+        {
+            public void run()
+            {
+                PlayerInstance.this.loaded = true;
+            }
+        });
+        // CraftBukkit end
+    }
+
+    /**
+     * called for all chunks within the visible radius of the player
+     */
+    public void addPlayer(final EntityPlayerMP par1EntityPlayerMP)   // CraftBukkit - added final to argument
     {
         if (this.playersInChunk.contains(par1EntityPlayerMP))
         {
@@ -49,11 +59,29 @@
         {
             if (this.playersInChunk.isEmpty())
             {
-                this.previousWorldTime = PlayerManager.getWorldServer(this.thePlayerManager).getTotalWorldTime();
+                this.field_111198_g = PlayerManager.getWorldServer(this.thePlayerManager).getTotalWorldTime();
             }
 
             this.playersInChunk.add(par1EntityPlayerMP);
-            par1EntityPlayerMP.loadedChunks.add(this.chunkLocation);
+
+            // CraftBukkit start
+            if (this.loaded)
+            {
+                par1EntityPlayerMP.loadedChunks.add(this.chunkLocation);
+            }
+            else
+            {
+                // Abuse getChunkAt to add another callback
+                this.thePlayerManager.getWorldServer().theChunkProviderServer.getChunkAt(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos, new Runnable()
+                {
+                    public void run()
+                    {
+                        par1EntityPlayerMP.loadedChunks.add(PlayerInstance.this.chunkLocation);
+                    }
+                });
+            }
+
+            // CraftBukkit end
         }
     }
 
@@ -66,12 +94,14 @@
             this.playersInChunk.remove(par1EntityPlayerMP);
             par1EntityPlayerMP.loadedChunks.remove(this.chunkLocation);
 
+            MinecraftForge.EVENT_BUS.post(new ChunkWatchEvent.UnWatch(chunkLocation, par1EntityPlayerMP));
+
             if (this.playersInChunk.isEmpty())
             {
                 long i = (long)this.chunkLocation.chunkXPos + 2147483647L | (long)this.chunkLocation.chunkZPos + 2147483647L << 32;
-                this.increaseInhabitedTime(chunk);
+                this.func_111196_a(chunk);
                 PlayerManager.getChunkWatchers(this.thePlayerManager).remove(i);
-                PlayerManager.getChunkWatcherList(this.thePlayerManager).remove(this);
+                PlayerManager.func_111191_d(this.thePlayerManager).remove(this);
 
                 if (this.numberOfTilesToUpdate > 0)
                 {
@@ -83,21 +113,15 @@
         }
     }
 
-    /**
-     * This method currently only increases chunk inhabited time. Extension is possible in next versions
-     */
-    public void processChunk()
-    {
-        this.increaseInhabitedTime(PlayerManager.getWorldServer(this.thePlayerManager).getChunkFromChunkCoords(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos));
-    }
-
-    /**
-     * Increases chunk inhabited time every 8000 ticks
-     */
-    private void increaseInhabitedTime(Chunk par1Chunk)
-    {
-        par1Chunk.inhabitedTime += PlayerManager.getWorldServer(this.thePlayerManager).getTotalWorldTime() - this.previousWorldTime;
-        this.previousWorldTime = PlayerManager.getWorldServer(this.thePlayerManager).getTotalWorldTime();
+    public void func_111194_a()
+    {
+        this.func_111196_a(PlayerManager.getWorldServer(this.thePlayerManager).getChunkFromChunkCoords(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos));
+    }
+
+    private void func_111196_a(Chunk par1Chunk)
+    {
+        par1Chunk.inhabitedTime += PlayerManager.getWorldServer(this.thePlayerManager).getTotalWorldTime() - this.field_111198_g;
+        this.field_111198_g = PlayerManager.getWorldServer(this.thePlayerManager).getTotalWorldTime();
     }
 
     public void flagChunkForUpdate(int par1, int par2, int par3)
@@ -107,9 +131,9 @@
             PlayerManager.getChunkWatchersWithPlayers(this.thePlayerManager).add(this);
         }
 
-        this.flagsYAreasToUpdate |= 1 << (par2 >> 4);
-
-        if (this.numberOfTilesToUpdate < 64)
+        this.field_73260_f |= 1 << (par2 >> 4);
+
+        //if (this.numberOfTilesToUpdate < 64) //Forge; Cache everything, so always run
         {
             short short1 = (short)(par1 << 12 | par3 << 8 | par2);
 
@@ -121,6 +145,10 @@
                 }
             }
 
+            if (numberOfTilesToUpdate == locationOfBlockChange.length)
+            {
+                locationOfBlockChange = Arrays.copyOf(locationOfBlockChange, locationOfBlockChange.length << 1);
+            }
             this.locationOfBlockChange[this.numberOfTilesToUpdate++] = short1;
         }
     }
@@ -151,7 +179,7 @@
                 i = this.chunkLocation.chunkXPos * 16 + (this.locationOfBlockChange[0] >> 12 & 15);
                 j = this.locationOfBlockChange[0] & 255;
                 k = this.chunkLocation.chunkZPos * 16 + (this.locationOfBlockChange[0] >> 8 & 15);
-                this.sendToAllPlayersWatchingChunk(new Packet53BlockChange(i, j, k, PlayerManager.getWorldServer(this.thePlayerManager)));
+                this.sendToAllPlayersWatchingChunk(new Packet51MapChunk(PlayerManager.getWorldServer(this.thePlayerManager).getChunkFromChunkCoords(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos), (this.field_73260_f == 0xFFFF), this.field_73260_f)); // CraftBukkit - send everything (including biome) if all sections flagged
 
                 if (PlayerManager.getWorldServer(this.thePlayerManager).blockHasTileEntity(i, j, k))
                 {
@@ -162,15 +190,16 @@
             {
                 int l;
 
-                if (this.numberOfTilesToUpdate == 64)
+                if (this.numberOfTilesToUpdate >= ForgeDummyContainer.clumpingThreshold)
                 {
                     i = this.chunkLocation.chunkXPos * 16;
                     j = this.chunkLocation.chunkZPos * 16;
-                    this.sendToAllPlayersWatchingChunk(new Packet51MapChunk(PlayerManager.getWorldServer(this.thePlayerManager).getChunkFromChunkCoords(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos), false, this.flagsYAreasToUpdate));
-
+                    this.sendToAllPlayersWatchingChunk(new Packet51MapChunk(PlayerManager.getWorldServer(this.thePlayerManager).getChunkFromChunkCoords(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos), false, this.field_73260_f));
+
+                    /* Forge: Grabs ALL tile entities is costly on a modded server, only send needed ones
                     for (k = 0; k < 16; ++k)
                     {
-                        if ((this.flagsYAreasToUpdate & 1 << k) != 0)
+                        if ((this.field_73260_f & 1 << k) != 0)
                         {
                             l = k << 4;
                             List list = PlayerManager.getWorldServer(this.thePlayerManager).getAllTileEntityInBox(i, l, j, i + 16, l + 16, j + 16);
@@ -181,11 +210,14 @@
                             }
                         }
                     }
+                    */
                 }
                 else
                 {
                     this.sendToAllPlayersWatchingChunk(new Packet52MultiBlockChange(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos, this.locationOfBlockChange, this.numberOfTilesToUpdate, PlayerManager.getWorldServer(this.thePlayerManager)));
-
+                }
+
+                { //Forge: Send only the tile entities that are updated, Adding this brace lets us keep the indent and the patch small
                     for (i = 0; i < this.numberOfTilesToUpdate; ++i)
                     {
                         j = this.chunkLocation.chunkXPos * 16 + (this.locationOfBlockChange[i] >> 12 & 15);
@@ -201,7 +233,7 @@
             }
 
             this.numberOfTilesToUpdate = 0;
-            this.flagsYAreasToUpdate = 0;
+            this.field_73260_f = 0;
         }
     }
 
