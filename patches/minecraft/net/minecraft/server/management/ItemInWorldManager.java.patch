--- ../src-base/minecraft/net/minecraft/server/management/ItemInWorldManager.java
+++ ../src-work/minecraft/net/minecraft/server/management/ItemInWorldManager.java
@@ -7,12 +7,23 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.ItemSword;
 import net.minecraft.network.play.server.S23PacketBlockChange;
+import net.minecraft.tileentity.TileEntity;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.WorldSettings;
+import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.common.MinecraftForge;
+import cpw.mods.fml.common.eventhandler.Event;
+import net.minecraftforge.event.ForgeEventFactory;
+import net.minecraftforge.event.entity.player.PlayerDestroyItemEvent;
+import net.minecraftforge.event.entity.player.PlayerInteractEvent;
+import net.minecraftforge.event.entity.player.PlayerInteractEvent.Action;
+import net.minecraftforge.event.world.BlockEvent;
 
 public class ItemInWorldManager
 {
+    /** Forge reach distance */
+    private double blockReachDistance = 5.0d;
     // JAVADOC FIELD $$ field_73092_a
     public World theWorld;
     // JAVADOC FIELD $$ field_73090_b
@@ -133,6 +144,13 @@
     {
         if (!this.gameType.isAdventure() || this.thisPlayerMP.isCurrentToolAdventureModeExempt(par1, par2, par3))
         {
+            PlayerInteractEvent event = ForgeEventFactory.onPlayerInteract(thisPlayerMP, Action.LEFT_CLICK_BLOCK, par1, par2, par3, par4);
+            if (event.isCanceled())
+            {
+                thisPlayerMP.playerNetServerHandler.sendPacket(new S23PacketBlockChange(par1, par2, par3, theWorld));
+                return;
+            }
+
             if (this.isCreative())
             {
                 if (!this.theWorld.extinguishFire((EntityPlayer)null, par1, par2, par3, par4))
@@ -142,19 +160,36 @@
             }
             else
             {
-                this.theWorld.extinguishFire((EntityPlayer)null, par1, par2, par3, par4);
                 this.initialDamage = this.curblockDamage;
                 float f = 1.0F;
                 Block block = this.theWorld.getBlock(par1, par2, par3);
 
-                if (block.getMaterial() != Material.air)
+                
+                if (!block.isAir(theWorld, par1, par2, par3))
                 {
-                    block.onBlockClicked(this.theWorld, par1, par2, par3, this.thisPlayerMP);
-                    f = block.getPlayerRelativeBlockHardness(this.thisPlayerMP, this.thisPlayerMP.worldObj, par1, par2, par3);
+                    if (event.useBlock != Event.Result.DENY)
+                    {
+                        block.onBlockClicked(theWorld, par1, par2, par3, thisPlayerMP);
+                        theWorld.extinguishFire(thisPlayerMP, par1, par2, par3, par4);
+                    }
+                    else
+                    {
+                        thisPlayerMP.playerNetServerHandler.sendPacket(new S23PacketBlockChange(par1, par2, par3, theWorld));
+                    }
+                    f = block.getPlayerRelativeBlockHardness(thisPlayerMP, thisPlayerMP.worldObj, par1, par2, par3);
                 }
 
-                if (block.getMaterial() != Material.air && f >= 1.0F)
+                if (event.useItem == Event.Result.DENY)
                 {
+                    if (f >= 1.0f)
+                    {
+                        thisPlayerMP.playerNetServerHandler.sendPacket(new S23PacketBlockChange(par1, par2, par3, theWorld));
+                    }
+                    return;
+                }
+
+                if (!block.isAir(theWorld, par1, par2, par3) && f >= 1.0F)
+                {
                     this.tryHarvestBlock(par1, par2, par3);
                 }
                 else
@@ -178,7 +213,7 @@
             int l = this.curblockDamage - this.initialDamage;
             Block block = this.theWorld.getBlock(par1, par2, par3);
 
-            if (block.getMaterial() != Material.air)
+            if (!block.isAir(theWorld, par1, par2, par3))
             {
                 float f = block.getPlayerRelativeBlockHardness(this.thisPlayerMP, this.thisPlayerMP.worldObj, par1, par2, par3) * (float)(l + 1);
 
@@ -214,7 +249,7 @@
         Block block = this.theWorld.getBlock(par1, par2, par3);
         int l = this.theWorld.getBlockMetadata(par1, par2, par3);
         block.onBlockHarvested(this.theWorld, par1, par2, par3, l, this.thisPlayerMP);
-        boolean flag = this.theWorld.setBlockToAir(par1, par2, par3);
+        boolean flag = block.removedByPlayer(theWorld, thisPlayerMP, par1, par2, par3);
 
         if (flag)
         {
@@ -227,29 +262,32 @@
     // JAVADOC METHOD $$ func_73084_b
     public boolean tryHarvestBlock(int par1, int par2, int par3)
     {
-        if (this.gameType.isAdventure() && !this.thisPlayerMP.isCurrentToolAdventureModeExempt(par1, par2, par3))
+        BlockEvent.BreakEvent event = ForgeHooks.onBlockBreakEvent(theWorld, gameType, thisPlayerMP, par1, par2, par3);
+        if (event.isCanceled())
         {
             return false;
         }
-        else if (this.gameType.isCreative() && this.thisPlayerMP.getHeldItem() != null && this.thisPlayerMP.getHeldItem().getItem() instanceof ItemSword)
-        {
-            return false;
-        }
         else
         {
+            ItemStack stack = thisPlayerMP.getCurrentEquippedItem();
+            if (stack != null && stack.getItem().onBlockStartBreak(stack, par1, par2, par3, thisPlayerMP))
+            {
+                return false;
+            }
             Block block = this.theWorld.getBlock(par1, par2, par3);
             int l = this.theWorld.getBlockMetadata(par1, par2, par3);
             this.theWorld.playAuxSFXAtEntity(this.thisPlayerMP, 2001, par1, par2, par3, Block.getIdFromBlock(block) + (this.theWorld.getBlockMetadata(par1, par2, par3) << 12));
-            boolean flag = this.removeBlock(par1, par2, par3);
+            boolean flag = false;
 
             if (this.isCreative())
             {
+                flag = this.removeBlock(par1, par2, par3);
                 this.thisPlayerMP.playerNetServerHandler.sendPacket(new S23PacketBlockChange(par1, par2, par3, this.theWorld));
             }
             else
             {
                 ItemStack itemstack = this.thisPlayerMP.getCurrentEquippedItem();
-                boolean flag1 = this.thisPlayerMP.canHarvestBlock(block);
+                boolean flag1 = block.canHarvestBlock(thisPlayerMP, l);
 
                 if (itemstack != null)
                 {
@@ -261,12 +299,24 @@
                     }
                 }
 
+                TileEntity tile = null;
+                if(block.hasTileEntity(l))
+                {
+                    tile = this.theWorld.getTileEntity(par1, par2, par3);
+                }
+                flag = this.removeBlock(par1, par2, par3);
                 if (flag && flag1)
                 {
-                    block.harvestBlock(this.theWorld, this.thisPlayerMP, par1, par2, par3, l);
+                    block.harvestBlock(this.theWorld, this.thisPlayerMP, par1, par2, par3, l, tile);
                 }
+                tile = null;
             }
 
+            // Drop experience
+            if (!this.isCreative() && flag && event != null)
+            {
+                block.dropXpOnBlockBreak(this.theWorld, par1, par2, par3, event.getExpToDrop());
+            }
             return flag;
         }
     }
@@ -299,6 +349,7 @@
             if (itemstack1.stackSize == 0)
             {
                 par1EntityPlayer.inventory.mainInventory[par1EntityPlayer.inventory.currentItem] = null;
+                MinecraftForge.EVENT_BUS.post(new PlayerDestroyItemEvent(thisPlayerMP, itemstack1));
             }
 
             if (!par1EntityPlayer.isUsingItem())
@@ -313,27 +364,57 @@
     // JAVADOC METHOD $$ func_73078_a
     public boolean activateBlockOrUseItem(EntityPlayer par1EntityPlayer, World par2World, ItemStack par3ItemStack, int par4, int par5, int par6, int par7, float par8, float par9, float par10)
     {
-        if ((!par1EntityPlayer.isSneaking() || par1EntityPlayer.getHeldItem() == null) && par2World.getBlock(par4, par5, par6).onBlockActivated(par2World, par4, par5, par6, par1EntityPlayer, par7, par8, par9, par10))
+        PlayerInteractEvent event = ForgeEventFactory.onPlayerInteract(par1EntityPlayer, Action.RIGHT_CLICK_BLOCK, par4, par5, par6, par7);
+        if (event.isCanceled())
         {
-            return true;
+            thisPlayerMP.playerNetServerHandler.sendPacket(new S23PacketBlockChange(par4, par5, par6, theWorld));
+            return false;
         }
-        else if (par3ItemStack == null)
+
+        if (par3ItemStack != null && par3ItemStack.getItem().onItemUseFirst(par3ItemStack, par1EntityPlayer, par2World, par4, par5, par6, par7, par8, par9, par10))
         {
-            return false;
+            if (par3ItemStack.stackSize <= 0) ForgeEventFactory.onPlayerDestroyItem(thisPlayerMP, par3ItemStack);
+            return true;
         }
-        else if (this.isCreative())
+
+        Block block = par2World.getBlock(par4, par5, par6);
+        boolean isAir = block.isAir(par2World, par4, par5, par6);
+        boolean useBlock = !par1EntityPlayer.isSneaking() || par1EntityPlayer.getHeldItem() == null;
+        if (!useBlock) useBlock = par1EntityPlayer.getHeldItem().getItem().doesSneakBypassUse(par2World, par4, par5, par6, par1EntityPlayer);
+        boolean result = false;
+
+        if (useBlock)
         {
-            int i1 = par3ItemStack.getItemDamage();
-            int j1 = par3ItemStack.stackSize;
-            boolean flag = par3ItemStack.tryPlaceItemIntoWorld(par1EntityPlayer, par2World, par4, par5, par6, par7, par8, par9, par10);
-            par3ItemStack.setItemDamage(i1);
-            par3ItemStack.stackSize = j1;
-            return flag;
+            if (event.useBlock != Event.Result.DENY)
+            {
+                result = block.onBlockActivated(par2World, par4, par5, par6, par1EntityPlayer, par7, par8, par9, par10);
+            }
+            else
+            {
+                thisPlayerMP.playerNetServerHandler.sendPacket(new S23PacketBlockChange(par4, par5, par6, theWorld));
+                result = event.useItem != Event.Result.ALLOW;
+            }
         }
-        else
+
+        if (par3ItemStack != null && !result && event.useItem != Event.Result.DENY)
         {
-            return par3ItemStack.tryPlaceItemIntoWorld(par1EntityPlayer, par2World, par4, par5, par6, par7, par8, par9, par10);
+            int meta = par3ItemStack.getItemDamage();
+            int size = par3ItemStack.stackSize;
+            result = par3ItemStack.tryPlaceItemIntoWorld(par1EntityPlayer, par2World, par4, par5, par6, par7, par8, par9, par10);
+            if (isCreative())
+            {
+                par3ItemStack.setItemDamage(meta);
+                par3ItemStack.stackSize = size;
+            }
+            if (par3ItemStack.stackSize <= 0) ForgeEventFactory.onPlayerDestroyItem(thisPlayerMP, par3ItemStack);
         }
+
+        /* Re-enable if this causes bukkit incompatibility, or re-write client side to only send a single packet per right click.
+        if (par3ItemStack != null && ((!result && event.useItem != Event.Result.DENY) || event.useItem == Event.Result.ALLOW))
+        {
+            this.tryUseItem(thisPlayerMP, par2World, par3ItemStack);
+        }*/
+        return result;
     }
 
     // JAVADOC METHOD $$ func_73080_a
@@ -341,4 +422,13 @@
     {
         this.theWorld = par1WorldServer;
     }
+
+    public double getBlockReachDistance()
+    {
+        return blockReachDistance;
+    }
+    public void setBlockReachDistance(double distance)
+    {
+        blockReachDistance = distance;
+    }
 }
