--- a/net/minecraft/data/TagsProvider.java
+++ b/net/minecraft/data/TagsProvider.java
@@ -41,17 +41,27 @@
          return Optional.empty();
       }, "", false, "generated");
 
-      for(Entry<Tag<T>, Tag.Builder<T>> entry : this.field_200434_b.entrySet()) {
-         ResourceLocation resourcelocation = entry.getKey().func_199886_b();
-         if (!entry.getValue().func_200160_a(tagcollection::func_199910_a)) {
-            throw new UnsupportedOperationException("Unsupported referencing of tags!");
+      //This does not support resolving nested tags of ResourceLocation type entries.
+      //So we must do this in multiple passes, and error if we have a pass that doesn't resolve anything.
+      java.util.Set<Tag<T>> pending = new java.util.HashSet<>(this.field_200434_b.keySet());
+      java.util.Set<Tag<?>> processed = new java.util.HashSet<>();
+
+      do {
+         pending.removeAll(processed);
+         processed.clear();
+      for (Tag<T> key : pending) {
+         Tag.Builder<T> value = this.field_200434_b.get(key);
+         ResourceLocation resourcelocation = key.func_199886_b();
+         if (!value.func_200160_a(tagcollection::func_199910_a)) {
+            continue;
          }
 
-         Tag<T> tag = entry.getValue().func_200051_a(resourcelocation);
+         Tag<T> tag = value.func_200051_a(resourcelocation);
          JsonObject jsonobject = tag.func_200571_a(this.field_200435_c::func_177774_c);
          Path path = this.func_200431_a(resourcelocation);
          tagcollection.func_199912_a(tag);
          this.func_200429_a(tagcollection);
+         processed.add(key);
 
          try {
             String s = field_200437_e.toJson((JsonElement)jsonobject);
@@ -69,7 +79,11 @@
             field_200436_d.error("Couldn't save tags to {}", path, ioexception);
          }
       }
+      } while (!processed.isEmpty() && !pending.isEmpty());
 
+      if (!pending.isEmpty()) {
+         throw new UnsupportedOperationException("Failed to resolve tags: " + pending.stream().map(Tag::func_199886_b).map(Object::toString).sorted().collect(java.util.stream.Collectors.joining(", ")));
+      }
    }
 
    protected abstract void func_200429_a(TagCollection<T> p_200429_1_);
