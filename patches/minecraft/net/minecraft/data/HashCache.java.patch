--- a/net/minecraft/data/HashCache.java
+++ b/net/minecraft/data/HashCache.java
@@ -35,6 +_,7 @@
    private final Path cacheDir;
    private final String versionId;
    private final Map<String, HashCache.ProviderCache> caches;
+   private final Map<String, HashCache.ProviderCache> originalCaches;
    private final Set<String> cachesToWrite = new HashSet<>();
    private final Set<Path> cachePaths = new HashSet<>();
    private final int initialCount;
@@ -61,6 +_,7 @@
       }
 
       this.caches = map;
+      this.originalCaches = Map.copyOf(this.caches);
       this.initialCount = i;
    }
 
@@ -104,6 +_,8 @@
       this.caches.forEach((p_253378_, p_253379_) -> {
          if (this.cachesToWrite.contains(p_253378_)) {
             Path path = this.getProviderCachePath(p_253378_);
+            // Forge: Only rewrite the cache file if it changed or is missing
+            if (!p_253379_.equals(this.originalCaches.get(p_253378_)) || !Files.exists(path))
             p_253379_.save(this.rootDir, path, DateTimeFormatter.ISO_LOCAL_DATE_TIME.format(LocalDateTime.now()) + "\t" + p_253378_);
          }
 
@@ -208,10 +_,11 @@
             bufferedwriter.write(p_236145_);
             bufferedwriter.newLine();
 
-            for(Map.Entry<Path, HashCode> entry : this.data.entrySet()) {
+            // Forge: Standardize order of entries
+            for(Map.Entry<Path, HashCode> entry : this.data.entrySet().stream().sorted(Map.Entry.comparingByKey()).toList()) {
                bufferedwriter.write(entry.getValue().toString());
                bufferedwriter.write(32);
-               bufferedwriter.write(p_236143_.relativize(entry.getKey()).toString());
+               bufferedwriter.write(p_236143_.relativize(entry.getKey()).toString().replace("\\", "/")); // Forge: Standardize file paths.
                bufferedwriter.newLine();
             }
          } catch (IOException ioexception) {
