--- a/net/minecraft/data/LootTableProvider.java
+++ b/net/minecraft/data/LootTableProvider.java
@@ -43,7 +_,7 @@
    public void run(DirectoryCache p_200398_1_) {
       Path path = this.generator.getOutputFolder();
       Map<ResourceLocation, LootTable> map = Maps.newHashMap();
-      this.subProviders.forEach((p_218438_1_) -> {
+      this.getTables().forEach((p_218438_1_) -> {
          p_218438_1_.getFirst().get().accept((p_218437_2_, p_218437_3_) -> {
             if (map.put(p_218437_2_, p_218437_3_.setParamSet(p_218438_1_.getSecond()).build()) != null) {
                throw new IllegalStateException("Duplicate loot table " + p_218437_2_);
@@ -54,13 +_,8 @@
          return null;
       }, map::get);
 
-      for(ResourceLocation resourcelocation : Sets.difference(LootTables.all(), map.keySet())) {
-         validationtracker.reportProblem("Missing built-in table: " + resourcelocation);
-      }
+      validate(map, validationtracker);
 
-      map.forEach((p_229439_1_, p_229439_2_) -> {
-         LootTableManager.validate(validationtracker, p_229439_1_, p_229439_2_);
-      });
       Multimap<String, String> multimap = validationtracker.getProblems();
       if (!multimap.isEmpty()) {
          multimap.forEach((p_229440_0_, p_229440_1_) -> {
@@ -79,6 +_,20 @@
 
          });
       }
+   }
+
+   protected List<Pair<Supplier<Consumer<BiConsumer<ResourceLocation, LootTable.Builder>>>, LootParameterSet>> getTables() {
+      return subProviders;
+   }
+
+   protected void validate(Map<ResourceLocation, LootTable> map, ValidationTracker validationtracker) {
+      for(ResourceLocation resourcelocation : Sets.difference(LootTables.all(), map.keySet())) {
+         validationtracker.reportProblem("Missing built-in table: " + resourcelocation);
+      }
+
+      map.forEach((p_218436_2_, p_218436_3_) -> {
+         LootTableManager.validate(validationtracker, p_218436_2_, p_218436_3_);
+      });
    }
 
    private static Path createPath(Path p_218439_0_, ResourceLocation p_218439_1_) {
