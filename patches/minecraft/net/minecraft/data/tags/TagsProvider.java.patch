--- a/net/minecraft/data/tags/TagsProvider.java
+++ b/net/minecraft/data/tags/TagsProvider.java
@@ -36,20 +_,48 @@
    private final CompletableFuture<TagsProvider.TagLookup<T>> parentProvider;
    protected final ResourceKey<? extends Registry<T>> registryKey;
    protected final Map<ResourceLocation, TagBuilder> builders = Maps.newLinkedHashMap();
+   protected final String modId;
+   @org.jetbrains.annotations.Nullable
+   protected final net.minecraftforge.common.data.ExistingFileHelper existingFileHelper;
+   private final net.minecraftforge.common.data.ExistingFileHelper.IResourceType resourceType;
+   private final net.minecraftforge.common.data.ExistingFileHelper.IResourceType elementResourceType; // FORGE: Resource type for validating required references to datapack registry elements.
 
+   /**
+    * @deprecated Forge: Use the {@linkplain #TagsProvider(PackOutput, ResourceKey, CompletableFuture, String, net.minecraftforge.common.data.ExistingFileHelper) mod id variant}
+    */
    protected TagsProvider(PackOutput p_256596_, ResourceKey<? extends Registry<T>> p_255886_, CompletableFuture<HolderLookup.Provider> p_256513_) {
-      this(p_256596_, p_255886_, p_256513_, CompletableFuture.completedFuture(TagsProvider.TagLookup.empty()));
+      this(p_256596_, p_255886_, p_256513_, "vanilla", null);
+   }
+   protected TagsProvider(PackOutput p_256596_, ResourceKey<? extends Registry<T>> p_255886_, CompletableFuture<HolderLookup.Provider> p_256513_, String modId, @org.jetbrains.annotations.Nullable net.minecraftforge.common.data.ExistingFileHelper existingFileHelper) {
+      this(p_256596_, p_255886_, p_256513_, CompletableFuture.completedFuture(TagsProvider.TagLookup.empty()), modId, existingFileHelper);
    }
 
+   /**
+    * @deprecated Forge: Use the {@linkplain #TagsProvider(PackOutput, ResourceKey, CompletableFuture, CompletableFuture, String, net.minecraftforge.common.data.ExistingFileHelper) mod id variant}
+    */
+   @Deprecated
    protected TagsProvider(PackOutput p_275432_, ResourceKey<? extends Registry<T>> p_275476_, CompletableFuture<HolderLookup.Provider> p_275222_, CompletableFuture<TagsProvider.TagLookup<T>> p_275565_) {
+      this(p_275432_, p_275476_, p_275222_, p_275565_, "vanilla", null);
+   }
+   protected TagsProvider(PackOutput p_275432_, ResourceKey<? extends Registry<T>> p_275476_, CompletableFuture<HolderLookup.Provider> p_275222_, CompletableFuture<TagsProvider.TagLookup<T>> p_275565_, String modId, @org.jetbrains.annotations.Nullable net.minecraftforge.common.data.ExistingFileHelper existingFileHelper) {
       this.pathProvider = p_275432_.createPathProvider(PackOutput.Target.DATA_PACK, TagManager.getTagDir(p_275476_));
       this.registryKey = p_275476_;
       this.parentProvider = p_275565_;
       this.lookupProvider = p_275222_;
+      this.modId = modId;
+      this.existingFileHelper = existingFileHelper;
+      this.resourceType = new net.minecraftforge.common.data.ExistingFileHelper.ResourceType(net.minecraft.server.packs.PackType.SERVER_DATA, ".json", TagManager.getTagDir(p_275476_));
+      this.elementResourceType = new net.minecraftforge.common.data.ExistingFileHelper.ResourceType(net.minecraft.server.packs.PackType.SERVER_DATA, ".json", net.minecraftforge.common.ForgeHooks.prefixNamespace(p_275476_.location()));
+   }
+
+   // Forge: Allow customizing the path for a given tag or returning null
+   @org.jetbrains.annotations.Nullable
+   protected Path getPath(ResourceLocation id) {
+      return this.pathProvider.json(id);
    }
 
    public String getName() {
-      return "Tags for " + this.registryKey.location();
+      return "Tags for " + this.registryKey.location() + " mod id " + this.modId;
    }
 
    protected abstract void addTags(HolderLookup.Provider p_256380_);
@@ -64,7 +_,13 @@
 
          return new CombinedData<>(p_274778_, p_274779_);
       }).thenCompose((p_274774_) -> {
-         HolderLookup.RegistryLookup<T> registrylookup = p_274774_.contents.lookupOrThrow(this.registryKey);
+         HolderLookup.RegistryLookup<T> registrylookup = p_274774_.contents.lookup(this.registryKey).orElseThrow(() -> {
+            // FORGE: Throw a more descriptive error message if this is a Forge registry without tags enabled
+            if (net.minecraftforge.registries.RegistryManager.ACTIVE.getRegistry(this.registryKey) != null) {
+               return new IllegalStateException("Forge registry " + this.registryKey.location() + " does not have support for tags");
+            }
+            return new IllegalStateException("Registry " + this.registryKey.location() + " not found");
+         });
          Predicate<ResourceLocation> predicate = (p_255496_) -> {
             return registrylookup.get(ResourceKey.create(this.registryKey, p_255496_)).isPresent();
          };
@@ -75,14 +_,16 @@
             ResourceLocation resourcelocation = p_255499_.getKey();
             TagBuilder tagbuilder = p_255499_.getValue();
             List<TagEntry> list = tagbuilder.build();
-            List<TagEntry> list1 = list.stream().filter((p_274771_) -> {
+            List<TagEntry> list1 = java.util.stream.Stream.concat(list.stream(), tagbuilder.getRemoveEntries()).filter((p_274771_) -> {
                return !p_274771_.verifyIfPresent(predicate, predicate1);
-            }).toList();
+            }).filter(this::missing).toList(); // Forge: Add validation via existing resources
             if (!list1.isEmpty()) {
                throw new IllegalArgumentException(String.format(Locale.ROOT, "Couldn't define tag %s as it is missing following references: %s", resourcelocation, list1.stream().map(Objects::toString).collect(Collectors.joining(","))));
             } else {
-               JsonElement jsonelement = TagFile.CODEC.encodeStart(JsonOps.INSTANCE, new TagFile(list, false)).getOrThrow(false, LOGGER::error);
-               Path path = this.pathProvider.json(resourcelocation);
+               var removed = tagbuilder.getRemoveEntries().toList();
+               JsonElement jsonelement = TagFile.CODEC.encodeStart(JsonOps.INSTANCE, new TagFile(list, tagbuilder.isReplace(), removed)).getOrThrow(false, LOGGER::error);
+               Path path = this.getPath(resourcelocation);
+               if (path == null) return CompletableFuture.completedFuture(null); // Forge: Allow running this data provider without writing it. Recipe provider needs valid tags.
                return DataProvider.saveStable(p_253684_, jsonelement, path);
             }
          }).toArray((p_253442_) -> {
@@ -91,13 +_,25 @@
       });
    }
 
+   private boolean missing(TagEntry reference) {
+      // Optional tags should not be validated
+
+      if (reference.isRequired()) {
+         return existingFileHelper == null || !existingFileHelper.exists(reference.getId(), reference.isTag() ? resourceType : elementResourceType);
+      }
+      return false;
+   }
+
    protected TagsProvider.TagAppender<T> tag(TagKey<T> p_206425_) {
       TagBuilder tagbuilder = this.getOrCreateRawBuilder(p_206425_);
-      return new TagsProvider.TagAppender<>(tagbuilder);
+      return new TagsProvider.TagAppender<>(tagbuilder, modId);
    }
 
    protected TagBuilder getOrCreateRawBuilder(TagKey<T> p_236452_) {
       return this.builders.computeIfAbsent(p_236452_.location(), (p_236442_) -> {
+         if (existingFileHelper != null) {
+            existingFileHelper.trackGenerated(p_236442_, resourceType);
+         }
          return TagBuilder.create();
       });
    }
@@ -118,11 +_,13 @@
       });
    }
 
-   public static class TagAppender<T> {
+   public static class TagAppender<T> implements net.minecraftforge.common.extensions.IForgeTagAppender<T> {
       private final TagBuilder builder;
+      private final String modId;
 
-      protected TagAppender(TagBuilder p_256426_) {
-         this.builder = p_256426_;
+      protected TagAppender(TagBuilder p_236454_, String modId) {
+         this.builder = p_236454_;
+         this.modId = modId;
       }
 
       public final TagsProvider.TagAppender<T> add(ResourceKey<T> p_256138_) {
@@ -152,6 +_,19 @@
       public TagsProvider.TagAppender<T> addOptionalTag(ResourceLocation p_176842_) {
          this.builder.addOptionalTag(p_176842_);
          return this;
+      }
+
+      public TagsProvider.TagAppender<T> add(TagEntry tag) {
+          builder.add(tag);
+          return this;
+      }
+
+      public TagBuilder getInternalBuilder() {
+          return builder;
+      }
+
+      public String getModID() {
+          return modId;
       }
    }
 
