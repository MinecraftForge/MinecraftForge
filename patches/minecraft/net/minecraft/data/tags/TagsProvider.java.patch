--- a/net/minecraft/data/tags/TagsProvider.java
+++ b/net/minecraft/data/tags/TagsProvider.java
@@ -32,15 +_,37 @@
    protected final CompletableFuture<HolderLookup.Provider> f_254646_;
    protected final ResourceKey<? extends Registry<T>> f_254716_;
    protected final Map<ResourceLocation, TagBuilder> f_126543_ = Maps.newLinkedHashMap();
+   protected final String modId;
+   @org.jetbrains.annotations.Nullable
+   protected final net.minecraftforge.common.data.ExistingFileHelper existingFileHelper;
+   private final net.minecraftforge.common.data.ExistingFileHelper.IResourceType resourceType;
+   private final net.minecraftforge.common.data.ExistingFileHelper.IResourceType elementResourceType; // FORGE: Resource type for validating required references to datapack registry elements.
 
+   /**
+    * @deprecated Forge: Use the {@linkplain #TagsProvider(PackOutput, ResourceKey, CompletableFuture, String, net.minecraftforge.common.data.ExistingFileHelper) mod id variant}
+    */
+   @Deprecated
    protected TagsProvider(PackOutput p_256596_, ResourceKey<? extends Registry<T>> p_255886_, CompletableFuture<HolderLookup.Provider> p_256513_) {
+      this(p_256596_, p_255886_, p_256513_, "vanilla", null);
+   }
+   protected TagsProvider(PackOutput p_256596_, ResourceKey<? extends Registry<T>> p_255886_, CompletableFuture<HolderLookup.Provider> p_256513_, String modId, @org.jetbrains.annotations.Nullable net.minecraftforge.common.data.ExistingFileHelper existingFileHelper) {
       this.f_236439_ = p_256596_.m_245269_(PackOutput.Target.DATA_PACK, TagManager.m_203918_(p_255886_));
       this.f_254646_ = p_256513_;
       this.f_254716_ = p_255886_;
+      this.modId = modId;
+      this.existingFileHelper = existingFileHelper;
+      this.resourceType = new net.minecraftforge.common.data.ExistingFileHelper.ResourceType(net.minecraft.server.packs.PackType.SERVER_DATA, ".json", TagManager.m_203918_(p_255886_));
+      this.elementResourceType = new net.minecraftforge.common.data.ExistingFileHelper.ResourceType(net.minecraft.server.packs.PackType.SERVER_DATA, ".json", net.minecraftforge.common.ForgeHooks.prefixNamespace(p_255886_.m_135782_()));
+   }
+
+   // Forge: Allow customizing the path for a given tag or returning null
+   @org.jetbrains.annotations.Nullable
+   protected Path getPath(ResourceLocation id) {
+      return this.f_236439_.m_245731_(id);
    }
 
    public String m_6055_() {
-      return "Tags for " + this.f_254716_.m_135782_();
+      return "Tags for " + this.f_254716_.m_135782_() + " mod id " + this.modId;
    }
 
    protected abstract void m_6577_(HolderLookup.Provider p_256380_);
@@ -49,7 +_,13 @@
       return this.f_254646_.thenCompose((p_255494_) -> {
          this.f_126543_.clear();
          this.m_6577_(p_255494_);
-         HolderLookup.RegistryLookup<T> registrylookup = p_255494_.m_255025_(this.f_254716_);
+         HolderLookup.RegistryLookup<T> registrylookup = p_255494_.m_254861_(this.f_254716_).orElseThrow(() -> {
+            // FORGE: Throw a more descriptive error message if this is a Forge registry without tags enabled
+            if (net.minecraftforge.registries.RegistryManager.ACTIVE.getRegistry(this.f_254716_) != null) {
+               return new IllegalStateException("Forge registry " + this.f_254716_.m_135782_() + " does not have support for tags");
+            }
+            return new IllegalStateException("Registry " + this.f_254716_.m_135782_() + " not found");
+         });
          Predicate<ResourceLocation> predicate = (p_255496_) -> {
             return registrylookup.m_254902_(ResourceKey.m_135785_(this.f_254716_, p_255496_)).isPresent();
          };
@@ -59,12 +_,13 @@
             List<TagEntry> list = tagbuilder.m_215904_();
             List<TagEntry> list1 = list.stream().filter((p_255492_) -> {
                return !p_255492_.m_215940_(predicate, this.f_126543_::containsKey);
-            }).toList();
+            }).filter(this::missing).toList(); // Forge: Add validation via existing resources
             if (!list1.isEmpty()) {
                throw new IllegalArgumentException(String.format(Locale.ROOT, "Couldn't define tag %s as it is missing following references: %s", resourcelocation, list1.stream().map(Objects::toString).collect(Collectors.joining(","))));
             } else {
                JsonElement jsonelement = TagFile.f_215958_.encodeStart(JsonOps.INSTANCE, new TagFile(list, false)).getOrThrow(false, f_126541_::error);
-               Path path = this.f_236439_.m_245731_(resourcelocation);
+               Path path = this.getPath(resourcelocation);
+               if (path == null) return CompletableFuture.completedFuture(null); // Forge: Allow running this data provider without writing it. Recipe provider needs valid tags.
                return DataProvider.m_253162_(p_253684_, jsonelement, path);
             }
          }).toArray((p_253442_) -> {
@@ -73,22 +_,34 @@
       });
    }
 
+   private boolean missing(TagEntry reference) {
+      // Optional tags should not be validated
+
+      if (reference.isRequired()) {
+         return existingFileHelper == null || !existingFileHelper.exists(reference.getId(), reference.isTag() ? resourceType : elementResourceType);
+      }
+      return false;
+   }
+
    protected TagsProvider.TagAppender<T> m_206424_(TagKey<T> p_206425_) {
       TagBuilder tagbuilder = this.m_236451_(p_206425_);
-      return new TagsProvider.TagAppender<>(tagbuilder);
+      return new TagsProvider.TagAppender<>(tagbuilder, modId);
    }
 
    protected TagBuilder m_236451_(TagKey<T> p_236452_) {
       return this.f_126543_.computeIfAbsent(p_236452_.f_203868_(), (p_236442_) -> {
+         existingFileHelper.trackGenerated(p_236442_, resourceType);
          return TagBuilder.m_215899_();
       });
    }
 
-   public static class TagAppender<T> {
+   public static class TagAppender<T> implements net.minecraftforge.common.extensions.IForgeTagAppender<T> {
       private final TagBuilder f_126568_;
+      private final String modId;
 
-      protected TagAppender(TagBuilder p_256426_) {
-         this.f_126568_ = p_256426_;
+      protected TagAppender(TagBuilder p_236454_, String modId) {
+         this.f_126568_ = p_236454_;
+         this.modId = modId;
       }
 
       public final TagsProvider.TagAppender<T> m_255204_(ResourceKey<T> p_256138_) {
@@ -118,6 +_,19 @@
       public TagsProvider.TagAppender<T> m_176841_(ResourceLocation p_176842_) {
          this.f_126568_.m_215909_(p_176842_);
          return this;
+      }
+
+      public TagsProvider.TagAppender<T> add(TagEntry tag) {
+          f_126568_.m_215902_(tag);
+          return this;
+      }
+
+      public TagBuilder getInternalBuilder() {
+          return f_126568_;
+      }
+
+      public String getModID() {
+          return modId;
       }
    }
 }
