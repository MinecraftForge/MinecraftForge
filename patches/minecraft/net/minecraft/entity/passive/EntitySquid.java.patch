--- ../src_base/minecraft/net/minecraft/entity/passive/EntitySquid.java
+++ ../src_work/minecraft/net/minecraft/entity/passive/EntitySquid.java
@@ -6,6 +6,7 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
+import org.bukkit.craftbukkit.TrigMath; // CraftBukkit
 
 public class EntitySquid extends EntityWaterMob
 {
@@ -13,8 +14,14 @@
     public float prevSquidPitch;
     public float squidYaw;
     public float prevSquidYaw;
-    public float field_70867_h;
-    public float field_70868_i;
+
+    /**
+     * appears to be rotation in radians; we already have pitch & yaw, so this completes the triumvirate.
+     */
+    public float squidRotation;
+
+    /** previous squidRotation in radians. */
+    public float prevSquidRotation;
 
     /** angle of the tentacles in radians */
     public float tentacleAngle;
@@ -22,7 +29,9 @@
     /** the last calculated angle of the tentacles in radians */
     public float prevTentacleAngle;
     private float randomMotionSpeed;
-    private float field_70864_bA;
+
+    /** change in squidRotation in radians. */
+    private float rotationVelocity;
     private float field_70871_bB;
     private float randomMotionVecX;
     private float randomMotionVecY;
@@ -32,13 +41,13 @@
     {
         super(par1World);
         this.setSize(0.95F, 0.95F);
-        this.field_70864_bA = 1.0F / (this.rand.nextFloat() + 1.0F) * 0.2F;
-    }
-
-    protected void func_110147_ax()
-    {
-        super.func_110147_ax();
-        this.func_110148_a(SharedMonsterAttributes.field_111267_a).func_111128_a(10.0D);
+        this.rotationVelocity = 1.0F / (this.rand.nextFloat() + 1.0F) * 0.2F;
+    }
+
+    protected void applyEntityAttributes()
+    {
+        super.applyEntityAttributes();
+        this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setAttribute(10.0D);
     }
 
     /**
@@ -96,22 +105,29 @@
      */
     protected void dropFewItems(boolean par1, int par2)
     {
-        int j = this.rand.nextInt(3 + par2) + 1;
-
-        for (int k = 0; k < j; ++k)
-        {
-            this.entityDropItem(new ItemStack(Item.dyePowder, 1, 0), 0.0F);
-        }
+        // CraftBukkit start - Whole method
+        java.util.List<org.bukkit.inventory.ItemStack> loot = new java.util.ArrayList<org.bukkit.inventory.ItemStack>();
+        int count = this.rand.nextInt(3 + par2) + 1;
+
+        if (count > 0)
+        {
+            loot.add(new org.bukkit.inventory.ItemStack(org.bukkit.Material.INK_SACK, count));
+        }
+
+        org.bukkit.craftbukkit.event.CraftEventFactory.callEntityDeathEvent(this, loot);
+        // CraftBukkit end
     }
 
     /**
      * Checks if this entity is inside water (if inWater field is true as a result of handleWaterMovement() returning
      * true)
      */
+    /* CraftBukkit start - Delegate to Entity to use existing inWater value
     public boolean isInWater()
     {
-        return this.worldObj.handleMaterialAcceleration(this.boundingBox.expand(0.0D, -0.6000000238418579D, 0.0D), Material.water, this);
-    }
+        return this.worldObj.handleMaterialAcceleration(this.boundingBox.expand(0.0D, -0.6000000238418579D, 0.0D), Material.water, (Entity) this);
+    }
+    // CraftBukkit end */
 
     /**
      * Called frequently so the entity can update its state every tick as required. For example, zombies and skeletons
@@ -122,17 +138,17 @@
         super.onLivingUpdate();
         this.prevSquidPitch = this.squidPitch;
         this.prevSquidYaw = this.squidYaw;
-        this.field_70868_i = this.field_70867_h;
+        this.prevSquidRotation = this.squidRotation;
         this.prevTentacleAngle = this.tentacleAngle;
-        this.field_70867_h += this.field_70864_bA;
-
-        if (this.field_70867_h > ((float)Math.PI * 2F))
-        {
-            this.field_70867_h -= ((float)Math.PI * 2F);
+        this.squidRotation += this.rotationVelocity;
+
+        if (this.squidRotation > ((float)Math.PI * 2F))
+        {
+            this.squidRotation -= ((float)Math.PI * 2F);
 
             if (this.rand.nextInt(10) == 0)
             {
-                this.field_70864_bA = 1.0F / (this.rand.nextFloat() + 1.0F) * 0.2F;
+                this.rotationVelocity = 1.0F / (this.rand.nextFloat() + 1.0F) * 0.2F;
             }
         }
 
@@ -140,9 +156,9 @@
         {
             float f;
 
-            if (this.field_70867_h < (float)Math.PI)
-            {
-                f = this.field_70867_h / (float)Math.PI;
+            if (this.squidRotation < (float)Math.PI)
+            {
+                f = this.squidRotation / (float)Math.PI;
                 this.tentacleAngle = MathHelper.sin(f * f * (float)Math.PI) * (float)Math.PI * 0.25F;
 
                 if ((double)f > 0.75D)
@@ -170,14 +186,16 @@
             }
 
             f = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-            this.renderYawOffset += (-((float)Math.atan2(this.motionX, this.motionZ)) * 180.0F / (float)Math.PI - this.renderYawOffset) * 0.1F;
+            // CraftBukkit - Math -> TrigMath
+            this.renderYawOffset += (-((float) TrigMath.atan2(this.motionX, this.motionZ)) * 180.0F / (float)Math.PI - this.renderYawOffset) * 0.1F;
             this.rotationYaw = this.renderYawOffset;
             this.squidYaw += (float)Math.PI * this.field_70871_bB * 1.5F;
-            this.squidPitch += (-((float)Math.atan2((double)f, this.motionY)) * 180.0F / (float)Math.PI - this.squidPitch) * 0.1F;
+            // CraftBukkit - Math -> TrigMath
+            this.squidPitch += (-((float) TrigMath.atan2((double) f, this.motionY)) * 180.0F / (float)Math.PI - this.squidPitch) * 0.1F;
         }
         else
         {
-            this.tentacleAngle = MathHelper.abs(MathHelper.sin(this.field_70867_h)) * (float)Math.PI * 0.25F;
+            this.tentacleAngle = MathHelper.abs(MathHelper.sin(this.squidRotation)) * (float)Math.PI * 0.25F;
 
             if (!this.worldObj.isRemote)
             {
