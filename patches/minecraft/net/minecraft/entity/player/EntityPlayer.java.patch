--- ../src-base/minecraft/net/minecraft/entity/player/EntityPlayer.java
+++ ../src-work/minecraft/net/minecraft/entity/player/EntityPlayer.java
@@ -8,9 +8,12 @@
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
 import java.util.Collection;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.UUID;
+import java.util.Map.Entry;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockBed;
 import net.minecraft.block.material.Material;
@@ -77,8 +80,24 @@
 import net.minecraft.world.WorldSettings;
 import net.minecraft.world.chunk.IChunkProvider;
 
+import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.common.ISpecialArmor.ArmorProperties;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.ForgeEventFactory;
+import net.minecraftforge.event.entity.living.LivingHurtEvent;
+import net.minecraftforge.event.entity.player.AttackEntityEvent;
+import net.minecraftforge.event.entity.player.EntityInteractEvent;
+import net.minecraftforge.event.entity.player.PlayerDestroyItemEvent;
+import net.minecraftforge.event.entity.player.PlayerDropsEvent;
+import net.minecraftforge.event.entity.player.PlayerFlyableFallEvent;
+import net.minecraftforge.event.entity.player.PlayerSleepInBedEvent;
+
 public abstract class EntityPlayer extends EntityLivingBase implements ICommandSender
 {
+    public static final String PERSISTED_NBT_TAG = "PlayerPersisted";
+    private HashMap<Integer, ChunkCoordinates> spawnChunkMap = new HashMap<Integer, ChunkCoordinates>();
+    private HashMap<Integer, Boolean> spawnForcedMap = new HashMap<Integer, Boolean>();
+
     public InventoryPlayer field_71071_by = new InventoryPlayer(this);
     private InventoryEnderChest field_71078_a = new InventoryEnderChest();
     public Container field_71069_bz;
@@ -129,6 +148,7 @@
         this.func_70012_b((double)chunkcoordinates.field_71574_a + 0.5D, (double)(chunkcoordinates.field_71572_b + 1), (double)chunkcoordinates.field_71573_c + 0.5D, 0.0F, 0.0F);
         this.field_70741_aB = 180.0F;
         this.field_70174_ab = 20;
+        this.eyeHeight = this.getDefaultEyeHeight();
     }
 
     protected void func_110147_ax()
@@ -172,7 +192,8 @@
     {
         if (this.field_71074_e != null)
         {
-            this.field_71074_e.func_77974_b(this.field_70170_p, this, this.field_71072_f);
+            if (!ForgeEventFactory.onUseItemStop(this, field_71074_e, field_71072_f))
+                this.field_71074_e.func_77974_b(this.field_70170_p, this, this.field_71072_f);
         }
 
         this.func_71041_bz();
@@ -203,14 +224,23 @@
 
             if (itemstack == this.field_71074_e)
             {
-                if (this.field_71072_f <= 25 && this.field_71072_f % 4 == 0)
+                field_71072_f = ForgeEventFactory.onItemUseTick(this, field_71074_e, field_71072_f);
+                if (field_71072_f <= 0)
                 {
-                    this.func_71010_c(itemstack, 5);
+                    this.func_71036_o();
                 }
-
-                if (--this.field_71072_f == 0 && !this.field_70170_p.field_72995_K)
+                else
                 {
-                    this.func_71036_o();
+                    field_71074_e.func_77973_b().onUsingTick(field_71074_e, this, field_71072_f);
+                    if (this.field_71072_f <= 25 && this.field_71072_f % 4 == 0)
+                    {
+                        this.func_71010_c(itemstack, 5);
+                    }
+    
+                    if (--this.field_71072_f == 0 && !this.field_70170_p.field_72995_K)
+                    {
+                        this.func_71036_o();
+                    }
                 }
             }
             else
@@ -257,7 +287,7 @@
 
         super.func_70071_h_();
 
-        if (!this.field_70170_p.field_72995_K && this.field_71070_bA != null && !this.field_71070_bA.func_75145_c(this))
+        if (!this.field_70170_p.field_72995_K && this.field_71070_bA != null && !ForgeHooks.canInteractWith(this, this.field_71070_bA))
         {
             this.func_71053_j();
             this.field_71070_bA = this.field_71069_bz;
@@ -388,11 +418,13 @@
             int i = this.field_71074_e.field_77994_a;
             ItemStack itemstack = this.field_71074_e.func_77950_b(this.field_70170_p, this);
 
+            itemstack = ForgeEventFactory.onItemUseFinish(this, field_71074_e, field_71072_f, itemstack);
+
             if (itemstack != this.field_71074_e || itemstack != null && itemstack.field_77994_a != i)
             {
                 this.field_71071_by.field_70462_a[this.field_71071_by.field_70461_c] = itemstack;
 
-                if (itemstack.field_77994_a == 0)
+                if (itemstack != null && itemstack.field_77994_a == 0)
                 {
                     this.field_71071_by.field_70462_a[this.field_71071_by.field_70461_c] = null;
                 }
@@ -466,11 +498,11 @@
             this.field_71109_bG = 0.0F;
             this.func_71015_k(this.field_70165_t - d0, this.field_70163_u - d1, this.field_70161_v - d2);
 
-            if (this.field_70154_o instanceof EntityPig)
+            if (this.field_70154_o instanceof EntityLivingBase && ((EntityLivingBase)field_70154_o).shouldRiderFaceForward(this))
             {
                 this.field_70125_A = f1;
                 this.field_70177_z = f;
-                this.field_70761_aq = ((EntityPig)this.field_70154_o).field_70761_aq;
+                this.field_70761_aq = ((EntityLivingBase)this.field_70154_o).field_70761_aq;
             }
         }
     }
@@ -595,11 +627,15 @@
 
     public void func_70645_a(DamageSource p_70645_1_)
     {
+        if (ForgeHooks.onLivingDeath(this, p_70645_1_)) return;
         super.func_70645_a(p_70645_1_);
         this.func_70105_a(0.2F, 0.2F);
         this.func_70107_b(this.field_70165_t, this.field_70163_u, this.field_70161_v);
         this.field_70181_x = 0.10000000149011612D;
 
+        captureDrops = true;
+        capturedDrops.clear();
+
         if (this.func_70005_c_().equals("Notch"))
         {
             this.func_146097_a(new ItemStack(Items.field_151034_e, 1), true, false);
@@ -610,6 +646,20 @@
             this.field_71071_by.func_70436_m();
         }
 
+        captureDrops = false;
+
+        if (!field_70170_p.field_72995_K)
+        {
+            PlayerDropsEvent event = new PlayerDropsEvent(this, p_70645_1_, capturedDrops, field_70718_bc > 0);
+            if (!MinecraftForge.EVENT_BUS.post(event))
+            {
+                for (EntityItem item : capturedDrops)
+                {
+                    func_71012_a(item);
+                }
+            }
+        }
+
         if (p_70645_1_ != null)
         {
             this.field_70159_w = (double)(-MathHelper.func_76134_b((this.field_70739_aP + this.field_70177_z) * (float)Math.PI / 180.0F) * 0.1F);
@@ -661,12 +711,25 @@
 
     public EntityItem func_71040_bB(boolean p_71040_1_)
     {
-        return this.func_146097_a(this.field_71071_by.func_70298_a(this.field_71071_by.field_70461_c, p_71040_1_ && this.field_71071_by.func_70448_g() != null ? this.field_71071_by.func_70448_g().field_77994_a : 1), false, true);
+        ItemStack stack = field_71071_by.func_70448_g();
+
+        if (stack == null)
+        {
+            return null;
+        }
+
+        if (stack.func_77973_b().onDroppedByPlayer(stack, this))
+        {
+            int count = p_71040_1_ && this.field_71071_by.func_70448_g() != null ? this.field_71071_by.func_70448_g().field_77994_a : 1;
+            return ForgeHooks.onPlayerTossEvent(this, field_71071_by.func_70298_a(field_71071_by.field_70461_c, count), true);
+        }
+
+        return null;
     }
 
     public EntityItem func_71019_a(ItemStack p_71019_1_, boolean p_71019_2_)
     {
-        return this.func_146097_a(p_71019_1_, false, false);
+        return ForgeHooks.onPlayerTossEvent(this, p_71019_1_, false);
     }
 
     public EntityItem func_146097_a(ItemStack p_146097_1_, boolean p_146097_2_, boolean p_146097_3_)
@@ -722,13 +785,31 @@
 
     public void func_71012_a(EntityItem p_71012_1_)
     {
+        if (captureDrops)
+        {
+            capturedDrops.add(p_71012_1_);
+            return;
+        }
         this.field_70170_p.func_72838_d(p_71012_1_);
     }
 
+    @Deprecated //Metadata sensitive version, named getBreakSpeed
     public float func_146096_a(Block p_146096_1_, boolean p_146096_2_)
     {
-        float f = this.field_71071_by.func_146023_a(p_146096_1_);
+        return getBreakSpeed(p_146096_1_, p_146096_2_, 0, 0, -1, 0);
+    }
 
+    @Deprecated //Location Specifc, one below, remove in 1.8
+    public float getBreakSpeed(Block p_146096_1_, boolean p_146096_2_, int meta)
+    {
+        return getBreakSpeed(p_146096_1_, p_146096_2_, meta, 0, -1, 0);
+    }
+
+    public float getBreakSpeed(Block p_146096_1_, boolean p_146096_2_, int meta, int x, int y, int z)
+    {
+        ItemStack stack = field_71071_by.func_70448_g();
+        float f = (stack == null ? 1.0F : stack.func_77973_b().getDigSpeed(stack, p_146096_1_, meta));
+
         if (f > 1.0F)
         {
             int i = EnchantmentHelper.func_77509_b(this);
@@ -738,7 +819,9 @@
             {
                 float f1 = (float)(i * i + 1);
 
-                if (!itemstack.func_150998_b(p_146096_1_) && f <= 1.0F)
+                boolean canHarvest = ForgeHooks.canToolHarvestBlock(p_146096_1_, meta, itemstack);
+
+                if (!canHarvest && f <= 1.0F)
                 {
                     f += f1 * 0.08F;
                 }
@@ -769,12 +852,13 @@
             f /= 5.0F;
         }
 
-        return f;
+        f = ForgeEventFactory.getBreakSpeed(this, p_146096_1_, meta, f, x, y, z);
+        return (f < 0 ? 0 : f);
     }
 
     public boolean func_146099_a(Block p_146099_1_)
     {
-        return this.field_71071_by.func_146025_b(p_146099_1_);
+        return ForgeEventFactory.doPlayerHarvestCheck(this, p_146099_1_, this.field_71071_by.func_146025_b(p_146099_1_));
     }
 
     public void func_70037_a(NBTTagCompound p_70037_1_)
@@ -803,6 +887,16 @@
             this.field_82248_d = p_70037_1_.func_74767_n("SpawnForced");
         }
 
+        NBTTagList spawnlist = null;
+        spawnlist = p_70037_1_.func_150295_c("Spawns", 10);
+        for (int i = 0; i < spawnlist.func_74745_c(); i++)
+        {
+            NBTTagCompound spawndata = (NBTTagCompound)spawnlist.func_150305_b(i);
+            int spawndim = spawndata.func_74762_e("Dim");
+            this.spawnChunkMap.put(spawndim, new ChunkCoordinates(spawndata.func_74762_e("SpawnX"), spawndata.func_74762_e("SpawnY"), spawndata.func_74762_e("SpawnZ")));
+            this.spawnForcedMap.put(spawndim, spawndata.func_74767_n("SpawnForced"));
+        }
+
         this.field_71100_bB.func_75112_a(p_70037_1_);
         this.field_71075_bZ.func_75095_b(p_70037_1_);
 
@@ -833,6 +927,23 @@
             p_70014_1_.func_74757_a("SpawnForced", this.field_82248_d);
         }
 
+        NBTTagList spawnlist = new NBTTagList();
+        for (Entry<Integer, ChunkCoordinates> entry : this.spawnChunkMap.entrySet())
+        {
+            ChunkCoordinates spawn = entry.getValue();
+            if (spawn == null) continue;
+            Boolean forced = spawnForcedMap.get(entry.getKey());
+            if (forced == null) forced = false;
+            NBTTagCompound spawndata = new NBTTagCompound();
+            spawndata.func_74768_a("Dim", entry.getKey());
+            spawndata.func_74768_a("SpawnX", spawn.field_71574_a);
+            spawndata.func_74768_a("SpawnY", spawn.field_71572_b);
+            spawndata.func_74768_a("SpawnZ", spawn.field_71573_c);
+            spawndata.func_74757_a("SpawnForced", forced);
+            spawnlist.func_74742_a(spawndata);
+        }
+        p_70014_1_.func_74782_a("Spawns", spawnlist);
+
         this.field_71100_bB.func_75117_b(p_70014_1_);
         this.field_71075_bZ.func_75091_a(p_70014_1_);
         p_70014_1_.func_74782_a("EnderItems", this.field_71078_a.func_70487_g());
@@ -854,7 +965,7 @@
 
     public float func_70047_e()
     {
-        return 0.12F;
+        return eyeHeight;
     }
 
     protected void func_71061_d_()
@@ -864,6 +975,7 @@
 
     public boolean func_70097_a(DamageSource p_70097_1_, float p_70097_2_)
     {
+        if (ForgeHooks.onLivingAttack(this, p_70097_1_, p_70097_2_)) return false;
         if (this.func_85032_ar())
         {
             return false;
@@ -965,12 +1077,15 @@
     {
         if (!this.func_85032_ar())
         {
+            p_70665_2_ = ForgeHooks.onLivingHurt(this, p_70665_1_, p_70665_2_);
+            if (p_70665_2_ <= 0) return;
             if (!p_70665_1_.func_76363_c() && this.func_70632_aY() && p_70665_2_ > 0.0F)
             {
                 p_70665_2_ = (1.0F + p_70665_2_) * 0.5F;
             }
 
-            p_70665_2_ = this.func_70655_b(p_70665_1_, p_70665_2_);
+            p_70665_2_ = ArmorProperties.ApplyArmor(this, field_71071_by.field_70460_b, p_70665_1_, p_70665_2_);
+            if (p_70665_2_ <= 0) return;
             p_70665_2_ = this.func_70672_c(p_70665_1_, p_70665_2_);
             float f1 = p_70665_2_;
             p_70665_2_ = Math.max(p_70665_2_ - this.func_110139_bj(), 0.0F);
@@ -1004,6 +1119,7 @@
 
     public boolean func_70998_m(Entity p_70998_1_)
     {
+        if (MinecraftForge.EVENT_BUS.post(new EntityInteractEvent(this, p_70998_1_))) return false;
         ItemStack itemstack = this.func_71045_bC();
         ItemStack itemstack1 = itemstack != null ? itemstack.func_77946_l() : null;
 
@@ -1054,7 +1170,9 @@
 
     public void func_71028_bD()
     {
+        ItemStack orig = func_71045_bC();
         this.field_71071_by.func_70299_a(this.field_71071_by.field_70461_c, (ItemStack)null);
+        MinecraftForge.EVENT_BUS.post(new PlayerDestroyItemEvent(this, orig));
     }
 
     public double func_70033_W()
@@ -1064,6 +1182,15 @@
 
     public void func_71059_n(Entity p_71059_1_)
     {
+        if (MinecraftForge.EVENT_BUS.post(new AttackEntityEvent(this, p_71059_1_)))
+        {
+            return;
+        }
+        ItemStack stack = func_71045_bC();
+        if (stack != null && stack.func_77973_b().onLeftClickEntity(stack, this, p_71059_1_))
+        {
+            return;
+        }
         if (p_71059_1_.func_70075_an())
         {
             if (!p_71059_1_.func_85031_j(this))
@@ -1211,6 +1338,12 @@
 
     public EntityPlayer.EnumStatus func_71018_a(int p_71018_1_, int p_71018_2_, int p_71018_3_)
     {
+        PlayerSleepInBedEvent event = new PlayerSleepInBedEvent(this, p_71018_1_, p_71018_2_, p_71018_3_);
+        MinecraftForge.EVENT_BUS.post(event);
+        if (event.result != null)
+        {
+            return event.result;
+        }
         if (!this.field_70170_p.field_72995_K)
         {
             if (this.func_70608_bn() || !this.func_70089_S())
@@ -1253,8 +1386,7 @@
 
         if (this.field_70170_p.func_72899_e(p_71018_1_, p_71018_2_, p_71018_3_))
         {
-            int i1 = this.field_70170_p.func_72805_g(p_71018_1_, p_71018_2_, p_71018_3_);
-            int l = BlockBed.func_149895_l(i1);
+            int l = field_70170_p.func_147439_a(p_71018_1_, p_71018_2_, p_71018_3_).getBedDirection(field_70170_p, p_71018_1_, p_71018_2_, p_71018_3_);
             float f1 = 0.5F;
             float f = 0.5F;
 
@@ -1321,11 +1453,12 @@
         this.func_71061_d_();
         ChunkCoordinates chunkcoordinates = this.field_71081_bT;
         ChunkCoordinates chunkcoordinates1 = this.field_71081_bT;
+        Block block = (chunkcoordinates == null ? null : field_70170_p.func_147439_a(chunkcoordinates.field_71574_a, chunkcoordinates.field_71572_b, chunkcoordinates.field_71573_c));
 
-        if (chunkcoordinates != null && this.field_70170_p.func_147439_a(chunkcoordinates.field_71574_a, chunkcoordinates.field_71572_b, chunkcoordinates.field_71573_c) == Blocks.field_150324_C)
+        if (chunkcoordinates != null && block.isBed(field_70170_p, chunkcoordinates.field_71574_a, chunkcoordinates.field_71572_b, chunkcoordinates.field_71573_c, this))
         {
-            BlockBed.func_149979_a(this.field_70170_p, chunkcoordinates.field_71574_a, chunkcoordinates.field_71572_b, chunkcoordinates.field_71573_c, false);
-            chunkcoordinates1 = BlockBed.func_149977_a(this.field_70170_p, chunkcoordinates.field_71574_a, chunkcoordinates.field_71572_b, chunkcoordinates.field_71573_c, 0);
+            block.setBedOccupied(this.field_70170_p, chunkcoordinates.field_71574_a, chunkcoordinates.field_71572_b, chunkcoordinates.field_71573_c, this, false);
+            chunkcoordinates1 = block.getBedSpawnPosition(this.field_70170_p, chunkcoordinates.field_71574_a, chunkcoordinates.field_71572_b, chunkcoordinates.field_71573_c, this);
 
             if (chunkcoordinates1 == null)
             {
@@ -1359,7 +1492,7 @@
 
     private boolean func_71065_l()
     {
-        return this.field_70170_p.func_147439_a(this.field_71081_bT.field_71574_a, this.field_71081_bT.field_71572_b, this.field_71081_bT.field_71573_c) == Blocks.field_150324_C;
+        return this.field_70170_p.func_147439_a(this.field_71081_bT.field_71574_a, this.field_71081_bT.field_71572_b, this.field_71081_bT.field_71573_c).isBed(field_70170_p, field_71081_bT.field_71574_a, field_71081_bT.field_71572_b, field_71081_bT.field_71573_c, this);
     }
 
     public static ChunkCoordinates func_71056_a(World p_71056_0_, ChunkCoordinates p_71056_1_, boolean p_71056_2_)
@@ -1370,9 +1503,9 @@
         ichunkprovider.func_73158_c(p_71056_1_.field_71574_a - 3 >> 4, p_71056_1_.field_71573_c + 3 >> 4);
         ichunkprovider.func_73158_c(p_71056_1_.field_71574_a + 3 >> 4, p_71056_1_.field_71573_c + 3 >> 4);
 
-        if (p_71056_0_.func_147439_a(p_71056_1_.field_71574_a, p_71056_1_.field_71572_b, p_71056_1_.field_71573_c) == Blocks.field_150324_C)
+        if (p_71056_0_.func_147439_a(p_71056_1_.field_71574_a, p_71056_1_.field_71572_b, p_71056_1_.field_71573_c).isBed(p_71056_0_, p_71056_1_.field_71574_a, p_71056_1_.field_71572_b, p_71056_1_.field_71573_c, null))
         {
-            ChunkCoordinates chunkcoordinates1 = BlockBed.func_149977_a(p_71056_0_, p_71056_1_.field_71574_a, p_71056_1_.field_71572_b, p_71056_1_.field_71573_c, 0);
+            ChunkCoordinates chunkcoordinates1 = p_71056_0_.func_147439_a(p_71056_1_.field_71574_a, p_71056_1_.field_71572_b, p_71056_1_.field_71573_c).getBedSpawnPosition(p_71056_0_, p_71056_1_.field_71574_a, p_71056_1_.field_71572_b, p_71056_1_.field_71573_c, null);
             return chunkcoordinates1;
         }
         else
@@ -1390,8 +1523,10 @@
     {
         if (this.field_71081_bT != null)
         {
-            int i = this.field_70170_p.func_72805_g(this.field_71081_bT.field_71574_a, this.field_71081_bT.field_71572_b, this.field_71081_bT.field_71573_c);
-            int j = BlockBed.func_149895_l(i);
+            int x = field_71081_bT.field_71574_a;
+            int y = field_71081_bT.field_71572_b;
+            int z = field_71081_bT.field_71573_c;
+            int j = field_70170_p.func_147439_a(x, y, z).getBedDirection(field_70170_p, x, y, z);
 
             switch (j)
             {
@@ -1447,18 +1582,25 @@
 
     public void func_146105_b(IChatComponent p_146105_1_) {}
 
+    @Deprecated
     public ChunkCoordinates func_70997_bJ()
     {
-        return this.field_71077_c;
+        return getBedLocation(this.field_71093_bK);
     }
 
+    @Deprecated
     public boolean func_82245_bX()
     {
-        return this.field_82248_d;
+        return isSpawnForced(this.field_71093_bK);
     }
 
     public void func_71063_a(ChunkCoordinates p_71063_1_, boolean p_71063_2_)
     {
+        if (this.field_71093_bK != 0)
+        {
+            setSpawnChunk(p_71063_1_, p_71063_2_, this.field_71093_bK);
+            return;
+        }
         if (p_71063_1_ != null)
         {
             this.field_71077_c = new ChunkCoordinates(p_71063_1_);
@@ -1632,6 +1774,10 @@
 
             super.func_70069_a(p_70069_1_);
         }
+        else
+        {
+            MinecraftForge.EVENT_BUS.post(new PlayerFlyableFallEvent(this, p_70069_1_));
+        }
     }
 
     protected String func_146067_o(int p_146067_1_)
@@ -1674,11 +1820,6 @@
         }
         else
         {
-            if (p_70620_1_.func_77973_b().func_77623_v())
-            {
-                return p_70620_1_.func_77973_b().func_77618_c(p_70620_1_.func_77960_j(), p_70620_2_);
-            }
-
             if (this.field_71074_e != null && p_70620_1_.func_77973_b() == Items.field_151031_f)
             {
                 int j = p_70620_1_.func_77988_m() - this.field_71072_f;
@@ -1698,6 +1839,7 @@
                     return Items.field_151031_f.func_94599_c(0);
                 }
             }
+            iicon = p_70620_1_.func_77973_b().getIcon(p_70620_1_, p_70620_2_, this, field_71074_e, field_71072_f);
         }
 
         return iicon;
@@ -1781,6 +1923,8 @@
     {
         if (p_71008_1_ != this.field_71074_e)
         {
+            p_71008_2_ = ForgeEventFactory.onItemUseStart(this, p_71008_1_, p_71008_2_);
+            if (p_71008_2_ <= 0) return;
             this.field_71074_e = p_71008_1_;
             this.field_71072_f = p_71008_2_;
 
@@ -1864,6 +2008,10 @@
             this.field_71106_cc = p_71049_1_.field_71106_cc;
             this.func_85040_s(p_71049_1_.func_71037_bA());
             this.field_82152_aq = p_71049_1_.field_82152_aq;
+            //Copy and re-init ExtendedProperties when switching dimensions.
+            this.extendedProperties = p_71049_1_.extendedProperties;
+            for (net.minecraftforge.common.IExtendedEntityProperties p : this.extendedProperties.values())
+                p.init(this, this.field_70170_p);
         }
         else if (this.field_70170_p.func_82736_K().func_82766_b("keepInventory"))
         {
@@ -1875,6 +2023,18 @@
         }
 
         this.field_71078_a = p_71049_1_.field_71078_a;
+
+        this.spawnChunkMap = p_71049_1_.spawnChunkMap;
+        this.spawnForcedMap = p_71049_1_.spawnForcedMap;
+
+        //Copy over a section of the Entity Data from the old player.
+        //Allows mods to specify data that persists after players respawn.
+        NBTTagCompound old = p_71049_1_.getEntityData();
+        if (old.func_74764_b(PERSISTED_NBT_TAG))
+        {
+            getEntityData().func_74782_a(PERSISTED_NBT_TAG, old.func_74775_l(PERSISTED_NBT_TAG));
+        }
+        MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.player.PlayerEvent.Clone(this, p_71049_1_, !p_71049_2_));
     }
 
     protected boolean func_70041_e_()
@@ -1913,7 +2073,14 @@
 
     public void func_70062_b(int p_70062_1_, ItemStack p_70062_2_)
     {
-        this.field_71071_by.field_70460_b[p_70062_1_] = p_70062_2_;
+        if (p_70062_1_ == 0)
+        {
+            this.field_71071_by.field_70462_a[this.field_71071_by.field_70461_c] = p_70062_2_;
+        }
+        else
+        {
+            this.field_71071_by.field_70460_b[p_70062_1_ - 1] = p_70062_2_;
+        }
     }
 
     @SideOnly(Side.CLIENT)
@@ -1958,7 +2125,7 @@
 
     public IChatComponent func_145748_c_()
     {
-        ChatComponentText chatcomponenttext = new ChatComponentText(ScorePlayerTeam.func_96667_a(this.func_96124_cp(), this.func_70005_c_()));
+        ChatComponentText chatcomponenttext = new ChatComponentText(ScorePlayerTeam.func_96667_a(this.func_96124_cp(), this.getDisplayName()));
         chatcomponenttext.func_150256_b().func_150241_a(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/msg " + this.func_70005_c_() + " "));
         return chatcomponenttext;
     }
@@ -2041,6 +2208,118 @@
         FMLNetworkHandler.openGui(this, mod, modGuiId, world, x, y, z);
     }
 
+    /* ======================================== FORGE START =====================================*/
+    @SideOnly(Side.CLIENT)
+    @Override
+    public Vec3 func_70666_h(float par1)
+    {
+        if (par1 == 1.0F)
+        {
+            return Vec3.func_72443_a(this.field_70165_t, this.field_70163_u + (this.func_70047_e() - this.getDefaultEyeHeight()), this.field_70161_v);
+        }
+        else
+        {
+            double d0 = this.field_70169_q + (this.field_70165_t - this.field_70169_q) * (double)par1;
+            double d1 = this.field_70167_r + (this.field_70163_u - this.field_70167_r) * (double)par1 + (this.func_70047_e() - this.getDefaultEyeHeight());
+            double d2 = this.field_70166_s + (this.field_70161_v - this.field_70166_s) * (double)par1;
+            return Vec3.func_72443_a(d0, d1, d2);
+        }
+    }
+
+    /**
+     * A dimension aware version of getBedLocation.
+     * @param dimension The dimension to get the bed spawn for
+     * @return The player specific spawn location for the dimension.  May be null.
+     */
+    public ChunkCoordinates getBedLocation(int dimension)
+    {
+        return dimension == 0 ? field_71077_c : spawnChunkMap.get(dimension);
+    }
+
+    /**
+     * A dimension aware version of isSpawnForced.
+     * Noramally isSpawnForced is used to determine if the respawn system should check for a bed or not.
+     * This just extends that to be dimension aware.
+     * @param dimension The dimension to get whether to check for a bed before spawning for
+     * @return The player specific spawn location for the dimension.  May be null.
+     */
+    public boolean isSpawnForced(int dimension)
+    {
+        if (dimension == 0) return this.field_82248_d;
+        Boolean forced = this.spawnForcedMap.get(dimension);
+        return forced == null ? false : forced;
+    }
+
+    /**
+     * A dimension aware version of setSpawnChunk.
+     * This functions identically, but allows you to specify which dimension to affect, rather than affecting the player's current dimension.
+     * @param chunkCoordinates The spawn point to set as the player-specific spawn point for the dimension
+     * @param forced Whether or not the respawn code should check for a bed at this location (true means it won't check for a bed)
+     * @param dimension Which dimension to apply the player-specific respawn point to
+     */
+    public void setSpawnChunk(ChunkCoordinates chunkCoordinates, boolean forced, int dimension)
+    {
+        if (dimension == 0)
+        {
+            if (chunkCoordinates != null)
+            {
+                field_71077_c = new ChunkCoordinates(chunkCoordinates);
+                field_82248_d = forced;
+            }
+            else
+            {
+                field_71077_c = null;
+                field_82248_d = false;
+            }
+            return;
+        }
+
+        if (chunkCoordinates != null)
+        {
+            spawnChunkMap.put(dimension, new ChunkCoordinates(chunkCoordinates));
+            spawnForcedMap.put(dimension, forced);
+        }
+        else
+        {
+            spawnChunkMap.remove(dimension);
+            spawnForcedMap.remove(dimension);
+        }
+    }
+
+    public float eyeHeight;
+    private String displayname;
+    
+    /**
+     * Returns the default eye height of the player
+     * @return player default eye height
+     */
+    public float getDefaultEyeHeight()
+    {
+        return 0.12F;
+    }
+
+    /**
+     * Get the currently computed display name, cached for efficiency.
+     * @return the current display name
+     */
+    public String getDisplayName()
+    {
+        if(this.displayname == null)
+        {
+            this.displayname = ForgeEventFactory.getPlayerDisplayName(this, this.func_70005_c_());
+        }
+        return this.displayname;
+    }
+
+    /**
+     * Force the displayed name to refresh
+     */
+    public void refreshDisplayName()
+    {
+        this.displayname = ForgeEventFactory.getPlayerDisplayName(this, this.func_70005_c_());
+    }
+    /* ======================================== FORGE END  =====================================*/
+
     public static enum EnumStatus
     {
         OK,
