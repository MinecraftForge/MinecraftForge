--- ../src-base/minecraft/net/minecraft/entity/player/EntityPlayer.java
+++ ../src-work/minecraft/net/minecraft/entity/player/EntityPlayer.java
@@ -8,9 +8,12 @@
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
 import java.util.Collection;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.UUID;
+import java.util.Map.Entry;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockBed;
 import net.minecraft.block.material.Material;
@@ -78,8 +81,24 @@
 import net.minecraft.world.WorldSettings;
 import net.minecraft.world.chunk.IChunkProvider;
 
+import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.common.ISpecialArmor.ArmorProperties;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.ForgeEventFactory;
+import net.minecraftforge.event.entity.living.LivingHurtEvent;
+import net.minecraftforge.event.entity.player.AttackEntityEvent;
+import net.minecraftforge.event.entity.player.EntityInteractEvent;
+import net.minecraftforge.event.entity.player.PlayerDestroyItemEvent;
+import net.minecraftforge.event.entity.player.PlayerDropsEvent;
+import net.minecraftforge.event.entity.player.PlayerFlyableFallEvent;
+import net.minecraftforge.event.entity.player.PlayerSleepInBedEvent;
+
 public abstract class EntityPlayer extends EntityLivingBase implements ICommandSender
 {
+    public static final String PERSISTED_NBT_TAG = "PlayerPersisted";
+    private HashMap<Integer, ChunkCoordinates> spawnChunkMap = new HashMap<Integer, ChunkCoordinates>();
+    private HashMap<Integer, Boolean> spawnForcedMap = new HashMap<Integer, Boolean>();
+
     // JAVADOC FIELD $$ field_71071_by
     public InventoryPlayer inventory = new InventoryPlayer(this);
     private InventoryEnderChest theInventoryEnderChest = new InventoryEnderChest();
@@ -148,6 +167,7 @@
         this.setLocationAndAngles((double)chunkcoordinates.posX + 0.5D, (double)(chunkcoordinates.posY + 1), (double)chunkcoordinates.posZ + 0.5D, 0.0F, 0.0F);
         this.field_70741_aB = 180.0F;
         this.fireResistance = 20;
+        this.eyeHeight = this.getDefaultEyeHeight();
     }
 
     protected void applyEntityAttributes()
@@ -227,6 +247,7 @@
 
             if (itemstack == this.itemInUse)
             {
+                itemInUse.getItem().onUsingTick(itemInUse, this, itemInUseCount);
                 if (this.itemInUseCount <= 25 && this.itemInUseCount % 4 == 0)
                 {
                     this.updateItemUse(itemstack, 5);
@@ -281,7 +302,7 @@
 
         super.onUpdate();
 
-        if (!this.worldObj.isRemote && this.openContainer != null && !this.openContainer.canInteractWith(this))
+        if (!this.worldObj.isRemote && this.openContainer != null && !ForgeHooks.canInteractWith(this, this.openContainer))
         {
             this.closeScreen();
             this.openContainer = this.inventoryContainer;
@@ -498,11 +519,11 @@
             this.cameraYaw = 0.0F;
             this.addMountedMovementStat(this.posX - d0, this.posY - d1, this.posZ - d2);
 
-            if (this.ridingEntity instanceof EntityPig)
+            if (this.ridingEntity instanceof EntityLivingBase && ((EntityLivingBase)ridingEntity).shouldRiderFaceForward(this))
             {
                 this.rotationPitch = f1;
                 this.rotationYaw = f;
-                this.renderYawOffset = ((EntityPig)this.ridingEntity).renderYawOffset;
+                this.renderYawOffset = ((EntityLivingBase)this.ridingEntity).renderYawOffset;
             }
         }
     }
@@ -632,11 +653,15 @@
     // JAVADOC METHOD $$ func_70645_a
     public void onDeath(DamageSource par1DamageSource)
     {
+        if (ForgeHooks.onLivingDeath(this, par1DamageSource)) return;
         super.onDeath(par1DamageSource);
         this.setSize(0.2F, 0.2F);
         this.setPosition(this.posX, this.posY, this.posZ);
         this.motionY = 0.10000000149011612D;
 
+        captureDrops = true;
+        capturedDrops.clear();
+
         if (this.getCommandSenderName().equals("Notch"))
         {
             this.func_146097_a(new ItemStack(Items.apple, 1), true, false);
@@ -647,6 +672,20 @@
             this.inventory.dropAllItems();
         }
 
+        captureDrops = false;
+
+        if (!worldObj.isRemote)
+        {
+            PlayerDropsEvent event = new PlayerDropsEvent(this, par1DamageSource, capturedDrops, recentlyHit > 0);
+            if (!MinecraftForge.EVENT_BUS.post(event))
+            {
+                for (EntityItem item : capturedDrops)
+                {
+                    joinEntityItemWithWorld(item);
+                }
+            }
+        }
+
         if (par1DamageSource != null)
         {
             this.motionX = (double)(-MathHelper.cos((this.attackedAtYaw + this.rotationYaw) * (float)Math.PI / 180.0F) * 0.1F);
@@ -702,13 +741,26 @@
     // JAVADOC METHOD $$ func_71040_bB
     public EntityItem dropOneItem(boolean par1)
     {
-        return this.func_146097_a(this.inventory.decrStackSize(this.inventory.currentItem, par1 && this.inventory.getCurrentItem() != null ? this.inventory.getCurrentItem().stackSize : 1), false, true);
+        ItemStack stack = inventory.getCurrentItem();
+
+        if (stack == null)
+        {
+            return null;
+        }
+
+        if (stack.getItem().onDroppedByPlayer(stack, this))
+        {
+            int count = par1 && this.inventory.getCurrentItem() != null ? this.inventory.getCurrentItem().stackSize : 1;
+            return ForgeHooks.onPlayerTossEvent(this, inventory.decrStackSize(inventory.currentItem, count), true);
+        }
+
+        return null;
     }
 
     // JAVADOC METHOD $$ func_71019_a
     public EntityItem dropPlayerItemWithRandomChoice(ItemStack par1ItemStack, boolean par2)
     {
-        return this.func_146097_a(par1ItemStack, false, false);
+        return ForgeHooks.onPlayerTossEvent(this, par1ItemStack, false);
     }
 
     public EntityItem func_146097_a(ItemStack p_146097_1_, boolean p_146097_2_, boolean p_146097_3_)
@@ -765,13 +817,25 @@
     // JAVADOC METHOD $$ func_71012_a
     public void joinEntityItemWithWorld(EntityItem par1EntityItem)
     {
+        if (captureDrops)
+        {
+            capturedDrops.add(par1EntityItem);
+            return;
+        }
         this.worldObj.spawnEntityInWorld(par1EntityItem);
     }
 
+    @Deprecated //Metadata sensitive version
     public float func_146096_a(Block p_146096_1_, boolean p_146096_2_)
     {
-        float f = this.inventory.func_146023_a(p_146096_1_);
+        return getBreakSpeed(p_146096_1_, p_146096_2_, 0);
+    }
 
+    public float getBreakSpeed(Block p_146096_1_, boolean p_146096_2_, int meta)
+    {
+        ItemStack stack = inventory.getCurrentItem();
+        float f = (stack == null ? 1.0F : stack.getItem().getDigSpeed(stack, p_146096_1_, meta));
+
         if (f > 1.0F)
         {
             int i = EnchantmentHelper.getEfficiencyModifier(this);
@@ -781,7 +845,9 @@
             {
                 float f1 = (float)(i * i + 1);
 
-                if (!itemstack.func_150998_b(p_146096_1_) && f <= 1.0F)
+                boolean canHarvest = ForgeHooks.canToolHarvestBlock(p_146096_1_, meta, itemstack);
+
+                if (!canHarvest && f <= 1.0F)
                 {
                     f += f1 * 0.08F;
                 }
@@ -812,12 +878,13 @@
             f /= 5.0F;
         }
 
-        return f;
+        f = ForgeEventFactory.getBreakSpeed(this, p_146096_1_, meta, f);
+        return (f < 0 ? 0 : f);
     }
 
     public boolean func_146099_a(Block p_146099_1_)
     {
-        return this.inventory.func_146025_b(p_146099_1_);
+        return ForgeEventFactory.doPlayerHarvestCheck(this, p_146099_1_, this.inventory.func_146025_b(p_146099_1_));
     }
 
     // JAVADOC METHOD $$ func_70037_a
@@ -847,6 +914,16 @@
             this.spawnForced = par1NBTTagCompound.getBoolean("SpawnForced");
         }
 
+        NBTTagList spawnlist = null;
+        spawnlist = par1NBTTagCompound.func_150295_c("Spawns", 10);
+        for (int i = 0; i < spawnlist.tagCount(); i++)
+        {
+            NBTTagCompound spawndata = (NBTTagCompound)spawnlist.func_150305_b(i);
+            int spawndim = spawndata.getInteger("Dim");
+            this.spawnChunkMap.put(spawndim, new ChunkCoordinates(spawndata.getInteger("SpawnX"), spawndata.getInteger("SpawnY"), spawndata.getInteger("SpawnZ")));
+            this.spawnForcedMap.put(spawndim, spawndata.getBoolean("SpawnForced"));
+        }
+
         this.foodStats.readNBT(par1NBTTagCompound);
         this.capabilities.readCapabilitiesFromNBT(par1NBTTagCompound);
 
@@ -878,6 +955,23 @@
             par1NBTTagCompound.setBoolean("SpawnForced", this.spawnForced);
         }
 
+        NBTTagList spawnlist = new NBTTagList();
+        for (Entry<Integer, ChunkCoordinates> entry : this.spawnChunkMap.entrySet())
+        {
+            ChunkCoordinates spawn = entry.getValue();
+            if (spawn == null) continue;
+            Boolean forced = spawnForcedMap.get(entry.getKey());
+            if (forced == null) forced = false;
+            NBTTagCompound spawndata = new NBTTagCompound();
+            spawndata.setInteger("Dim", entry.getKey());
+            spawndata.setInteger("SpawnX", spawn.posX);
+            spawndata.setInteger("SpawnY", spawn.posY);
+            spawndata.setInteger("SpawnZ", spawn.posZ);
+            spawndata.setBoolean("SpawnForced", forced);
+            spawnlist.appendTag(spawndata);
+        }
+        par1NBTTagCompound.setTag("Spawns", spawnlist);
+
         this.foodStats.writeNBT(par1NBTTagCompound);
         this.capabilities.writeCapabilitiesToNBT(par1NBTTagCompound);
         par1NBTTagCompound.setTag("EnderItems", this.theInventoryEnderChest.saveInventoryToNBT());
@@ -902,7 +996,7 @@
 
     public float getEyeHeight()
     {
-        return 0.12F;
+        return eyeHeight;
     }
 
     // JAVADOC METHOD $$ func_71061_d_
@@ -914,6 +1008,7 @@
     // JAVADOC METHOD $$ func_70097_a
     public boolean attackEntityFrom(DamageSource par1DamageSource, float par2)
     {
+        if (ForgeHooks.onLivingAttack(this, par1DamageSource, par2)) return false;
         if (this.isEntityInvulnerable())
         {
             return false;
@@ -1018,12 +1113,15 @@
     {
         if (!this.isEntityInvulnerable())
         {
+            par2 = ForgeHooks.onLivingHurt(this, par1DamageSource, par2);
+            if (par2 <= 0) return;
             if (!par1DamageSource.isUnblockable() && this.isBlocking() && par2 > 0.0F)
             {
                 par2 = (1.0F + par2) * 0.5F;
             }
 
-            par2 = this.applyArmorCalculations(par1DamageSource, par2);
+            par2 = ArmorProperties.ApplyArmor(this, inventory.armorInventory, par1DamageSource, par2);
+            if (par2 <= 0) return;
             par2 = this.applyPotionDamageCalculations(par1DamageSource, par2);
             float f1 = par2;
             par2 = Math.max(par2 - this.getAbsorptionAmount(), 0.0F);
@@ -1058,6 +1156,7 @@
 
     public boolean interactWith(Entity par1Entity)
     {
+        if (MinecraftForge.EVENT_BUS.post(new EntityInteractEvent(this, par1Entity))) return false;
         ItemStack itemstack = this.getCurrentEquippedItem();
         ItemStack itemstack1 = itemstack != null ? itemstack.copy() : null;
 
@@ -1110,7 +1209,9 @@
     // JAVADOC METHOD $$ func_71028_bD
     public void destroyCurrentEquippedItem()
     {
+        ItemStack orig = getCurrentEquippedItem();
         this.inventory.setInventorySlotContents(this.inventory.currentItem, (ItemStack)null);
+        MinecraftForge.EVENT_BUS.post(new PlayerDestroyItemEvent(this, orig));
     }
 
     // JAVADOC METHOD $$ func_70033_W
@@ -1122,6 +1223,15 @@
     // JAVADOC METHOD $$ func_71059_n
     public void attackTargetEntityWithCurrentItem(Entity par1Entity)
     {
+        if (MinecraftForge.EVENT_BUS.post(new AttackEntityEvent(this, par1Entity)))
+        {
+            return;
+        }
+        ItemStack stack = getCurrentEquippedItem();
+        if (stack != null && stack.getItem().onLeftClickEntity(stack, this, par1Entity))
+        {
+            return;
+        }
         if (par1Entity.canAttackWithItem())
         {
             if (!par1Entity.hitByEntity(this))
@@ -1273,6 +1383,12 @@
     // JAVADOC METHOD $$ func_71018_a
     public EntityPlayer.EnumStatus sleepInBedAt(int par1, int par2, int par3)
     {
+        PlayerSleepInBedEvent event = new PlayerSleepInBedEvent(this, par1, par2, par3);
+        MinecraftForge.EVENT_BUS.post(event);
+        if (event.result != null)
+        {
+            return event.result;
+        }
         if (!this.worldObj.isRemote)
         {
             if (this.isPlayerSleeping() || !this.isEntityAlive())
@@ -1315,8 +1431,7 @@
 
         if (this.worldObj.blockExists(par1, par2, par3))
         {
-            int i1 = this.worldObj.getBlockMetadata(par1, par2, par3);
-            int l = BlockBed.func_149895_l(i1);
+            int l = worldObj.func_147439_a(par1, par2, par3).getBedDirection(worldObj, par1, par2, par3);
             float f1 = 0.5F;
             float f = 0.5F;
 
@@ -1384,11 +1499,12 @@
         this.resetHeight();
         ChunkCoordinates chunkcoordinates = this.playerLocation;
         ChunkCoordinates chunkcoordinates1 = this.playerLocation;
+        Block block = (chunkcoordinates == null ? null : worldObj.func_147439_a(chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ));
 
-        if (chunkcoordinates != null && this.worldObj.func_147439_a(chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ) == Blocks.bed)
+        if (chunkcoordinates != null && block.isBed(worldObj, chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ, this))
         {
-            BlockBed.func_149979_a(this.worldObj, chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ, false);
-            chunkcoordinates1 = BlockBed.func_149977_a(this.worldObj, chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ, 0);
+            block.setBedOccupied(this.worldObj, chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ, this, false);
+            chunkcoordinates1 = block.getBedSpawnPosition(this.worldObj, chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ, this);
 
             if (chunkcoordinates1 == null)
             {
@@ -1423,7 +1539,7 @@
     // JAVADOC METHOD $$ func_71065_l
     private boolean isInBed()
     {
-        return this.worldObj.func_147439_a(this.playerLocation.posX, this.playerLocation.posY, this.playerLocation.posZ) == Blocks.bed;
+        return this.worldObj.func_147439_a(this.playerLocation.posX, this.playerLocation.posY, this.playerLocation.posZ).isBed(worldObj, playerLocation.posX, playerLocation.posY, playerLocation.posZ, this);
     }
 
     // JAVADOC METHOD $$ func_71056_a
@@ -1435,9 +1551,9 @@
         ichunkprovider.loadChunk(par1ChunkCoordinates.posX - 3 >> 4, par1ChunkCoordinates.posZ + 3 >> 4);
         ichunkprovider.loadChunk(par1ChunkCoordinates.posX + 3 >> 4, par1ChunkCoordinates.posZ + 3 >> 4);
 
-        if (par0World.func_147439_a(par1ChunkCoordinates.posX, par1ChunkCoordinates.posY, par1ChunkCoordinates.posZ) == Blocks.bed)
+        if (par0World.func_147439_a(par1ChunkCoordinates.posX, par1ChunkCoordinates.posY, par1ChunkCoordinates.posZ).isBed(par0World, par1ChunkCoordinates.posX, par1ChunkCoordinates.posY, par1ChunkCoordinates.posZ, null))
         {
-            ChunkCoordinates chunkcoordinates1 = BlockBed.func_149977_a(par0World, par1ChunkCoordinates.posX, par1ChunkCoordinates.posY, par1ChunkCoordinates.posZ, 0);
+            ChunkCoordinates chunkcoordinates1 = par0World.func_147439_a(par1ChunkCoordinates.posX, par1ChunkCoordinates.posY, par1ChunkCoordinates.posZ).getBedSpawnPosition(par0World, par1ChunkCoordinates.posX, par1ChunkCoordinates.posY, par1ChunkCoordinates.posZ, null);
             return chunkcoordinates1;
         }
         else
@@ -1456,8 +1572,10 @@
     {
         if (this.playerLocation != null)
         {
-            int i = this.worldObj.getBlockMetadata(this.playerLocation.posX, this.playerLocation.posY, this.playerLocation.posZ);
-            int j = BlockBed.func_149895_l(i);
+            int x = playerLocation.posX;
+            int y = playerLocation.posY;
+            int z = playerLocation.posZ;
+            int j = worldObj.func_147439_a(x, y, z).getBedDirection(worldObj, x, y, z);
 
             switch (j)
             {
@@ -1516,19 +1634,26 @@
     public void func_146105_b(IChatComponent p_146105_1_) {}
 
     // JAVADOC METHOD $$ func_70997_bJ
+    @Deprecated
     public ChunkCoordinates getBedLocation()
     {
-        return this.spawnChunk;
+        return getBedLocation(this.dimension);
     }
 
+    @Deprecated
     public boolean isSpawnForced()
     {
-        return this.spawnForced;
+        return isSpawnForced(this.dimension);
     }
 
     // JAVADOC METHOD $$ func_71063_a
     public void setSpawnChunk(ChunkCoordinates par1ChunkCoordinates, boolean par2)
     {
+        if (this.dimension != 0)
+        {
+            setSpawnChunk(par1ChunkCoordinates, par2, this.dimension);
+            return;
+        }
         if (par1ChunkCoordinates != null)
         {
             this.spawnChunk = new ChunkCoordinates(par1ChunkCoordinates);
@@ -1710,6 +1835,10 @@
 
             super.fall(par1);
         }
+        else
+        {
+            MinecraftForge.EVENT_BUS.post(new PlayerFlyableFallEvent(this, par1));
+        }
     }
 
     protected String func_146067_o(int p_146067_1_)
@@ -1755,11 +1884,6 @@
         }
         else
         {
-            if (par1ItemStack.getItem().requiresMultipleRenderPasses())
-            {
-                return par1ItemStack.getItem().getIconFromDamageForRenderPass(par1ItemStack.getItemDamage(), par2);
-            }
-
             if (this.itemInUse != null && par1ItemStack.getItem() == Items.bow)
             {
                 int j = par1ItemStack.getMaxItemUseDuration() - this.itemInUseCount;
@@ -1779,6 +1903,7 @@
                     return Items.bow.getItemIconForUseDuration(0);
                 }
             }
+            iicon = par1ItemStack.getItem().getIcon(par1ItemStack, par2, this, itemInUse, itemInUseCount);
         }
 
         return iicon;
@@ -1967,6 +2092,17 @@
         }
 
         this.theInventoryEnderChest = par1EntityPlayer.theInventoryEnderChest;
+
+        this.spawnChunkMap = par1EntityPlayer.spawnChunkMap;
+        this.spawnForcedMap = par1EntityPlayer.spawnForcedMap;
+
+        //Copy over a section of the Entity Data from the old player.
+        //Allows mods to specify data that persists after players respawn.
+        NBTTagCompound old = par1EntityPlayer.getEntityData();
+        if (old.hasKey(PERSISTED_NBT_TAG))
+        {
+            getEntityData().setTag(PERSISTED_NBT_TAG, old.getCompoundTag(PERSISTED_NBT_TAG));
+        }
     }
 
     // JAVADOC METHOD $$ func_70041_e_
@@ -2013,7 +2149,14 @@
     // JAVADOC METHOD $$ func_70062_b
     public void setCurrentItemOrArmor(int par1, ItemStack par2ItemStack)
     {
-        this.inventory.armorInventory[par1] = par2ItemStack;
+        if (par1 == 0)
+        {
+            this.inventory.mainInventory[this.inventory.currentItem] = par2ItemStack;
+        }
+        else
+        {
+            this.inventory.armorInventory[par1 - 1] = par2ItemStack;
+        }
     }
 
     // JAVADOC METHOD $$ func_98034_c
@@ -2059,7 +2202,7 @@
 
     public IChatComponent func_145748_c_()
     {
-        ChatComponentText chatcomponenttext = new ChatComponentText(ScorePlayerTeam.formatPlayerName(this.getTeam(), this.getCommandSenderName()));
+        ChatComponentText chatcomponenttext = new ChatComponentText(ScorePlayerTeam.formatPlayerName(this.getTeam(), this.getDisplayName()));
         chatcomponenttext.func_150256_b().func_150241_a(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/msg " + this.getCommandSenderName() + " "));
         return chatcomponenttext;
     }
@@ -2096,6 +2239,101 @@
         FMLNetworkHandler.openGui(this, mod, modGuiId, world, x, y, z);
     }
 
+    /* ======================================== FORGE START =====================================*/
+    /**
+     * A dimension aware version of getBedLocation.
+     * @param dimension The dimension to get the bed spawn for
+     * @return The player specific spawn location for the dimension.  May be null.
+     */
+    public ChunkCoordinates getBedLocation(int dimension)
+    {
+        return dimension == 0 ? spawnChunk : spawnChunkMap.get(dimension);
+    }
+
+    /**
+     * A dimension aware version of isSpawnForced.
+     * Noramally isSpawnForced is used to determine if the respawn system should check for a bed or not.
+     * This just extends that to be dimension aware.
+     * @param dimension The dimension to get whether to check for a bed before spawning for
+     * @return The player specific spawn location for the dimension.  May be null.
+     */
+    public boolean isSpawnForced(int dimension)
+    {
+        if (dimension == 0) return this.spawnForced;
+        Boolean forced = this.spawnForcedMap.get(dimension);
+        return forced == null ? false : forced;
+    }
+
+    /**
+     * A dimension aware version of setSpawnChunk.
+     * This functions identically, but allows you to specify which dimension to affect, rather than affecting the player's current dimension.
+     * @param chunkCoordinates The spawn point to set as the player-specific spawn point for the dimension
+     * @param forced Whether or not the respawn code should check for a bed at this location (true means it won't check for a bed)
+     * @param dimension Which dimension to apply the player-specific respawn point to
+     */
+    public void setSpawnChunk(ChunkCoordinates chunkCoordinates, boolean forced, int dimension)
+    {
+        if (dimension == 0)
+        {
+            if (chunkCoordinates != null)
+            {
+                spawnChunk = new ChunkCoordinates(chunkCoordinates);
+                spawnForced = forced;
+            }
+            else
+            {
+                spawnChunk = null;
+                spawnForced = false;
+            }
+            return;
+        }
+
+        if (chunkCoordinates != null)
+        {
+            spawnChunkMap.put(dimension, new ChunkCoordinates(chunkCoordinates));
+            spawnForcedMap.put(dimension, forced);
+        }
+        else
+        {
+            spawnChunkMap.remove(dimension);
+            spawnForcedMap.remove(dimension);
+        }
+    }
+
+    public float eyeHeight;
+    private String displayname;
+    
+    /**
+     * Returns the default eye height of the player
+     * @return player default eye height
+     */
+    public float getDefaultEyeHeight()
+    {
+        return 0.12F;
+    }
+
+    /**
+     * Get the currently computed display name, cached for efficiency.
+     * @return the current display name
+     */
+    public String getDisplayName()
+    {
+        if(this.displayname == null)
+        {
+            this.displayname = ForgeEventFactory.getPlayerDisplayName(this, this.getCommandSenderName());
+        }
+        return this.displayname;
+    }
+
+    /**
+     * Force the displayed name to refresh
+     */
+    public void refreshDisplayName()
+    {
+        this.displayname = ForgeEventFactory.getPlayerDisplayName(this, this.getCommandSenderName());
+    }
+    /* ======================================== FORGE END  =====================================*/
+
     public static enum EnumStatus
     {
         OK,
