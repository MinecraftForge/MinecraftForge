--- ../src_base/minecraft/net/minecraft/entity/EntityLivingBase.java
+++ ../src_work/minecraft/net/minecraft/entity/EntityLivingBase.java
@@ -20,14 +20,18 @@
 import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.item.EntityXPOrb;
 import net.minecraft.entity.monster.EntityZombie;
+import net.minecraft.entity.passive.EntityHorse;
+import net.minecraft.entity.passive.EntityPig;
 import net.minecraft.entity.passive.EntityWolf;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.projectile.EntityArrow;
+import net.minecraft.item.Item;
 import net.minecraft.item.ItemArmor;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTBase;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagFloat;
+import net.minecraft.nbt.NBTTagInt;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.nbt.NBTTagShort;
 import net.minecraft.network.packet.Packet18Animation;
@@ -46,21 +50,29 @@
 import net.minecraft.util.Vec3;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
+import net.minecraftforge.common.ForgeHooks;
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import net.minecraft.entity.player.EntityPlayerMP;
+// CraftBukkit end
 
 public abstract class EntityLivingBase extends Entity
 {
-    private static final UUID field_110156_b = UUID.fromString("662A6B8D-DA3E-4C1C-8813-96EA6097278D");
-    private static final AttributeModifier field_110157_c = (new AttributeModifier(field_110156_b, "Sprinting speed boost", 0.30000001192092896D, 2)).func_111168_a(false);
-    private BaseAttributeMap field_110155_d;
-    private final CombatTracker _combatTracker = new CombatTracker(this);
-    private final HashMap activePotionsMap = new HashMap();
+    private static final UUID sprintingSpeedBoostModifierUUID = UUID.fromString("662A6B8D-DA3E-4C1C-8813-96EA6097278D");
+    private static final AttributeModifier sprintingSpeedBoostModifier = (new AttributeModifier(sprintingSpeedBoostModifierUUID, "Sprinting speed boost", 0.30000001192092896D, 2)).setSaved(false);
+    private BaseAttributeMap attributeMap;
+    public CombatTracker _combatTracker = new CombatTracker(this); // CraftBukkit - private -> public, remove final
+    public final HashMap activePotionsMap = new HashMap(); // CraftBukkit - protected -> public
 
     /** The equipment this mob was previously wearing, used for syncing. */
     private final ItemStack[] previousEquipment = new ItemStack[5];
 
     /** Whether an arm swing is currently in progress. */
     public boolean isSwingInProgress;
-    public int field_110158_av;
+    public int swingProgressInt;
     public int arrowHitTimer;
     public float prevHealth;
 
@@ -82,8 +94,8 @@
     public int attackTime;
     public float prevSwingProgress;
     public float swingProgress;
-    public float prevLimbYaw;
-    public float limbYaw;
+    public float prevLimbSwingAmount;
+    public float limbSwingAmount;
 
     /**
      * Only relevant when limbYaw is not 0(the entity is moving). Influences where in its swing legs and arms currently
@@ -110,7 +122,7 @@
     public float jumpMovementFactor = 0.02F;
 
     /** The most recent player that has attacked this entity */
-    protected EntityPlayer attackingPlayer;
+    public EntityPlayer attackingPlayer; // CraftBukkit - protected -> public
 
     /**
      * Set to 60 when hit by the player or the player's wolf, then decrements. Used to determine whether the entity
@@ -133,7 +145,11 @@
 
     /** The score value of the Mob, the amount of points the mob is worth. */
     protected int scoreValue;
-    protected float field_110153_bc;
+
+    /**
+     * Damage taken in the last hit. Mobs are resistant to damage less than this for a short time after taking damage.
+     */
+    public float lastDamage; // CraftBukkit - protected -> public
 
     /** used to check whether entity is jumping. */
     protected boolean isJumping;
@@ -151,7 +167,7 @@
 
     /** The new Y position to be applied to the entity. */
     protected double newPosY;
-    protected double field_110152_bk;
+    protected double newPosZ;
 
     /** The new yaw rotation to be applied to the entity. */
     protected double newRotationYaw;
@@ -160,13 +176,15 @@
     protected double newRotationPitch;
 
     /** Whether the DataWatcher needs to be updated with the active potions */
-    private boolean potionsNeedUpdate = true;
+    public boolean potionsNeedUpdate = true; // CraftBukkit - private -> public
 
     /** is only being set, has no uses as of MC 1.1 */
-    private EntityLivingBase entityLivingToAttack;
+    public EntityLivingBase entityLivingToAttack; // CraftBukkit - private -> public
     private int revengeTimer;
-    private EntityLivingBase field_110150_bn;
-    private int field_142016_bo;
+    private EntityLivingBase lastAttacker;
+
+    /** Holds the value of ticksExisted when setLastAttacker was last called. */
+    private int lastAttackerTime;
 
     /**
      * A factor used to determine how far this entity will move each tick if it is walking on land. Adjusted by speed,
@@ -177,12 +195,18 @@
     /** Number of ticks since last jump */
     private int jumpTicks;
     private float field_110151_bq;
+    // CraftBukkit start
+    public int expToDrop;
+    public int maxAirTicks = 300;
+    // CraftBukkit end
+    public boolean calledDeathEvent = false; // MCPC+
 
     public EntityLivingBase(World par1World)
     {
         super(par1World);
-        this.func_110147_ax();
-        this.setEntityHealth(this.func_110138_aP());
+        this.applyEntityAttributes();
+        // CraftBukkit - setHealth(getMaxHealth()) inlined and simplified to skip the instanceof check for EntityPlayer, as getBukkitEntity() is not initialized in constructor
+        this.dataWatcher.updateObject(6, (float) this.getEntityAttribute(SharedMonsterAttributes.maxHealth).getAttributeValue());
         this.preventEntitySpawning = true;
         this.field_70770_ap = (float)(Math.random() + 1.0D) * 0.01F;
         this.setPosition(this.posX, this.posY, this.posZ);
@@ -200,15 +224,15 @@
         this.dataWatcher.addObject(6, Float.valueOf(1.0F));
     }
 
-    protected void func_110147_ax()
-    {
-        this.func_110140_aT().func_111150_b(SharedMonsterAttributes.field_111267_a);
-        this.func_110140_aT().func_111150_b(SharedMonsterAttributes.field_111266_c);
-        this.func_110140_aT().func_111150_b(SharedMonsterAttributes.field_111263_d);
+    protected void applyEntityAttributes()
+    {
+        this.getAttributeMap().func_111150_b(SharedMonsterAttributes.maxHealth);
+        this.getAttributeMap().func_111150_b(SharedMonsterAttributes.knockbackResistance);
+        this.getAttributeMap().func_111150_b(SharedMonsterAttributes.movementSpeed);
 
         if (!this.isAIEnabled())
         {
-            this.func_110148_a(SharedMonsterAttributes.field_111263_d).func_111128_a(0.10000000149011612D);
+            this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setAttribute(0.10000000149011612D);
         }
     }
 
@@ -299,14 +323,20 @@
 
             this.extinguish();
 
-            if (!this.worldObj.isRemote && this.isRiding() && this.ridingEntity instanceof EntityLivingBase)
+            if (!this.worldObj.isRemote && this.isRiding() && ridingEntity!=null && ridingEntity.shouldDismountInWater(this))
             {
                 this.mountEntity((Entity)null);
             }
         }
         else
         {
-            this.setAir(300);
+            // CraftBukkit start - Only set if needed to work around a DataWatcher inefficiency
+            if (this.getAir() != 300)
+            {
+                this.setAir(maxAirTicks);
+            }
+
+            // CraftBukkit end
         }
 
         this.prevCameraPitch = this.cameraPitch;
@@ -326,7 +356,7 @@
             --this.hurtResistantTime;
         }
 
-        if (this.func_110143_aJ() <= 0.0F)
+        if (this.getHealth() <= 0.0F)
         {
             this.onDeathUpdate();
         }
@@ -340,9 +370,9 @@
             this.attackingPlayer = null;
         }
 
-        if (this.field_110150_bn != null && !this.field_110150_bn.isEntityAlive())
-        {
-            this.field_110150_bn = null;
+        if (this.lastAttacker != null && !this.lastAttacker.isEntityAlive())
+        {
+            this.lastAttacker = null;
         }
 
         if (this.entityLivingToAttack != null && !this.entityLivingToAttack.isEntityAlive())
@@ -359,6 +389,22 @@
         this.worldObj.theProfiler.endSection();
     }
 
+    // CraftBukkit start
+    public int getExpReward()
+    {
+        int exp = this.getExperiencePoints(this.attackingPlayer);
+
+        if (!this.worldObj.isRemote && (this.recentlyHit > 0 || this.isPlayer()) && !this.isChild())
+        {
+            return exp;
+        }
+        else
+        {
+            return 0;
+        }
+    }
+    // CraftBukkit end
+
     /**
      * If Animal, checks if the age timer is negative
      */
@@ -374,22 +420,21 @@
     {
         ++this.deathTime;
 
-        if (this.deathTime == 20)
+        if (this.deathTime >= 20 && !this.isDead)   // CraftBukkit - (this.deathTicks == 20) -> (this.deathTicks >= 20 && !this.dead)
         {
             int i;
-
-            if (!this.worldObj.isRemote && (this.recentlyHit > 0 || this.isPlayer()) && !this.isChild() && this.worldObj.getGameRules().getGameRuleBooleanValue("doMobLoot"))
-            {
-                i = this.getExperiencePoints(this.attackingPlayer);
-
-                while (i > 0)
-                {
-                    int j = EntityXPOrb.getXPSplit(i);
-                    i -= j;
-                    this.worldObj.spawnEntityInWorld(new EntityXPOrb(this.worldObj, this.posX, this.posY, this.posZ, j));
-                }
-            }
-
+            // CraftBukkit start - Update getExpReward() above if the removed if() changes!
+            i = this.expToDrop;
+
+            while (i > 0)
+            {
+                int j = EntityXPOrb.getXPSplit(i);
+                i -= j;
+                this.worldObj.spawnEntityInWorld(new EntityXPOrb(this.worldObj, this.posX, this.posY, this.posZ, j));
+            }
+
+            this.expToDrop = 0;
+            // CraftBukkit end
             this.setDead();
 
             for (i = 0; i < 20; ++i)
@@ -446,30 +491,31 @@
     {
         this.entityLivingToAttack = par1EntityLivingBase;
         this.revengeTimer = this.ticksExisted;
-    }
-
-    public EntityLivingBase func_110144_aD()
-    {
-        return this.field_110150_bn;
-    }
-
-    public int func_142013_aG()
-    {
-        return this.field_142016_bo;
-    }
-
-    public void func_130011_c(Entity par1Entity)
+        ForgeHooks.onLivingSetAttackTarget(this, par1EntityLivingBase);
+    }
+
+    public EntityLivingBase getLastAttacker()
+    {
+        return this.lastAttacker;
+    }
+
+    public int getLastAttackerTime()
+    {
+        return this.lastAttackerTime;
+    }
+
+    public void setLastAttacker(Entity par1Entity)
     {
         if (par1Entity instanceof EntityLivingBase)
         {
-            this.field_110150_bn = (EntityLivingBase)par1Entity;
+            this.lastAttacker = (EntityLivingBase)par1Entity;
         }
         else
         {
-            this.field_110150_bn = null;
-        }
-
-        this.field_142016_bo = this.ticksExisted;
+            this.lastAttacker = null;
+        }
+
+        this.lastAttackerTime = this.ticksExisted;
     }
 
     public int getAge()
@@ -482,12 +528,12 @@
      */
     public void writeEntityToNBT(NBTTagCompound par1NBTTagCompound)
     {
-        par1NBTTagCompound.setFloat("HealF", this.func_110143_aJ());
-        par1NBTTagCompound.setShort("Health", (short)((int)Math.ceil((double)this.func_110143_aJ())));
+        par1NBTTagCompound.setFloat("HealF", this.getHealth());
+        par1NBTTagCompound.setShort("Health", (short)((int)Math.ceil((double)this.getHealth())));
         par1NBTTagCompound.setShort("HurtTime", (short)this.hurtTime);
         par1NBTTagCompound.setShort("DeathTime", (short)this.deathTime);
         par1NBTTagCompound.setShort("AttackTime", (short)this.attackTime);
-        par1NBTTagCompound.setFloat("AbsorptionAmount", this.func_110139_bj());
+        par1NBTTagCompound.setFloat("AbsorptionAmount", this.getAbsorptionAmount());
         ItemStack[] aitemstack = this.getLastActiveItems();
         int i = aitemstack.length;
         int j;
@@ -499,11 +545,11 @@
 
             if (itemstack != null)
             {
-                this.field_110155_d.func_111148_a(itemstack.func_111283_C());
-            }
-        }
-
-        par1NBTTagCompound.setTag("Attributes", SharedMonsterAttributes.func_111257_a(this.func_110140_aT()));
+                this.attributeMap.removeAttributeModifiers(itemstack.getAttributeModifiers());
+            }
+        }
+
+        par1NBTTagCompound.setTag("Attributes", SharedMonsterAttributes.func_111257_a(this.getAttributeMap()));
         aitemstack = this.getLastActiveItems();
         i = aitemstack.length;
 
@@ -513,7 +559,7 @@
 
             if (itemstack != null)
             {
-                this.field_110155_d.func_111147_b(itemstack.func_111283_C());
+                this.attributeMap.applyAttributeModifiers(itemstack.getAttributeModifiers());
             }
         }
 
@@ -537,11 +583,11 @@
      */
     public void readEntityFromNBT(NBTTagCompound par1NBTTagCompound)
     {
-        this.func_110149_m(par1NBTTagCompound.getFloat("AbsorptionAmount"));
+        this.setAbsorptionAmount(par1NBTTagCompound.getFloat("AbsorptionAmount"));
 
         if (par1NBTTagCompound.hasKey("Attributes") && this.worldObj != null && !this.worldObj.isRemote)
         {
-            SharedMonsterAttributes.func_111260_a(this.func_110140_aT(), par1NBTTagCompound.getTagList("Attributes"), this.worldObj == null ? null : this.worldObj.getWorldLogAgent());
+            SharedMonsterAttributes.func_111260_a(this.getAttributeMap(), par1NBTTagCompound.getTagList("Attributes"), this.worldObj == null ? null : this.worldObj.getWorldLogAgent());
         }
 
         if (par1NBTTagCompound.hasKey("ActiveEffects"))
@@ -556,9 +602,26 @@
             }
         }
 
+        // CraftBukkit start
+        if (par1NBTTagCompound.hasKey("Bukkit.MaxHealth"))
+        {
+            NBTBase nbtbase = par1NBTTagCompound.getTag("Bukkit.MaxHealth");
+
+            if (nbtbase.getId() == 5)
+            {
+                this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setAttribute((double)((NBTTagFloat) nbtbase).data);
+            }
+            else if (nbtbase.getId() == 3)
+            {
+                this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setAttribute((double)((NBTTagInt) nbtbase).data);
+            }
+        }
+
+        // CraftBukkit end
+
         if (par1NBTTagCompound.hasKey("HealF"))
         {
-            this.setEntityHealth(par1NBTTagCompound.getFloat("HealF"));
+            this.setHealth(par1NBTTagCompound.getFloat("HealF"));
         }
         else
         {
@@ -566,15 +629,15 @@
 
             if (nbtbase == null)
             {
-                this.setEntityHealth(this.func_110138_aP());
+                this.setHealth(this.getMaxHealth());
             }
             else if (nbtbase.getId() == 5)
             {
-                this.setEntityHealth(((NBTTagFloat)nbtbase).data);
+                this.setHealth(((NBTTagFloat)nbtbase).data);
             }
             else if (nbtbase.getId() == 2)
             {
-                this.setEntityHealth((float)((NBTTagShort)nbtbase).data);
+                this.setHealth((float)((NBTTagShort)nbtbase).data);
             }
         }
 
@@ -685,12 +748,14 @@
 
     public boolean isPotionActive(int par1)
     {
-        return this.activePotionsMap.containsKey(Integer.valueOf(par1));
+        // CraftBukkit - Add size check for efficiency
+        return this.activePotionsMap.size() != 0 && this.activePotionsMap.containsKey(Integer.valueOf(par1));
     }
 
     public boolean isPotionActive(Potion par1Potion)
     {
-        return this.activePotionsMap.containsKey(Integer.valueOf(par1Potion.id));
+        // CraftBukkit - Add size check for efficiency
+        return this.activePotionsMap.size() != 0 && this.activePotionsMap.containsKey(Integer.valueOf(par1Potion.id));
     }
 
     /**
@@ -744,10 +809,8 @@
         return this.getCreatureAttribute() == EnumCreatureAttribute.UNDEAD;
     }
 
-    @SideOnly(Side.CLIENT)
-
-    /**
-     * Remove the speified potion effect from this entity.
+    /**
+     * Remove the specified potion effect from this entity.
      */
     public void removePotionEffectClient(int par1)
     {
@@ -773,7 +836,7 @@
 
         if (!this.worldObj.isRemote)
         {
-            Potion.potionTypes[par1PotionEffect.getPotionID()].func_111185_a(this, this.func_110140_aT(), par1PotionEffect.getAmplifier());
+            Potion.potionTypes[par1PotionEffect.getPotionID()].applyAttributesModifiersToEntity(this, this.getAttributeMap(), par1PotionEffect.getAmplifier());
         }
     }
 
@@ -783,8 +846,8 @@
 
         if (par2 && !this.worldObj.isRemote)
         {
-            Potion.potionTypes[par1PotionEffect.getPotionID()].func_111187_a(this, this.func_110140_aT(), par1PotionEffect.getAmplifier());
-            Potion.potionTypes[par1PotionEffect.getPotionID()].func_111185_a(this, this.func_110140_aT(), par1PotionEffect.getAmplifier());
+            Potion.potionTypes[par1PotionEffect.getPotionID()].removeAttributesModifiersFromEntity(this, this.getAttributeMap(), par1PotionEffect.getAmplifier());
+            Potion.potionTypes[par1PotionEffect.getPotionID()].applyAttributesModifiersToEntity(this, this.getAttributeMap(), par1PotionEffect.getAmplifier());
         }
     }
 
@@ -794,31 +857,74 @@
 
         if (!this.worldObj.isRemote)
         {
-            Potion.potionTypes[par1PotionEffect.getPotionID()].func_111187_a(this, this.func_110140_aT(), par1PotionEffect.getAmplifier());
-        }
-    }
-
+            Potion.potionTypes[par1PotionEffect.getPotionID()].removeAttributesModifiersFromEntity(this, this.getAttributeMap(), par1PotionEffect.getAmplifier());
+        }
+    }
+
+    // CraftBukkit start - Delegate so we can handle providing a reason for health being regained
     /**
      * Heal living entity (param: amount of half-hearts)
      */
     public void heal(float par1)
     {
-        float f1 = this.func_110143_aJ();
+        heal(par1, EntityRegainHealthEvent.RegainReason.CUSTOM);
+    }
+
+    public void heal(float f, EntityRegainHealthEvent.RegainReason regainReason)
+    {
+        float f1 = this.getHealth();
 
         if (f1 > 0.0F)
         {
-            this.setEntityHealth(f1 + par1);
-        }
-    }
-
-    public final float func_110143_aJ()
-    {
-        return this.dataWatcher.func_111145_d(6);
-    }
-
-    public void setEntityHealth(float par1)
-    {
-        this.dataWatcher.updateObject(6, Float.valueOf(MathHelper.clamp_float(par1, 0.0F, this.func_110138_aP())));
+            EntityRegainHealthEvent event = new EntityRegainHealthEvent(this.getBukkitEntity(), f, regainReason);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled())
+            {
+                this.setHealth((float)(this.getHealth() + event.getAmount()));
+            }
+        }
+    }
+
+    public final float getHealth()
+    {
+        // CraftBukkit start - Use unscaled health
+        if (this instanceof EntityPlayerMP)
+        {
+            return (float)((EntityPlayerMP) this).getBukkitEntity().getHealth();
+        }
+
+        // CraftBukkit end
+        return this.dataWatcher.getWatchableObjectFloat(6);
+    }
+
+    public void setHealth(float par1)
+    {
+        // CraftBukkit start - Handle scaled health
+        if (this instanceof EntityPlayerMP)
+        {
+            org.bukkit.craftbukkit.entity.CraftPlayer player = ((EntityPlayerMP) this).getBukkitEntity();
+
+            // Squeeze
+            if (par1 < 0.0F)
+            {
+                player.setRealHealth(0.0D);
+            }
+            else if (par1 > player.getMaxHealth())
+            {
+                player.setRealHealth(player.getMaxHealth());
+            }
+            else
+            {
+                player.setRealHealth(par1);
+            }
+
+            this.dataWatcher.updateObject(6, Float.valueOf(player.getScaledHealth()));
+            return;
+        }
+
+        // CraftBukkit end
+        this.dataWatcher.updateObject(6, Float.valueOf(MathHelper.clamp_float(par1, 0.0F, this.getMaxHealth())));
     }
 
     /**
@@ -826,6 +932,7 @@
      */
     public boolean attackEntityFrom(DamageSource par1DamageSource, float par2)
     {
+        if (ForgeHooks.onLivingAttack(this, par1DamageSource, par2)) return false;
         if (this.isEntityInvulnerable())
         {
             return false;
@@ -838,7 +945,7 @@
         {
             this.entityAge = 0;
 
-            if (this.func_110143_aJ() <= 0.0F)
+            if (this.getHealth() <= 0.0F)
             {
                 return false;
             }
@@ -854,24 +961,38 @@
                     par2 *= 0.75F;
                 }
 
-                this.limbYaw = 1.5F;
+                this.limbSwingAmount = 1.5F;
                 boolean flag = true;
-
-                if ((float)this.hurtResistantTime > (float)this.maxHurtResistantTime / 2.0F)
-                {
-                    if (par2 <= this.field_110153_bc)
+                // CraftBukkit start
+                EntityDamageEvent event = CraftEventFactory.handleEntityDamageEvent(this, par1DamageSource, par2);
+
+                if (event != null)
+                {
+                    if (event.isCancelled())
                     {
                         return false;
                     }
 
-                    this.damageEntity(par1DamageSource, par2 - this.field_110153_bc);
-                    this.field_110153_bc = par2;
+                    par2 = (float) event.getDamage();
+                }
+
+                // CraftBukkit end
+
+                if ((float)this.hurtResistantTime > (float)this.maxHurtResistantTime / 2.0F)
+                {
+                    if (par2 <= this.lastDamage)
+                    {
+                        return false;
+                    }
+
+                    this.damageEntity(par1DamageSource, par2 - this.lastDamage);
+                    this.lastDamage = par2;
                     flag = false;
                 }
                 else
                 {
-                    this.field_110153_bc = par2;
-                    this.prevHealth = this.func_110143_aJ();
+                    this.lastDamage = par2;
+                    this.prevHealth = this.getHealth();
                     this.hurtResistantTime = this.maxHurtResistantTime;
                     this.damageEntity(par1DamageSource, par2);
                     this.hurtTime = this.maxHurtTime = 10;
@@ -932,7 +1053,7 @@
                     }
                 }
 
-                if (this.func_110143_aJ() <= 0.0F)
+                if (this.getHealth() <= 0.0F)
                 {
                     if (flag)
                     {
@@ -976,6 +1097,7 @@
      */
     public void onDeath(DamageSource par1DamageSource)
     {
+        if (ForgeHooks.onLivingDeath(this, par1DamageSource)) return;
         Entity entity = par1DamageSource.getEntity();
         EntityLivingBase entitylivingbase = this.func_94060_bK();
 
@@ -1000,24 +1122,54 @@
                 i = EnchantmentHelper.getLootingModifier((EntityLivingBase)entity);
             }
 
+            captureDrops = true;
+            capturedDrops.clear();
+            int j = 0;
+
             if (!this.isChild() && this.worldObj.getGameRules().getGameRuleBooleanValue("doMobLoot"))
             {
                 this.dropFewItems(this.recentlyHit > 0, i);
                 this.dropEquipment(this.recentlyHit > 0, i);
 
-                if (this.recentlyHit > 0)
-                {
-                    int j = this.rand.nextInt(200) - i;
+                /*if (this.recentlyHit > 0)   // CraftBukkit - move rare item drop call to dropDeathLoot
+                {
+                    j = this.rand.nextInt(200) - i;
 
                     if (j < 5)
                     {
                         this.dropRareDrop(j <= 0 ? 1 : 0);
                     }
+                }*/
+            }
+            else // CraftBukkit
+            {
+                CraftEventFactory.callEntityDeathEvent(this); // CraftBukkit
+            }
+            
+            captureDrops = false;
+
+            if (!ForgeHooks.onLivingDrops(this, par1DamageSource, capturedDrops, i, recentlyHit > 0, j))
+            {
+                // MCPC+ start - if death event has not been called, capture drops for plugins then fire event
+                if (!this.calledDeathEvent)
+                {
+                    java.util.List<org.bukkit.inventory.ItemStack> loot = new java.util.ArrayList<org.bukkit.inventory.ItemStack>();
+                    for (EntityItem item : capturedDrops)
+                    {
+                        loot.add(CraftItemStack.asCraftMirror(item.getEntityItem()));
+                    }
+                    CraftEventFactory.callEntityDeathEvent(this, loot);
+                }
+                // MCPC+ end
+                for (EntityItem item : capturedDrops)
+                {
+                    worldObj.spawnEntityInWorld(item);
                 }
             }
         }
 
         this.worldObj.setEntityState(this, (byte)3);
+        this.calledDeathEvent = false;
     }
 
     /**
@@ -1030,7 +1182,7 @@
      */
     public void knockBack(Entity par1Entity, float par2, double par3, double par5)
     {
-        if (this.rand.nextDouble() >= this.func_110148_a(SharedMonsterAttributes.field_111266_c).func_111126_e())
+        if (this.rand.nextDouble() >= this.getEntityAttribute(SharedMonsterAttributes.knockbackResistance).getAttributeValue())
         {
             this.isAirBorne = true;
             float f1 = MathHelper.sqrt_double(par3 * par3 + par5 * par5);
@@ -1065,7 +1217,12 @@
         return "damage.hit";
     }
 
-    protected void dropRareDrop(int par1) {}
+    // CraftBukkit start - Change return type to ItemStack
+    protected ItemStack dropRareDrop(int i)
+    {
+        return null;
+    }
+    // CraftBukkit end
 
     /**
      * Drop 0-2 items of this living's type. @param par1 - Whether this entity has recently been hit by a player. @param
@@ -1082,7 +1239,7 @@
         int j = MathHelper.floor_double(this.boundingBox.minY);
         int k = MathHelper.floor_double(this.posZ);
         int l = this.worldObj.getBlockId(i, j, k);
-        return l == Block.ladder.blockID || l == Block.vine.blockID;
+        return ForgeHooks.isLivingOnLadder(Block.blocksList[l], worldObj, i, j, k, this);
     }
 
     /**
@@ -1090,7 +1247,7 @@
      */
     public boolean isEntityAlive()
     {
-        return !this.isDead && this.func_110143_aJ() > 0.0F;
+        return !this.isDead && this.getHealth() > 0.0F;
     }
 
     /**
@@ -1098,10 +1255,32 @@
      */
     protected void fall(float par1)
     {
+        par1 = ForgeHooks.onLivingFall(this, par1);
+        if (par1 <= 0) return;
         super.fall(par1);
         PotionEffect potioneffect = this.getActivePotionEffect(Potion.jump);
         float f1 = potioneffect != null ? (float)(potioneffect.getAmplifier() + 1) : 0.0F;
-        int i = MathHelper.ceiling_float_int(par1 - 3.0F - f1);
+        // CraftBukkit start
+        float i = MathHelper.ceiling_float_int(par1 - 3.0F - f1);
+
+        if (i > 0)
+        {
+            EntityDamageEvent event = CraftEventFactory.callEntityDamageEvent(null, this, EntityDamageEvent.DamageCause.FALL, i);
+
+            if (event.isCancelled())
+            {
+                return;
+            }
+
+            i = (float) event.getDamage();
+
+            if (i > 0)
+            {
+                this.getBukkitEntity().setLastDamageCause(event);
+            }
+        }
+
+        // CraftBukkit end
 
         if (i > 0)
         {
@@ -1231,18 +1410,20 @@
     {
         if (!this.isEntityInvulnerable())
         {
+            par2 = ForgeHooks.onLivingHurt(this, par1DamageSource, par2);
+            if (par2 <= 0) return;
             par2 = this.applyArmorCalculations(par1DamageSource, par2);
             par2 = this.applyPotionDamageCalculations(par1DamageSource, par2);
             float f1 = par2;
-            par2 = Math.max(par2 - this.func_110139_bj(), 0.0F);
-            this.func_110149_m(this.func_110139_bj() - (f1 - par2));
+            par2 = Math.max(par2 - this.getAbsorptionAmount(), 0.0F);
+            this.setAbsorptionAmount(this.getAbsorptionAmount() - (f1 - par2));
 
             if (par2 != 0.0F)
             {
-                float f2 = this.func_110143_aJ();
-                this.setEntityHealth(f2 - par2);
+                float f2 = this.getHealth();
+                this.setHealth(f2 - par2);
                 this.func_110142_aN().func_94547_a(par1DamageSource, f2, par2);
-                this.func_110149_m(this.func_110139_bj() - par2);
+                this.setAbsorptionAmount(this.getAbsorptionAmount() - par2);
             }
         }
     }
@@ -1257,9 +1438,9 @@
         return (EntityLivingBase)(this._combatTracker.func_94550_c() != null ? this._combatTracker.func_94550_c() : (this.attackingPlayer != null ? this.attackingPlayer : (this.entityLivingToAttack != null ? this.entityLivingToAttack : null)));
     }
 
-    public final float func_110138_aP()
-    {
-        return (float)this.func_110148_a(SharedMonsterAttributes.field_111267_a).func_111126_e();
+    public final float getMaxHealth()
+    {
+        return (float)this.getEntityAttribute(SharedMonsterAttributes.maxHealth).getAttributeValue();
     }
 
     /**
@@ -1292,9 +1473,20 @@
      */
     public void swingItem()
     {
-        if (!this.isSwingInProgress || this.field_110158_av >= this.getArmSwingAnimationEnd() / 2 || this.field_110158_av < 0)
-        {
-            this.field_110158_av = -1;
+        ItemStack stack = this.getHeldItem();
+
+        if (stack != null && stack.getItem() != null)
+        {
+            Item item = stack.getItem();
+            if (item.onEntitySwing(this, stack))
+            {
+                return;
+            }
+        }
+
+        if (!this.isSwingInProgress || this.swingProgressInt >= this.getArmSwingAnimationEnd() / 2 || this.swingProgressInt < 0)
+        {
+            this.swingProgressInt = -1;
             this.isSwingInProgress = true;
 
             if (this.worldObj instanceof WorldServer)
@@ -1309,7 +1501,7 @@
     {
         if (par1 == 2)
         {
-            this.limbYaw = 1.5F;
+            this.limbSwingAmount = 1.5F;
             this.hurtResistantTime = this.maxHurtResistantTime;
             this.hurtTime = this.maxHurtTime = 10;
             this.attackedAtYaw = 0.0F;
@@ -1319,7 +1511,7 @@
         else if (par1 == 3)
         {
             this.playSound(this.getDeathSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
-            this.setEntityHealth(0.0F);
+            this.setHealth(0.0F);
             this.onDeath(DamageSource.generic);
         }
         else
@@ -1345,35 +1537,35 @@
 
         if (this.isSwingInProgress)
         {
-            ++this.field_110158_av;
-
-            if (this.field_110158_av >= i)
-            {
-                this.field_110158_av = 0;
+            ++this.swingProgressInt;
+
+            if (this.swingProgressInt >= i)
+            {
+                this.swingProgressInt = 0;
                 this.isSwingInProgress = false;
             }
         }
         else
         {
-            this.field_110158_av = 0;
-        }
-
-        this.swingProgress = (float)this.field_110158_av / (float)i;
-    }
-
-    public AttributeInstance func_110148_a(Attribute par1Attribute)
-    {
-        return this.func_110140_aT().func_111151_a(par1Attribute);
-    }
-
-    public BaseAttributeMap func_110140_aT()
-    {
-        if (this.field_110155_d == null)
-        {
-            this.field_110155_d = new ServersideAttributeMap();
-        }
-
-        return this.field_110155_d;
+            this.swingProgressInt = 0;
+        }
+
+        this.swingProgress = (float)this.swingProgressInt / (float)i;
+    }
+
+    public AttributeInstance getEntityAttribute(Attribute par1Attribute)
+    {
+        return this.getAttributeMap().getAttributeInstance(par1Attribute);
+    }
+
+    public BaseAttributeMap getAttributeMap()
+    {
+        if (this.attributeMap == null)
+        {
+            this.attributeMap = new ServersideAttributeMap();
+        }
+
+        return this.attributeMap;
     }
 
     /**
@@ -1405,16 +1597,16 @@
     public void setSprinting(boolean par1)
     {
         super.setSprinting(par1);
-        AttributeInstance attributeinstance = this.func_110148_a(SharedMonsterAttributes.field_111263_d);
-
-        if (attributeinstance.func_111127_a(field_110156_b) != null)
-        {
-            attributeinstance.func_111124_b(field_110157_c);
+        AttributeInstance attributeinstance = this.getEntityAttribute(SharedMonsterAttributes.movementSpeed);
+
+        if (attributeinstance.getModifier(sprintingSpeedBoostModifierUUID) != null)
+        {
+            attributeinstance.removeModifier(sprintingSpeedBoostModifier);
         }
 
         if (par1)
         {
-            attributeinstance.func_111121_a(field_110157_c);
+            attributeinstance.applyModifier(sprintingSpeedBoostModifier);
         }
     }
 
@@ -1441,7 +1633,7 @@
      */
     protected boolean isMovementBlocked()
     {
-        return this.func_110143_aJ() <= 0.0F;
+        return this.getHealth() <= 0.0F;
     }
 
     /**
@@ -1452,7 +1644,10 @@
         this.setLocationAndAngles(par1, par3, par5, this.rotationYaw, this.rotationPitch);
     }
 
-    public void func_110145_l(Entity par1Entity)
+    /**
+     * Moves the entity to a position out of the way of its mount.
+     */
+    public void dismountEntity(Entity par1Entity)
     {
         double d0 = par1Entity.posX;
         double d1 = par1Entity.boundingBox.minY + (double)par1Entity.height;
@@ -1526,6 +1721,7 @@
         }
 
         this.isAirBorne = true;
+        ForgeHooks.onLivingJump(this);
     }
 
     /**
@@ -1673,7 +1869,7 @@
             this.motionZ *= (double)f2;
         }
 
-        this.prevLimbYaw = this.limbYaw;
+        this.prevLimbSwingAmount = this.limbSwingAmount;
         d0 = this.posX - this.prevPosX;
         double d1 = this.posZ - this.prevPosZ;
         float f6 = MathHelper.sqrt_double(d0 * d0 + d1 * d1) * 4.0F;
@@ -1683,8 +1879,8 @@
             f6 = 1.0F;
         }
 
-        this.limbYaw += (f6 - this.limbYaw) * 0.4F;
-        this.limbSwing += this.limbYaw;
+        this.limbSwingAmount += (f6 - this.limbSwingAmount) * 0.4F;
+        this.limbSwing += this.limbSwingAmount;
     }
 
     /**
@@ -1713,7 +1909,7 @@
 
     public boolean attackEntityAsMob(Entity par1Entity)
     {
-        this.func_130011_c(par1Entity);
+        this.setLastAttacker(par1Entity);
         return false;
     }
 
@@ -1730,6 +1926,11 @@
      */
     public void onUpdate()
     {
+        if (ForgeHooks.onLivingUpdate(this))
+        {
+            return;
+        }
+
         super.onUpdate();
 
         if (!this.worldObj.isRemote)
@@ -1762,12 +1963,12 @@
 
                     if (itemstack != null)
                     {
-                        this.field_110155_d.func_111148_a(itemstack.func_111283_C());
+                        this.attributeMap.removeAttributeModifiers(itemstack.getAttributeModifiers());
                     }
 
                     if (itemstack1 != null)
                     {
-                        this.field_110155_d.func_111147_b(itemstack1.func_111283_C());
+                        this.attributeMap.applyAttributeModifiers(itemstack1.getAttributeModifiers());
                     }
 
                     this.previousEquipment[j] = itemstack1 == null ? null : itemstack1.copy();
@@ -1788,7 +1989,7 @@
         {
             f3 = 1.0F;
             f2 = (float)Math.sqrt((double)f) * 3.0F;
-            f1 = (float)Math.atan2(d1, d0) * 180.0F / (float)Math.PI - 90.0F;
+            f1 = (float) org.bukkit.craftbukkit.TrigMath.atan2(d1, d0) * 180.0F / (float)Math.PI - 90.0F;  // CraftBukkit - Math -> TrigMath
         }
 
         if (this.swingProgress > 0.0F)
@@ -1898,7 +2099,7 @@
         {
             double d0 = this.posX + (this.newPosX - this.posX) / (double)this.newPosRotationIncrements;
             double d1 = this.posY + (this.newPosY - this.posY) / (double)this.newPosRotationIncrements;
-            double d2 = this.posZ + (this.field_110152_bk - this.posZ) / (double)this.newPosRotationIncrements;
+            double d2 = this.posZ + (this.newPosZ - this.posZ) / (double)this.newPosRotationIncrements;
             double d3 = MathHelper.wrapAngleTo180_double(this.newRotationYaw - (double)this.rotationYaw);
             this.rotationYaw = (float)((double)this.rotationYaw + d3 / (double)this.newPosRotationIncrements);
             this.rotationPitch = (float)((double)this.rotationPitch + (this.newRotationPitch - (double)this.rotationPitch) / (double)this.newPosRotationIncrements);
@@ -2006,6 +2207,15 @@
             {
                 Entity entity = (Entity)list.get(i);
 
+                // TODO better check now?
+                // CraftBukkit start - Only handle mob (non-player) collisions every other tick
+                if (entity instanceof EntityLivingBase && !(this instanceof EntityPlayerMP) && this.ticksExisted % 2 == 0)
+                {
+                    continue;
+                }
+
+                // CraftBukkit end
+
                 if (entity.canBePushed())
                 {
                     this.collideWithEntity(entity);
@@ -2041,7 +2251,7 @@
         this.yOffset = 0.0F;
         this.newPosX = par1;
         this.newPosY = par3;
-        this.field_110152_bk = par5;
+        this.newPosZ = par5;
         this.newRotationYaw = (double)par7;
         this.newRotationPitch = (double)par8;
         this.newPosRotationIncrements = par9;
@@ -2218,7 +2428,7 @@
      */
     protected void setBeenAttacked()
     {
-        this.velocityChanged = this.rand.nextDouble() >= this.func_110148_a(SharedMonsterAttributes.field_111266_c).func_111126_e();
+        this.velocityChanged = this.rand.nextDouble() >= this.getEntityAttribute(SharedMonsterAttributes.knockbackResistance).getAttributeValue();
     }
 
     public float getRotationYawHead()
@@ -2236,12 +2446,12 @@
         this.rotationYawHead = par1;
     }
 
-    public float func_110139_bj()
+    public float getAbsorptionAmount()
     {
         return this.field_110151_bq;
     }
 
-    public void func_110149_m(float par1)
+    public void setAbsorptionAmount(float par1)
     {
         if (par1 < 0.0F)
         {
@@ -2256,13 +2466,54 @@
         return null;
     }
 
-    public boolean func_142014_c(EntityLivingBase par1EntityLivingBase)
-    {
-        return this.func_142012_a(par1EntityLivingBase.getTeam());
-    }
-
-    public boolean func_142012_a(Team par1Team)
-    {
-        return this.getTeam() != null ? this.getTeam().func_142054_a(par1Team) : false;
+    public boolean isOnSameTeam(EntityLivingBase par1EntityLivingBase)
+    {
+        return this.isOnTeam(par1EntityLivingBase.getTeam());
+    }
+
+    /**
+     * Returns true if the entity is on a specific team.
+     */
+    public boolean isOnTeam(Team par1Team)
+    {
+        return this.getTeam() != null ? this.getTeam().isSameTeam(par1Team) : false;
+    }
+
+    /***
+     * Removes all potion effects that have curativeItem as a curative item for its effect
+     * @param curativeItem The itemstack we are using to cure potion effects
+     */
+    public void curePotionEffects(ItemStack curativeItem)
+    {
+        Iterator<Integer> potionKey = activePotionsMap.keySet().iterator();
+
+        if (worldObj.isRemote)
+        {
+            return;
+        }
+
+        while (potionKey.hasNext())
+        {
+            Integer key = potionKey.next();
+            PotionEffect effect = (PotionEffect)activePotionsMap.get(key);
+
+            if (effect.isCurativeItem(curativeItem))
+            {
+                potionKey.remove();
+                onFinishedPotionEffect(effect);
+            }
+        }
+    }
+
+    /**
+     * Returns true if the entity's rider (EntityPlayer) should face forward when mounted.
+     * currently only used in vanilla code by pigs.
+     *
+     * @param player The player who is riding the entity.
+     * @return If the player should orient the same direction as this entity.
+     */
+    public boolean shouldRiderFaceForward(EntityPlayer player)
+    {
+        return this instanceof EntityPig;
     }
 }
