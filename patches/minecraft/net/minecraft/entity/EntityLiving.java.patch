--- ../src_base/minecraft/net/minecraft/entity/EntityLiving.java
+++ ../src_work/minecraft/net/minecraft/entity/EntityLiving.java
@@ -19,6 +19,7 @@
 import net.minecraft.entity.monster.IMob;
 import net.minecraft.entity.passive.EntityTameable;
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemArmor;
 import net.minecraft.item.ItemStack;
@@ -31,6 +32,16 @@
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
+import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.Event.Result;
+import net.minecraftforge.event.ForgeEventFactory;
+import net.minecraftforge.event.entity.living.LivingSpawnEvent.AllowDespawn;
+// CraftBukkit start
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityUnleashEvent;
+import org.bukkit.event.entity.EntityUnleashEvent.UnleashReason;
+// CraftBukkit end
 
 public abstract class EntityLiving extends EntityLivingBase
 {
@@ -57,13 +68,13 @@
     private ItemStack[] equipment = new ItemStack[5];
 
     /** Chances for each equipment piece from dropping when this entity dies. */
-    protected float[] equipmentDropChances = new float[5];
+    public float[] equipmentDropChances = new float[5]; // CraftBukkit - protected -> public
 
     /** Whether this entity can pick up items from the ground. */
-    private boolean canPickUpLoot;
+    public boolean canPickUpLoot; // CraftBukkit - private -> public
 
     /** Whether this entity should NOT despawn. */
-    private boolean persistenceRequired;
+    public boolean persistenceRequired = !canDespawn(); // CraftBukkit - private -> public
     protected float defaultPitch;
 
     /** This entity's current target. */
@@ -141,6 +152,7 @@
     public void setAttackTarget(EntityLivingBase par1EntityLivingBase)
     {
         this.attackTarget = par1EntityLivingBase;
+        ForgeHooks.onLivingSetAttackTarget(this, par1EntityLivingBase);
     }
 
     /**
@@ -291,6 +303,8 @@
      */
     protected void dropFewItems(boolean par1, int par2)
     {
+        // CraftBukkit start - Whole method
+        List<org.bukkit.inventory.ItemStack> loot = new java.util.ArrayList<org.bukkit.inventory.ItemStack>();
         int j = this.getDropItemId();
 
         if (j > 0)
@@ -302,11 +316,30 @@
                 k += this.rand.nextInt(par2 + 1);
             }
 
-            for (int l = 0; l < k; ++l)
-            {
-                this.dropItem(j, 1);
-            }
-        }
+            if (k > 0)
+            {
+                loot.add(new org.bukkit.inventory.ItemStack(j, k));
+            }
+        }
+
+        // Determine rare item drops and add them to the loot
+        if (this.recentlyHit > 0)
+        {
+            int k = this.rand.nextInt(200) - par2;
+
+            if (k < 5)
+            {
+                ItemStack itemstack = this.dropRareDrop(k <= 0 ? 1 : 0);
+
+                if (itemstack != null)
+                {
+                    loot.add(org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(itemstack));
+                }
+            }
+        }
+
+        CraftEventFactory.callEntityDeathEvent(this, loot); // raise event even for those times when the entity does not drop loot
+        // CraftBukkit end
     }
 
     /**
@@ -374,6 +407,22 @@
         super.readEntityFromNBT(par1NBTTagCompound);
         this.setCanPickUpLoot(par1NBTTagCompound.getBoolean("CanPickUpLoot"));
         this.persistenceRequired = par1NBTTagCompound.getBoolean("PersistenceRequired");
+        // CraftBukkit start - If looting or persistence is false only use it if it was set after we started using it
+        boolean data = par1NBTTagCompound.getBoolean("CanPickUpLoot");
+
+        if (isLevelAtLeast(par1NBTTagCompound, 1) || data)
+        {
+            this.canPickUpLoot = data;
+        }
+
+        data = par1NBTTagCompound.getBoolean("PersistenceRequired");
+
+        if (isLevelAtLeast(par1NBTTagCompound, 1) || data)
+        {
+            this.persistenceRequired = data;
+        }
+
+        // CraftBukkit end
 
         if (par1NBTTagCompound.hasKey("CustomName") && par1NBTTagCompound.getString("CustomName").length() > 0)
         {
@@ -547,9 +596,21 @@
      */
     protected void despawnEntity()
     {
+        Result result = null;
         if (this.persistenceRequired)
         {
             this.entityAge = 0;
+        }
+        else if ((this.entityAge & 0x1F) == 0x1F && (result = ForgeEventFactory.canEntityDespawn(this)) != Result.DEFAULT)
+        {
+            if (result == Result.DENY)
+            {
+                this.entityAge = 0;
+            }
+            else
+            {
+                this.setDead();
+            }
         }
         else
         {
@@ -562,12 +623,12 @@
                 double d2 = entityplayer.posZ - this.posZ;
                 double d3 = d0 * d0 + d1 * d1 + d2 * d2;
 
-                if (this.canDespawn() && d3 > 16384.0D)
+                if (d3 > 16384.0D)   // CraftBukkit - remove isTypeNotPersistent() check
                 {
                     this.setDead();
                 }
 
-                if (this.entityAge > 600 && this.rand.nextInt(800) == 0 && d3 > 1024.0D && this.canDespawn())
+                if (this.entityAge > 600 && this.rand.nextInt(800) == 0 && d3 > 1024.0D)   // CraftBukkit - remove isTypeNotPersistent() check
                 {
                     this.setDead();
                 }
@@ -726,8 +787,6 @@
         return this.worldObj.checkNoEntityCollision(this.boundingBox) && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox).isEmpty() && !this.worldObj.isAnyLiquid(this.boundingBox);
     }
 
-    @SideOnly(Side.CLIENT)
-
     /**
      * Returns render size modifier
      */
@@ -1115,6 +1174,14 @@
     {
         if (this.getLeashed() && this.getLeashedToEntity() == par1EntityPlayer)
         {
+            // CraftBukkit start
+            if (CraftEventFactory.callPlayerUnleashEntityEvent(this, par1EntityPlayer).isCancelled())
+            {
+                ((EntityPlayerMP) par1EntityPlayer).playerNetServerHandler.sendPacketToPlayer(new Packet39AttachEntity(1, this, this.getLeashedToEntity()));
+                return false;
+            }
+
+            // CraftBukkit end
             this.clearLeashed(true, !par1EntityPlayer.capabilities.isCreativeMode);
             return true;
         }
@@ -1126,6 +1193,14 @@
             {
                 if (!(this instanceof EntityTameable) || !((EntityTameable)this).isTamed())
                 {
+                    // CraftBukkit start
+                    if (CraftEventFactory.callPlayerLeashEntityEvent(this, par1EntityPlayer, par1EntityPlayer).isCancelled())
+                    {
+                        ((EntityPlayerMP) par1EntityPlayer).playerNetServerHandler.sendPacketToPlayer(new Packet39AttachEntity(1, this, this.getLeashedToEntity()));
+                        return false;
+                    }
+
+                    // CraftBukkit end
                     this.setLeashedToEntity(par1EntityPlayer, true);
                     --itemstack.stackSize;
                     return true;
@@ -1133,6 +1208,14 @@
 
                 if (par1EntityPlayer.getCommandSenderName().equalsIgnoreCase(((EntityTameable)this).getOwnerName()))
                 {
+                    // CraftBukkit start
+                    if (CraftEventFactory.callPlayerLeashEntityEvent(this, par1EntityPlayer, par1EntityPlayer).isCancelled())
+                    {
+                        ((EntityPlayerMP) par1EntityPlayer).playerNetServerHandler.sendPacketToPlayer(new Packet39AttachEntity(1, this, this.getLeashedToEntity()));
+                        return false;
+                    }
+
+                    // CraftBukkit end
                     this.setLeashedToEntity(par1EntityPlayer, true);
                     --itemstack.stackSize;
                     return true;
@@ -1162,6 +1245,7 @@
         {
             if (this.leashedToEntity == null || this.leashedToEntity.isDead)
             {
+                this.worldObj.getServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), UnleashReason.HOLDER_GONE)); // CraftBukkit
                 this.clearLeashed(true, true);
             }
         }
@@ -1256,10 +1340,14 @@
             }
             else
             {
+                this.worldObj.getServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), UnleashReason.UNKNOWN)); // CraftBukkit
                 this.clearLeashed(false, true);
             }
         }
 
         this.field_110170_bx = null;
     }
+    public boolean func_70692_ba_CodeFix_Public(){
+        return canDespawn();
+    }
 }
