--- ../src-base/minecraft/net/minecraft/entity/item/EntityMinecart.java
+++ ../src-work/minecraft/net/minecraft/entity/item/EntityMinecart.java
@@ -23,6 +23,10 @@
 import net.minecraft.util.Vec3;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
+import net.minecraftforge.common.IMinecartCollisionHandler;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.entity.minecart.MinecartCollisionEvent;
+import net.minecraftforge.event.entity.minecart.MinecartUpdateEvent;
 
 public abstract class EntityMinecart extends Entity
 {
@@ -43,6 +47,20 @@
     private double field_70506_as;
     private static final String __OBFID = "CL_00001670";
 
+    /* Forge: Minecart Compatibility Layer Integration. */
+    public static float defaultMaxSpeedAirLateral = 0.4f;
+    public static float defaultMaxSpeedAirVertical = -1f;
+    public static double defaultDragAir = 0.94999998807907104D;
+    protected boolean canUseRail = true;
+    protected boolean canBePushed = true;
+    private static IMinecartCollisionHandler collisionHandler = null;
+
+    /* Instance versions of the above physics properties */
+    private float currentSpeedRail = getMaxCartSpeedOnRail();
+    protected float maxSpeedAirLateral = defaultMaxSpeedAirLateral;
+    protected float maxSpeedAirVertical = defaultMaxSpeedAirVertical;
+    protected double dragAir = defaultDragAir;
+
     public EntityMinecart(World p_i1712_1_)
     {
         super(p_i1712_1_);
@@ -89,17 +107,25 @@
 
     public AxisAlignedBB func_70114_g(Entity p_70114_1_)
     {
+        if (getCollisionHandler() != null)
+        {
+            return getCollisionHandler().getCollisionBox(this, p_70114_1_);
+        }
         return p_70114_1_.func_70104_M() ? p_70114_1_.field_70121_D : null;
     }
 
     public AxisAlignedBB func_70046_E()
     {
+        if (getCollisionHandler() != null)
+        {
+            return getCollisionHandler().getBoundingBox(this);
+        }
         return null;
     }
 
     public boolean func_70104_M()
     {
-        return true;
+        return canBePushed;
     }
 
     public EntityMinecart(World p_i1713_1_, double p_i1713_2_, double p_i1713_4_, double p_i1713_6_)
@@ -302,19 +328,20 @@
             double d2 = 0.0078125D;
             Block block = this.field_70170_p.func_147439_a(l, i, i1);
 
-            if (BlockRailBase.func_150051_a(block))
+            if (canUseRail() && BlockRailBase.func_150051_a(block))
             {
-                int j = this.field_70170_p.func_72805_g(l, i, i1);
-                this.func_145821_a(l, i, i1, d0, d2, block, j);
+                float railMaxSpeed = ((BlockRailBase)block).getRailMaxSpeed(field_70170_p, this, l, i, i1);
+                double maxSpeed = Math.min(railMaxSpeed, getCurrentCartSpeedCapOnRail());
+                this.func_145821_a(l, i, i1, maxSpeed, getSlopeAdjustment(), block, ((BlockRailBase)block).getBasicRailMetadata(field_70170_p, this, l, i, i1));
 
                 if (block == Blocks.field_150408_cc)
                 {
-                    this.func_96095_a(l, i, i1, (j & 8) != 0);
+                    this.func_96095_a(l, i, i1, (field_70170_p.func_72805_g(l, i, i1) & 8) != 0);
                 }
             }
             else
             {
-                this.func_94088_b(d0);
+                this.func_94088_b(field_70122_E ? d0 : getMaxSpeedAirLateral());
             }
 
             this.func_145775_I();
@@ -341,8 +368,19 @@
             }
 
             this.func_70101_b(this.field_70177_z, this.field_70125_A);
-            List list = this.field_70170_p.func_72839_b(this, this.field_70121_D.func_72314_b(0.20000000298023224D, 0.0D, 0.20000000298023224D));
 
+            AxisAlignedBB box;
+            if (getCollisionHandler() != null)
+            {
+                box = getCollisionHandler().getMinecartCollisionBox(this);
+            }
+            else
+            {
+                box = field_70121_D.func_72314_b(0.2D, 0.0D, 0.2D);
+            }
+
+            List list = this.field_70170_p.func_72839_b(this, box);
+
             if (list != null && !list.isEmpty())
             {
                 for (int k = 0; k < list.size(); ++k)
@@ -365,6 +403,8 @@
 
                 this.field_70153_n = null;
             }
+
+            MinecraftForge.EVENT_BUS.post(new MinecartUpdateEvent(this, l, i, i1));
         }
     }
 
@@ -392,6 +432,17 @@
             this.field_70179_y = p_94088_1_;
         }
 
+        double moveY = field_70181_x;
+        if(getMaxSpeedAirVertical() > 0 && field_70181_x > getMaxSpeedAirVertical())
+        {
+            moveY = getMaxSpeedAirVertical();
+            if(Math.abs(field_70159_w) < 0.3f && Math.abs(field_70179_y) < 0.3f)
+            {
+                moveY = 0.15f;
+                field_70181_x = moveY;
+            }
+        }
+
         if (this.field_70122_E)
         {
             this.field_70159_w *= 0.5D;
@@ -399,13 +450,13 @@
             this.field_70179_y *= 0.5D;
         }
 
-        this.func_70091_d(this.field_70159_w, this.field_70181_x, this.field_70179_y);
+        this.func_70091_d(this.field_70159_w, moveY, this.field_70179_y);
 
         if (!this.field_70122_E)
         {
-            this.field_70159_w *= 0.949999988079071D;
-            this.field_70181_x *= 0.949999988079071D;
-            this.field_70179_y *= 0.949999988079071D;
+            this.field_70159_w *= getDragAir();
+            this.field_70181_x *= getDragAir();
+            this.field_70179_y *= getDragAir();
         }
     }
 
@@ -419,7 +470,7 @@
 
         if (p_145821_8_ == Blocks.field_150318_D)
         {
-            flag = (p_145821_9_ & 8) != 0;
+            flag = (field_70170_p.func_72805_g(p_145821_1_, p_145821_2_, p_145821_3_) & 8) != 0;
             flag1 = !flag;
         }
 
@@ -498,7 +549,7 @@
             }
         }
 
-        if (flag1)
+        if (flag1 && shouldDoRailFunctions())
         {
             d7 = Math.sqrt(this.field_70159_w * this.field_70159_w + this.field_70179_y * this.field_70179_y);
 
@@ -546,37 +597,9 @@
         this.field_70165_t = d8 + d2 * d7;
         this.field_70161_v = d9 + d3 * d7;
         this.func_70107_b(this.field_70165_t, this.field_70163_u + (double)this.field_70129_M, this.field_70161_v);
-        d12 = this.field_70159_w;
-        d13 = this.field_70179_y;
 
-        if (this.field_70153_n != null)
-        {
-            d12 *= 0.75D;
-            d13 *= 0.75D;
-        }
+        moveMinecartOnRail(p_145821_1_, p_145821_2_, p_145821_3_, p_145821_4_);
 
-        if (d12 < -p_145821_4_)
-        {
-            d12 = -p_145821_4_;
-        }
-
-        if (d12 > p_145821_4_)
-        {
-            d12 = p_145821_4_;
-        }
-
-        if (d13 < -p_145821_4_)
-        {
-            d13 = -p_145821_4_;
-        }
-
-        if (d13 > p_145821_4_)
-        {
-            d13 = p_145821_4_;
-        }
-
-        this.func_70091_d(d12, 0.0D, d13);
-
         if (aint[0][1] != 0 && MathHelper.func_76128_c(this.field_70165_t) - p_145821_1_ == aint[0][0] && MathHelper.func_76128_c(this.field_70161_v) - p_145821_3_ == aint[0][2])
         {
             this.func_70107_b(this.field_70165_t, this.field_70163_u + (double)aint[0][1], this.field_70161_v);
@@ -613,8 +636,13 @@
             this.field_70179_y = d6 * (double)(i1 - p_145821_3_);
         }
 
-        if (flag)
+        if(shouldDoRailFunctions())
         {
+            ((BlockRailBase)p_145821_8_).onMinecartPass(field_70170_p, this, p_145821_1_, p_145821_2_, p_145821_3_);
+        }
+
+        if (flag && shouldDoRailFunctions())
+        {
             double d15 = Math.sqrt(this.field_70159_w * this.field_70159_w + this.field_70179_y * this.field_70179_y);
 
             if (d15 > 0.01D)
@@ -684,13 +712,8 @@
         }
         else
         {
-            int l = this.field_70170_p.func_72805_g(i, j, k);
+            int l = ((BlockRailBase)block).getBasicRailMetadata(field_70170_p, this, i, j, k);
 
-            if (((BlockRailBase)block).func_150050_e())
-            {
-                l &= 7;
-            }
-
             p_70495_3_ = (double)j;
 
             if (l >= 2 && l <= 5)
@@ -735,14 +758,9 @@
 
         if (BlockRailBase.func_150051_a(block))
         {
-            int l = this.field_70170_p.func_72805_g(i, j, k);
+            int l = ((BlockRailBase)block).getBasicRailMetadata(field_70170_p, this, i, j, k);
             p_70489_3_ = (double)j;
 
-            if (((BlockRailBase)block).func_150050_e())
-            {
-                l &= 7;
-            }
-
             if (l >= 2 && l <= 5)
             {
                 p_70489_3_ = (double)(j + 1);
@@ -838,11 +856,17 @@
 
     public void func_70108_f(Entity p_70108_1_)
     {
+        MinecraftForge.EVENT_BUS.post(new MinecartCollisionEvent(this, p_70108_1_));
+        if (getCollisionHandler() != null)
+        {
+            getCollisionHandler().onEntityCollision(this, p_70108_1_);
+            return;
+        }
         if (!this.field_70170_p.field_72995_K)
         {
             if (p_70108_1_ != this.field_70153_n)
             {
-                if (p_70108_1_ instanceof EntityLivingBase && !(p_70108_1_ instanceof EntityPlayer) && !(p_70108_1_ instanceof EntityIronGolem) && this.func_94087_l() == 0 && this.field_70159_w * this.field_70159_w + this.field_70179_y * this.field_70179_y > 0.01D && this.field_70153_n == null && p_70108_1_.field_70154_o == null)
+                if (p_70108_1_ instanceof EntityLivingBase && !(p_70108_1_ instanceof EntityPlayer) && !(p_70108_1_ instanceof EntityIronGolem) && canBeRidden()               && this.field_70159_w * this.field_70159_w + this.field_70179_y * this.field_70179_y > 0.01D && this.field_70153_n == null && p_70108_1_.field_70154_o == null)
                 {
                     p_70108_1_.func_70078_a(this);
                 }
@@ -888,7 +912,7 @@
                         double d7 = p_70108_1_.field_70159_w + this.field_70159_w;
                         double d8 = p_70108_1_.field_70179_y + this.field_70179_y;
 
-                        if (((EntityMinecart)p_70108_1_).func_94087_l() == 2 && this.func_94087_l() != 2)
+                        if (((EntityMinecart)p_70108_1_).isPoweredCart() && !isPoweredCart())
                         {
                             this.field_70159_w *= 0.20000000298023224D;
                             this.field_70179_y *= 0.20000000298023224D;
@@ -896,7 +920,7 @@
                             p_70108_1_.field_70159_w *= 0.949999988079071D;
                             p_70108_1_.field_70179_y *= 0.949999988079071D;
                         }
-                        else if (((EntityMinecart)p_70108_1_).func_94087_l() != 2 && this.func_94087_l() == 2)
+                        else if (((EntityMinecart)p_70108_1_).isPoweredCart() && !isPoweredCart())
                         {
                             p_70108_1_.field_70159_w *= 0.20000000298023224D;
                             p_70108_1_.field_70179_y *= 0.20000000298023224D;
@@ -1065,4 +1089,216 @@
     {
         return this.field_94102_c;
     }
+    /* =================================== FORGE START ===========================================*/
+    /**
+     * Moved to allow overrides.
+     * This code handles minecart movement and speed capping when on a rail.
+     */
+    public void moveMinecartOnRail(int x, int y, int z, double par4){
+        double d12 = this.field_70159_w;
+        double d13 = this.field_70179_y;
+
+        if (this.field_70153_n != null)
+        {
+            d12 *= 0.75D;
+            d13 *= 0.75D;
+        }
+
+        if (d12 < -par4)
+        {
+            d12 = -par4;
+        }
+
+        if (d12 > par4)
+        {
+            d12 = par4;
+        }
+
+        if (d13 < -par4)
+        {
+            d13 = -par4;
+        }
+
+        if (d13 > par4)
+        {
+            d13 = par4;
+        }
+
+        this.func_70091_d(d12, 0.0D, d13);
+    }
+
+    /**
+     * Gets the current global Minecart Collision handler if none
+     * is registered, returns null
+     * @return The collision handler or null
+     */
+    public static IMinecartCollisionHandler getCollisionHandler()
+    {
+        return collisionHandler;
+    }
+
+    /**
+     * Sets the global Minecart Collision handler, overwrites any
+     * that is currently set.
+     * @param handler The new handler
+     */
+    public static void setCollisionHandler(IMinecartCollisionHandler handler)
+    {
+        collisionHandler = handler;
+    }
+
+    /**
+     * This function returns an ItemStack that represents this cart.
+     * This should be an ItemStack that can be used by the player to place the cart,
+     * but is not necessary the item the cart drops when destroyed.
+     * @return An ItemStack that can be used to place the cart.
+     */
+    public ItemStack getCartItem()
+    {
+        if (this instanceof EntityMinecartFurnace)
+        {
+            return new ItemStack(Items.field_151109_aJ);
+        }
+        else if (this instanceof EntityMinecartChest)
+        {
+            return new ItemStack(Items.field_151108_aI);
+        }
+        else if (this instanceof EntityMinecartTNT)
+        {
+            return new ItemStack(Items.field_151142_bV);
+        }
+        else if (this instanceof EntityMinecartHopper)
+        {
+            return new ItemStack(Items.field_151140_bW);
+        }
+        else if (this instanceof EntityMinecartHopper)
+        {
+            return new ItemStack(Items.field_151095_cc);
+        }
+        return new ItemStack(Items.field_151143_au);
+    }
+
+    /**
+     * Returns true if this cart can currently use rails.
+     * This function is mainly used to gracefully detach a minecart from a rail.
+     * @return True if the minecart can use rails.
+     */
+    public boolean canUseRail()
+    {
+        return canUseRail;
+    }
+
+    /**
+     * Set whether the minecart can use rails.
+     * This function is mainly used to gracefully detach a minecart from a rail.
+     * @param use Whether the minecart can currently use rails.
+     */
+    public void setCanUseRail(boolean use)
+    {
+        canUseRail = use;
+    }
+
+    /**
+     * Return false if this cart should not call onMinecartPass() and should ignore Powered Rails.
+     * @return True if this cart should call onMinecartPass().
+     */
+    public boolean shouldDoRailFunctions()
+    {
+        return true;
+    }
+
+    /**
+     * Returns true if this cart is self propelled.
+     * @return True if powered.
+     */
+    public boolean isPoweredCart()
+    {
+        return func_94087_l()== 2;
+    }
+
+    /**
+     * Returns true if this cart can be ridden by an Entity.
+     * @return True if this cart can be ridden.
+     */
+    public boolean canBeRidden()
+    {
+        if(this instanceof EntityMinecartEmpty)
+        {
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * Getters/setters for physics variables
+     */
+
+    /**
+     * Returns the carts max speed when traveling on rails. Carts going faster
+     * than 1.1 cause issues with chunk loading. Carts cant traverse slopes or
+     * corners at greater than 0.5 - 0.6. This value is compared with the rails
+     * max speed and the carts current speed cap to determine the carts current
+     * max speed. A normal rail's max speed is 0.4.
+     *
+     * @return Carts max speed.
+     */
+    public float getMaxCartSpeedOnRail()
+    {
+        return 1.2f;
+    }
+
+    /**
+     * Returns the current speed cap for the cart when traveling on rails. This
+     * functions differs from getMaxCartSpeedOnRail() in that it controls
+     * current movement and cannot be overridden. The value however can never be
+     * higher than getMaxCartSpeedOnRail().
+     *
+     * @return
+     */
+    public final float getCurrentCartSpeedCapOnRail()
+    {
+        return currentSpeedRail;
+    }
+
+    public final void setCurrentCartSpeedCapOnRail(float value)
+    {
+        value = Math.min(value, getMaxCartSpeedOnRail());
+        currentSpeedRail = value;
+    }
+
+    public float getMaxSpeedAirLateral()
+    {
+        return maxSpeedAirLateral;
+    }
+
+    public void setMaxSpeedAirLateral(float value)
+    {
+        maxSpeedAirLateral = value;
+    }
+
+    public float getMaxSpeedAirVertical()
+    {
+        return maxSpeedAirVertical;
+    }
+
+    public void setMaxSpeedAirVertical(float value)
+    {
+        maxSpeedAirVertical = value;
+    }
+
+    public double getDragAir()
+    {
+        return dragAir;
+    }
+
+    public void setDragAir(double value)
+    {
+        dragAir = value;
+    }
+
+    public double getSlopeAdjustment()
+    {
+        return 0.0078125D;
+    }
+    /* =================================== FORGE END ===========================================*/
 }
