--- ../src_base/minecraft/net/minecraft/entity/item/EntityMinecart.java
+++ ../src_work/minecraft/net/minecraft/entity/item/EntityMinecart.java
@@ -21,6 +21,18 @@
 import net.minecraft.util.Vec3;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
+import net.minecraftforge.common.IMinecartCollisionHandler;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.entity.minecart.MinecartCollisionEvent;
+import net.minecraftforge.event.entity.minecart.MinecartUpdateEvent;
+// CraftBukkit start
+import org.bukkit.Location;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.vehicle.VehicleDamageEvent;
+import org.bukkit.event.vehicle.VehicleDestroyEvent;
+import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
+import org.bukkit.util.Vector;
+// CraftBukkit end
 
 public abstract class EntityMinecart extends Entity
 {
@@ -45,6 +57,30 @@
     @SideOnly(Side.CLIENT)
     protected double velocityZ;
 
+    // CraftBukkit start
+    public boolean slowWhenEmpty = true;
+    private double derailedX = 0.5;
+    private double derailedY = 0.5;
+    private double derailedZ = 0.5;
+    private double flyingX = 0.95;
+    private double flyingY = 0.95;
+    private double flyingZ = 0.95;
+    public double maxSpeed = 0.4D;
+    // CraftBukkit end
+    /* Forge: Minecart Compatibility Layer Integration. */
+    public static float defaultMaxSpeedAirLateral = 0.4f;
+    public static float defaultMaxSpeedAirVertical = -1f;
+    public static double defaultDragAir = 0.94999998807907104D;
+    protected boolean canUseRail = true;
+    protected boolean canBePushed = true;
+    private static IMinecartCollisionHandler collisionHandler = null;
+
+    /* Instance versions of the above physics properties */
+    private float currentSpeedRail = getMaxCartSpeedOnRail();
+    protected float maxSpeedAirLateral = defaultMaxSpeedAirLateral;
+    protected float maxSpeedAirVertical = defaultMaxSpeedAirVertical;
+    protected double dragAir = defaultDragAir;
+
     public EntityMinecart(World par1World)
     {
         super(par1World);
@@ -104,6 +140,10 @@
      */
     public AxisAlignedBB getCollisionBox(Entity par1Entity)
     {
+        if (getCollisionHandler() != null)
+        {
+            return getCollisionHandler().getCollisionBox(this, par1Entity);
+        }
         return par1Entity.canBePushed() ? par1Entity.boundingBox : null;
     }
 
@@ -112,6 +152,10 @@
      */
     public AxisAlignedBB getBoundingBox()
     {
+        if (getCollisionHandler() != null)
+        {
+            return getCollisionHandler().getBoundingBox(this);
+        }
         return null;
     }
 
@@ -120,7 +164,7 @@
      */
     public boolean canBePushed()
     {
-        return true;
+        return canBePushed;
     }
 
     public EntityMinecart(World par1World, double par2, double par4, double par6)
@@ -133,6 +177,7 @@
         this.prevPosX = par2;
         this.prevPosY = par4;
         this.prevPosZ = par6;
+        this.worldObj.getServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleCreateEvent((Vehicle) this.getBukkitEntity())); // CraftBukkit
     }
 
     /**
@@ -156,6 +201,19 @@
             }
             else
             {
+                // CraftBukkit start
+                Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+                org.bukkit.entity.Entity passenger = (par1DamageSource.getEntity() == null) ? null : par1DamageSource.getEntity().getBukkitEntity();
+                VehicleDamageEvent event = new VehicleDamageEvent(vehicle, passenger, par2);
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled())
+                {
+                    return true;
+                }
+
+                par2 = (float) event.getDamage();
+                // CraftBukkit end
                 this.setRollingDirection(-this.getRollingDirection());
                 this.setRollingAmplitude(10);
                 this.setBeenAttacked();
@@ -169,6 +227,16 @@
                         this.riddenByEntity.mountEntity(this);
                     }
 
+                    // CraftBukkit start
+                    VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, passenger);
+                    this.worldObj.getServer().getPluginManager().callEvent(destroyEvent);
+
+                    if (destroyEvent.isCancelled())
+                    {
+                        this.setDamage(40); // Maximize damage so this doesn't get triggered again right away
+                        return true;
+                    }
+                    // CraftBukkit end
                     if (flag && !this.isInvNameLocalized())
                     {
                         this.setDead();
@@ -239,6 +307,13 @@
      */
     public void onUpdate()
     {
+        // CraftBukkit start
+        double prevX = this.posX;
+        double prevY = this.posY;
+        double prevZ = this.posZ;
+        float prevYaw = this.rotationYaw;
+        float prevPitch = this.rotationPitch;
+        // CraftBukkit end
         if (this.field_82344_g != null)
         {
             this.field_82344_g.update();
@@ -269,11 +344,11 @@
 
             if (this.inPortal)
             {
-                if (minecraftserver.getAllowNether())
-                {
-                    if (this.ridingEntity == null && this.portalCounter++ >= i)
+                if (true || minecraftserver.getAllowNether())   // CraftBukkit - multi-world should still allow teleport even if default vanilla nether disabled
+                {
+                    if (this.ridingEntity == null && this.timeInPortal++ >= i)
                     {
-                        this.portalCounter = i;
+                        this.timeInPortal = i;
                         this.timeUntilPortal = this.getPortalCooldown();
                         byte b0;
 
@@ -294,14 +369,14 @@
             }
             else
             {
-                if (this.portalCounter > 0)
-                {
-                    this.portalCounter -= 4;
-                }
-
-                if (this.portalCounter < 0)
-                {
-                    this.portalCounter = 0;
+                if (this.timeInPortal > 0)
+                {
+                    this.timeInPortal -= 4;
+                }
+
+                if (this.timeInPortal < 0)
+                {
+                    this.timeInPortal = 0;
                 }
             }
 
@@ -348,23 +423,25 @@
                 --i;
             }
 
-            double d4 = 0.4D;
+            double d4 = this.maxSpeed; // CraftBukkit
             double d5 = 0.0078125D;
             int l = this.worldObj.getBlockId(j, i, k);
 
-            if (BlockRailBase.isRailBlock(l))
-            {
-                int i1 = this.worldObj.getBlockMetadata(j, i, k);
-                this.updateOnTrack(j, i, k, d4, d5, l, i1);
-
+            if (canUseRail() && BlockRailBase.isRailBlock(l))
+            {
+                BlockRailBase rail = (BlockRailBase)Block.blocksList[l];
+                float railMaxSpeed = rail.getRailMaxSpeed(worldObj, this, j, i, k);
+                double maxSpeed = Math.min(railMaxSpeed, getCurrentCartSpeedCapOnRail());
+                int i1 = rail.getBasicRailMetadata(worldObj, this, j, i, k);
+                this.updateOnTrack(j, i, k, maxSpeed, getSlopeAdjustment(), l, i1);
                 if (l == Block.railActivator.blockID)
                 {
-                    this.onActivatorRailPass(j, i, k, (i1 & 8) != 0);
+                    this.onActivatorRailPass(j, i, k, (worldObj.getBlockMetadata(j, i, k) & 8) != 0);
                 }
             }
             else
             {
-                this.func_94088_b(d4);
+                this.func_94088_b(onGround ? d4 : getMaxSpeedAirLateral());
             }
 
             this.doBlockCollisions();
@@ -391,7 +468,30 @@
             }
 
             this.setRotation(this.rotationYaw, this.rotationPitch);
-            List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(0.20000000298023224D, 0.0D, 0.20000000298023224D));
+            // CraftBukkit start
+            org.bukkit.World bworld = this.worldObj.getWorld();
+            Location from = new Location(bworld, prevX, prevY, prevZ, prevYaw, prevPitch);
+            Location to = new Location(bworld, this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
+            Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+            this.worldObj.getServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleUpdateEvent(vehicle));
+
+            if (!from.equals(to))
+            {
+                this.worldObj.getServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleMoveEvent(vehicle, from, to));
+            }
+
+            // CraftBukkit end
+            AxisAlignedBB box;
+            if (getCollisionHandler() != null)
+            {
+                box = getCollisionHandler().getMinecartCollisionBox(this);
+            }
+            else
+            {
+                box = boundingBox.expand(0.2D, 0.0D, 0.2D);
+            }
+
+            List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, box);
 
             if (list != null && !list.isEmpty())
             {
@@ -415,6 +515,8 @@
 
                 this.riddenByEntity = null;
             }
+
+            MinecraftForge.EVENT_BUS.post(new MinecartUpdateEvent(this, j, i, k));
         }
     }
 
@@ -445,20 +547,35 @@
             this.motionZ = par1;
         }
 
+        double moveY = motionY;
+        if(getMaxSpeedAirVertical() > 0 && motionY > getMaxSpeedAirVertical())
+        {
+            moveY = getMaxSpeedAirVertical();
+            if(Math.abs(motionX) < 0.3f && Math.abs(motionZ) < 0.3f)
+            {
+                moveY = 0.15f;
+                motionY = moveY;
+            }
+        }
+
         if (this.onGround)
         {
-            this.motionX *= 0.5D;
-            this.motionY *= 0.5D;
-            this.motionZ *= 0.5D;
+            // CraftBukkit start
+            this.motionX *= this.derailedX;
+            this.motionY *= this.derailedY;
+            this.motionZ *= this.derailedZ;
+            // CraftBukkit end
         }
 
         this.moveEntity(this.motionX, this.motionY, this.motionZ);
 
         if (!this.onGround)
         {
-            this.motionX *= 0.949999988079071D;
-            this.motionY *= 0.949999988079071D;
-            this.motionZ *= 0.949999988079071D;
+            // CraftBukkit start // MCPC+ - CB changed to flyingX but Forge changed to getDragAir() - prefer Forge in this case
+            this.motionX *= getDragAir();
+            this.motionY *= getDragAir();
+            this.motionZ *= getDragAir();
+            // CraftBukkit end
         }
     }
 
@@ -472,7 +589,7 @@
 
         if (par8 == Block.railPowered.blockID)
         {
-            flag = (par9 & 8) != 0;
+            flag = (worldObj.getBlockMetadata(par1, par2, par3) & 8) != 0;
             flag1 = !flag;
         }
 
@@ -551,7 +668,7 @@
             }
         }
 
-        if (flag1)
+        if (flag1 && shouldDoRailFunctions())
         {
             d7 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
 
@@ -599,36 +716,8 @@
         this.posX = d8 + d2 * d7;
         this.posZ = d9 + d3 * d7;
         this.setPosition(this.posX, this.posY + (double)this.yOffset, this.posZ);
-        d12 = this.motionX;
-        d13 = this.motionZ;
-
-        if (this.riddenByEntity != null)
-        {
-            d12 *= 0.75D;
-            d13 *= 0.75D;
-        }
-
-        if (d12 < -par4)
-        {
-            d12 = -par4;
-        }
-
-        if (d12 > par4)
-        {
-            d12 = par4;
-        }
-
-        if (d13 < -par4)
-        {
-            d13 = -par4;
-        }
-
-        if (d13 > par4)
-        {
-            d13 = par4;
-        }
-
-        this.moveEntity(d12, 0.0D, d13);
+
+        moveMinecartOnRail(par1, par2, par3, par4);
 
         if (aint[0][1] != 0 && MathHelper.floor_double(this.posX) - par1 == aint[0][0] && MathHelper.floor_double(this.posZ) - par3 == aint[0][2])
         {
@@ -666,7 +755,12 @@
             this.motionZ = d6 * (double)(k1 - par3);
         }
 
-        if (flag)
+        if(shouldDoRailFunctions())
+        {
+            ((BlockRailBase)Block.blocksList[par8]).onMinecartPass(worldObj, this, par1, par2, par3);
+        }
+
+        if (flag && shouldDoRailFunctions())
         {
             double d15 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
 
@@ -703,7 +797,7 @@
 
     protected void applyDrag()
     {
-        if (this.riddenByEntity != null)
+        if (this.riddenByEntity != null || !this.slowWhenEmpty)   // CraftBukkit
         {
             this.motionX *= 0.996999979019165D;
             this.motionY *= 0.0D;
@@ -737,12 +831,7 @@
         }
         else
         {
-            int i1 = this.worldObj.getBlockMetadata(i, j, k);
-
-            if (((BlockRailBase)Block.blocksList[l]).isPowered())
-            {
-                i1 &= 7;
-            }
+            int i1 = ((BlockRailBase)Block.blocksList[l]).getBasicRailMetadata(worldObj, this, i, j, k);
 
             par3 = (double)j;
 
@@ -788,13 +877,8 @@
 
         if (BlockRailBase.isRailBlock(l))
         {
-            int i1 = this.worldObj.getBlockMetadata(i, j, k);
+            int i1 = ((BlockRailBase)Block.blocksList[l]).getBasicRailMetadata(worldObj, this, i, j, k);
             par3 = (double)j;
-
-            if (((BlockRailBase)Block.blocksList[l]).isPowered())
-            {
-                i1 &= 7;
-            }
 
             if (i1 >= 2 && i1 <= 5)
             {
@@ -900,10 +984,29 @@
      */
     public void applyEntityCollision(Entity par1Entity)
     {
+        MinecraftForge.EVENT_BUS.post(new MinecartCollisionEvent(this, par1Entity));
+        if (getCollisionHandler() != null)
+        {
+            getCollisionHandler().onEntityCollision(this, par1Entity);
+            return;
+        }
         if (!this.worldObj.isRemote)
         {
             if (par1Entity != this.riddenByEntity)
             {
+                // CraftBukkit start
+                Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+                org.bukkit.entity.Entity hitEntity = (par1Entity == null) ? null : par1Entity.getBukkitEntity();
+                VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, hitEntity);
+                this.worldObj.getServer().getPluginManager().callEvent(collisionEvent);
+
+                if (collisionEvent.isCancelled())
+                {
+                    return;
+                }
+
+                // CraftBukkit end
+
                 if (par1Entity instanceof EntityLivingBase && !(par1Entity instanceof EntityPlayer) && !(par1Entity instanceof EntityIronGolem) && this.getMinecartType() == 0 && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.01D && this.riddenByEntity == null && par1Entity.ridingEntity == null)
                 {
                     par1Entity.mountEntity(this);
@@ -913,7 +1016,8 @@
                 double d1 = par1Entity.posZ - this.posZ;
                 double d2 = d0 * d0 + d1 * d1;
 
-                if (d2 >= 9.999999747378752E-5D)
+                // CraftBukkit - collision
+                if (d2 >= 9.999999747378752E-5D && !collisionEvent.isCollisionCancelled())
                 {
                     d2 = (double)MathHelper.sqrt_double(d2);
                     d0 /= d2;
@@ -950,7 +1054,7 @@
                         double d7 = par1Entity.motionX + this.motionX;
                         double d8 = par1Entity.motionZ + this.motionZ;
 
-                        if (((EntityMinecart)par1Entity).getMinecartType() == 2 && this.getMinecartType() != 2)
+                        if (((EntityMinecart)par1Entity).isPoweredCart() && !isPoweredCart())
                         {
                             this.motionX *= 0.20000000298023224D;
                             this.motionZ *= 0.20000000298023224D;
@@ -958,7 +1062,7 @@
                             par1Entity.motionX *= 0.949999988079071D;
                             par1Entity.motionZ *= 0.949999988079071D;
                         }
-                        else if (((EntityMinecart)par1Entity).getMinecartType() != 2 && this.getMinecartType() == 2)
+                        else if (!((EntityMinecart)par1Entity).isPoweredCart() && isPoweredCart())
                         {
                             par1Entity.motionX *= 0.20000000298023224D;
                             par1Entity.motionZ *= 0.20000000298023224D;
@@ -1168,4 +1272,237 @@
     {
         return this.entityName;
     }
+
+    // CraftBukkit start - Methods for getting and setting flying and derailed velocity modifiers
+    public Vector getFlyingVelocityMod()
+    {
+        return new Vector(flyingX, flyingY, flyingZ);
+    }
+
+    public void setFlyingVelocityMod(Vector flying)
+    {
+        flyingX = flying.getX();
+        flyingY = flying.getY();
+        flyingZ = flying.getZ();
+    }
+
+    public Vector getDerailedVelocityMod()
+    {
+        return new Vector(derailedX, derailedY, derailedZ);
+    }
+
+    public void setDerailedVelocityMod(Vector derailed)
+    {
+        derailedX = derailed.getX();
+        derailedY = derailed.getY();
+        derailedZ = derailed.getZ();
+    }
+    // CraftBukkit end
+
+    /**
+     * Moved to allow overrides.
+     * This code handles minecart movement and speed capping when on a rail.
+     */
+    public void moveMinecartOnRail(int x, int y, int z, double par4){
+        double d12 = this.motionX;
+        double d13 = this.motionZ;
+
+        if (this.riddenByEntity != null)
+        {
+            d12 *= 0.75D;
+            d13 *= 0.75D;
+        }
+
+        if (d12 < -par4)
+        {
+            d12 = -par4;
+        }
+
+        if (d12 > par4)
+        {
+            d12 = par4;
+        }
+
+        if (d13 < -par4)
+        {
+            d13 = -par4;
+        }
+
+        if (d13 > par4)
+        {
+            d13 = par4;
+        }
+
+        this.moveEntity(d12, 0.0D, d13);
+    }
+
+    /**
+     * Gets the current global Minecart Collision handler if none
+     * is registered, returns null
+     * @return The collision handler or null
+     */
+    public static IMinecartCollisionHandler getCollisionHandler()
+    {
+        return collisionHandler;
+    }
+
+    /**
+     * Sets the global Minecart Collision handler, overwrites any
+     * that is currently set.
+     * @param handler The new handler
+     */
+    public static void setCollisionHandler(IMinecartCollisionHandler handler)
+    {
+        collisionHandler = handler;
+    }
+
+    /**
+     * This function returns an ItemStack that represents this cart.
+     * This should be an ItemStack that can be used by the player to place the cart,
+     * but is not necessary the item the cart drops when destroyed.
+     * @return An ItemStack that can be used to place the cart.
+     */
+    public ItemStack getCartItem()
+    {
+        if (this instanceof EntityMinecartChest)
+        {
+            return new ItemStack(Item.minecartCrate);
+        }
+        else if (this instanceof EntityMinecartTNT)
+        {
+            return new ItemStack(Item.minecartTnt);
+        }
+        else if (this instanceof EntityMinecartFurnace)
+        {
+            return new ItemStack(Item.minecartPowered);
+        }
+        else if (this instanceof EntityMinecartHopper)
+        {
+            return new ItemStack(Item.minecartHopper);
+        }
+        return new ItemStack(Item.minecartEmpty);
+    }
+
+    /**
+     * Returns true if this cart can currently use rails.
+     * This function is mainly used to gracefully detach a minecart from a rail.
+     * @return True if the minecart can use rails.
+     */
+    public boolean canUseRail()
+    {
+        return canUseRail;
+    }
+
+    /**
+     * Set whether the minecart can use rails.
+     * This function is mainly used to gracefully detach a minecart from a rail.
+     * @param use Whether the minecart can currently use rails.
+     */
+    public void setCanUseRail(boolean use)
+    {
+        canUseRail = use;
+    }
+
+    /**
+     * Return false if this cart should not call onMinecartPass() and should ignore Powered Rails.
+     * @return True if this cart should call onMinecartPass().
+     */
+    public boolean shouldDoRailFunctions()
+    {
+        return true;
+    }
+
+    /**
+     * Returns true if this cart is self propelled.
+     * @return True if powered.
+     */
+    public boolean isPoweredCart()
+    {
+        return getMinecartType()== 2;
+    }
+
+    /**
+     * Returns true if this cart can be ridden by an Entity.
+     * @return True if this cart can be ridden.
+     */
+    public boolean canBeRidden()
+    {
+        if(this instanceof EntityMinecartEmpty)
+        {
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * Getters/setters for physics variables
+     */
+
+    /**
+     * Returns the carts max speed when traveling on rails. Carts going faster
+     * than 1.1 cause issues with chunk loading. Carts cant traverse slopes or
+     * corners at greater than 0.5 - 0.6. This value is compared with the rails
+     * max speed and the carts current speed cap to determine the carts current
+     * max speed. A normal rail's max speed is 0.4.
+     *
+     * @return Carts max speed.
+     */
+    public float getMaxCartSpeedOnRail()
+    {
+        return 1.2f;
+    }
+
+    /**
+     * Returns the current speed cap for the cart when traveling on rails. This
+     * functions differs from getMaxCartSpeedOnRail() in that it controls
+     * current movement and cannot be overridden. The value however can never be
+     * higher than getMaxCartSpeedOnRail().
+     *
+     * @return
+     */
+    public final float getCurrentCartSpeedCapOnRail()
+    {
+        return currentSpeedRail;
+    }
+
+    public final void setCurrentCartSpeedCapOnRail(float value)
+    {
+        value = Math.min(value, getMaxCartSpeedOnRail());
+        currentSpeedRail = value;
+    }
+
+    public float getMaxSpeedAirLateral()
+    {
+        return maxSpeedAirLateral;
+    }
+
+    public void setMaxSpeedAirLateral(float value)
+    {
+        maxSpeedAirLateral = value;
+    }
+
+    public float getMaxSpeedAirVertical()
+    {
+        return maxSpeedAirVertical;
+    }
+
+    public void setMaxSpeedAirVertical(float value)
+    {
+        maxSpeedAirVertical = value;
+    }
+
+    public double getDragAir()
+    {
+        return dragAir;
+    }
+
+    public void setDragAir(double value)
+    {
+        dragAir = value;
+    }
+
+    public double getSlopeAdjustment()
+    {
+        return 0.0078125D;
+    }
 }
