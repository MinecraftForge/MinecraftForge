--- ../src_base/minecraft/net/minecraft/entity/Entity.java
+++ ../src_work/minecraft/net/minecraft/entity/Entity.java
@@ -1,10 +1,15 @@
 package net.minecraft.entity;
 
+import cpw.mods.fml.common.FMLLog;
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
+
+import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Random;
 import java.util.UUID;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockFluid;
 import net.minecraft.block.StepSound;
@@ -13,8 +18,13 @@
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.enchantment.EnchantmentProtection;
 import net.minecraft.entity.effect.EntityLightningBolt;
+import net.minecraft.entity.item.EntityBoat;
 import net.minecraft.entity.item.EntityItem;
+import net.minecraft.entity.item.EntityItemFrame;
+import net.minecraft.entity.item.EntityMinecart;
+import net.minecraft.entity.item.EntityPainting;
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagDouble;
@@ -26,12 +36,18 @@
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.Direction;
 import net.minecraft.util.MathHelper;
+import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.util.ReportedException;
 import net.minecraft.util.StatCollector;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.Explosion;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
+import net.minecraftforge.common.IExtendedEntityProperties;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.entity.EntityEvent;
+import net.minecraftforge.fluids.Fluid;
+import net.minecraftforge.fluids.IFluidBlock;
 
 public abstract class Entity
 {
@@ -218,6 +234,13 @@
     private boolean invulnerable;
     private UUID entityUniqueID;
     public EnumEntitySize myEntitySize;
+    /** Forge: Used to store custom data for each entity. */
+    private NBTTagCompound customEntityData;
+    public boolean captureDrops = false;
+    public ArrayList<EntityItem> capturedDrops = new ArrayList<EntityItem>();
+    private UUID persistentID;
+
+    private HashMap<String, IExtendedEntityProperties> extendedProperties;
 
     public Entity(World par1World)
     {
@@ -245,6 +268,15 @@
         this.dataWatcher.addObject(0, Byte.valueOf((byte)0));
         this.dataWatcher.addObject(1, Short.valueOf((short)300));
         this.entityInit();
+
+        extendedProperties = new HashMap<String, IExtendedEntityProperties>();
+
+        MinecraftForge.EVENT_BUS.post(new EntityEvent.EntityConstructing(this));
+
+        for (IExtendedEntityProperties props : this.extendedProperties.values())
+        {
+            props.init(this, par1World);
+        }
     }
 
     protected abstract void entityInit();
@@ -1164,11 +1196,20 @@
         int k = MathHelper.floor_double(this.posZ);
         int l = this.worldObj.getBlockId(i, j, k);
 
-        if (l != 0 && Block.blocksList[l].blockMaterial == par1Material)
-        {
-            float f = BlockFluid.getFluidHeightPercent(this.worldObj.getBlockMetadata(i, j, k)) - 0.11111111F;
-            float f1 = (float)(j + 1) - f;
-            return d0 < (double)f1;
+        Block block = Block.blocksList[l];
+        if (block != null && block.blockMaterial == par1Material)
+        {
+            double filled = block.getFilledPercentage(worldObj, i, j, k);
+            if (filled < 0)
+            {
+                filled *= -1;
+                //filled -= 0.11111111F; //Why this is needed.. not sure...
+                return d0 > (double)(j + (1 - filled));
+            }
+            else
+            {
+                return d0 < (double)(j + filled);
+            }
         }
         else
         {
@@ -1529,6 +1570,21 @@
             par1NBTTagCompound.setInteger("PortalCooldown", this.timeUntilPortal);
             par1NBTTagCompound.setLong("UUIDMost", this.entityUniqueID.getMostSignificantBits());
             par1NBTTagCompound.setLong("UUIDLeast", this.entityUniqueID.getLeastSignificantBits());
+            if (customEntityData != null)
+            {
+                par1NBTTagCompound.setCompoundTag("ForgeData", customEntityData);
+            }
+
+            for (String identifier : this.extendedProperties.keySet()){
+                try{
+                    IExtendedEntityProperties props = this.extendedProperties.get(identifier);
+                    props.saveNBTData(par1NBTTagCompound);
+                }catch (Throwable t){
+                    FMLLog.severe("Failed to save extended properties for %s.  This is a mod issue.", identifier);
+                    t.printStackTrace();
+                }
+            }
+
             this.writeEntityToNBT(par1NBTTagCompound);
 
             if (this.ridingEntity != null)
@@ -1599,6 +1655,26 @@
 
             this.setPosition(this.posX, this.posY, this.posZ);
             this.setRotation(this.rotationYaw, this.rotationPitch);
+            if (par1NBTTagCompound.hasKey("ForgeData"))
+            {
+                customEntityData = par1NBTTagCompound.getCompoundTag("ForgeData");
+            }
+
+            for (String identifier : this.extendedProperties.keySet()){
+                try{
+                    IExtendedEntityProperties props = this.extendedProperties.get(identifier);
+                    props.loadNBTData(par1NBTTagCompound);
+                }catch (Throwable t){
+                    FMLLog.severe("Failed to load extended properties for %s.  This is a mod issue.", identifier);
+                    t.printStackTrace();
+                }
+            }
+
+            //Rawr, legacy code, Vanilla added a UUID, keep this so older maps will convert properly
+            if (par1NBTTagCompound.hasKey("PersistentIDMSB") && par1NBTTagCompound.hasKey("PersistentIDLSB"))
+            {
+                this.entityUniqueID = new UUID(par1NBTTagCompound.getLong("PersistentIDMSB"), par1NBTTagCompound.getLong("PersistentIDLSB"));
+            }
             this.readEntityFromNBT(par1NBTTagCompound);
 
             if (this.shouldSetPosAfterLoading())
@@ -1711,7 +1787,14 @@
         {
             EntityItem entityitem = new EntityItem(this.worldObj, this.posX, this.posY + (double)par2, this.posZ, par1ItemStack);
             entityitem.delayBeforeCanPickup = 10;
-            this.worldObj.spawnEntityInWorld(entityitem);
+            if (captureDrops)
+            {
+                capturedDrops.add(entityitem);
+            }
+            else
+            {
+                this.worldObj.spawnEntityInWorld(entityitem);
+            }
             return entityitem;
         }
     }
@@ -2010,7 +2093,7 @@
      */
     public boolean isRiding()
     {
-        return this.ridingEntity != null;
+        return this.ridingEntity != null && ridingEntity.shouldRiderSit();
     }
 
     /**
@@ -2385,7 +2468,7 @@
      */
     public float getBlockExplosionResistance(Explosion par1Explosion, World par2World, int par3, int par4, int par5, Block par6Block)
     {
-        return par6Block.getExplosionResistance(this);
+        return par6Block.getExplosionResistance(this, par2World, par3, par4, par5, posX, posY + (double)getEyeHeight(), posZ);
     }
 
     public boolean shouldExplodeBlock(Explosion par1Explosion, World par2World, int par3, int par4, int par5, int par6, float par7)
@@ -2451,4 +2534,170 @@
     {
         return this.getEntityName();
     }
+
+    /* ================================== Forge Start =====================================*/
+    /**
+     * Returns a NBTTagCompound that can be used to store custom data for this entity.
+     * It will be written, and read from disc, so it persists over world saves.
+     * @return A NBTTagCompound
+     */
+    public NBTTagCompound getEntityData()
+    {
+        if (customEntityData == null)
+        {
+            customEntityData = new NBTTagCompound();
+        }
+        return customEntityData;
+    }
+
+    /**
+     * Used in model rendering to determine if the entity riding this entity should be in the 'sitting' position.
+     * @return false to prevent an entity that is mounted to this entity from displaying the 'sitting' animation.
+     */
+    public boolean shouldRiderSit()
+    {
+        return true;
+    }
+
+    /**
+     * Called when a user uses the creative pick block button on this entity.
+     *
+     * @param target The full target the player is looking at
+     * @return A ItemStack to add to the player's inventory, Null if nothing should be added.
+     */
+    public ItemStack getPickedResult(MovingObjectPosition target)
+    {
+        if (this instanceof EntityPainting)
+        {
+            return new ItemStack(Item.painting);
+        }
+        else if (this instanceof EntityMinecart)
+        {
+            return ((EntityMinecart)this).getCartItem();
+        }
+        else if (this instanceof EntityBoat)
+        {
+            return new ItemStack(Item.boat);
+        }
+        else if (this instanceof EntityItemFrame)
+        {
+            ItemStack held = ((EntityItemFrame)this).getDisplayedItem();
+            if (held == null)
+            {
+                return new ItemStack(Item.itemFrame);
+            }
+            else
+            {
+                return held.copy();
+            }
+        }
+        else if (this instanceof EntityLeashKnot)
+        {
+            return new ItemStack(Item.leash);
+        }
+        else
+        {
+            int id = EntityList.getEntityID(this);
+            if (id > 0 && EntityList.entityEggs.containsKey(id))
+            {
+                return new ItemStack(Item.monsterPlacer, 1, id);
+            }
+        }
+        return null;
+    }
+
+    public UUID getPersistentID()
+    {
+        return entityUniqueID;
+    }
+
+    /**
+     * Reset the entity ID to a new value. Not to be used from Mod code
+     */
+    public final void resetEntityId()
+    {
+        this.entityId = nextEntityID++;
+    }
+
+    public boolean shouldRenderInPass(int pass)
+    {
+        return pass == 0;
+    }
+
+    /**
+     * Returns true if the entity is of the @link{EnumCreatureType} provided
+     * @param type The EnumCreatureType type this entity is evaluating
+     * @param forSpawnCount If this is being invoked to check spawn count caps.
+     * @return If the creature is of the type provided
+     */
+    public boolean isCreatureType(EnumCreatureType type, boolean forSpawnCount)
+    {
+        return type.getCreatureClass().isAssignableFrom(this.getClass());
+    }
+
+    /**
+     * Register the instance of IExtendedProperties into the entity's collection.
+     * @param identifier The identifier which you can use to retrieve these properties for the entity.
+     * @param properties The instanceof IExtendedProperties to register
+     * @return The identifier that was used to register the extended properties.  Empty String indicates an error.  If your requested key already existed, this will return a modified one that is unique.
+     */
+    public String registerExtendedProperties(String identifier, IExtendedEntityProperties properties)
+    {
+        if (identifier == null)
+        {
+            FMLLog.warning("Someone is attempting to register extended properties using a null identifier.  This is not allowed.  Aborting.  This may have caused instability.");
+            return "";
+        }
+        if (properties == null)
+        {
+            FMLLog.warning("Someone is attempting to register null extended properties.  This is not allowed.  Aborting.  This may have caused instability.");
+            return "";
+        }
+
+        String baseIdentifier = identifier;
+        int identifierModCount = 1;
+        while (this.extendedProperties.containsKey(identifier))
+        {
+            identifier = String.format("%s%d", baseIdentifier, identifierModCount++);
+        }
+
+        if (baseIdentifier != identifier)
+        {
+            FMLLog.info("An attempt was made to register exended properties using an existing key.  The duplicate identifier (%s) has been remapped to %s.", baseIdentifier, identifier);
+        }
+
+        this.extendedProperties.put(identifier, properties);
+        return identifier;
+    }
+
+    /**
+     * Gets the extended properties identified by the passed in key
+     * @param identifier The key that identifies the extended properties.
+     * @return The instance of IExtendedProperties that was found, or null.
+     */
+    public IExtendedEntityProperties getExtendedProperties(String identifier)
+    {
+        return this.extendedProperties.get(identifier);
+    }
+
+    /**
+     * If a rider of this entity can interact with this entity. Should return true on the
+     * ridden entity if so.
+     *
+     * @return if the entity can be interacted with from a rider
+     */
+    public boolean canRiderInteract()
+    {
+        return false;
+    }
+
+    /**
+     * If the rider should be dismounted from the entity when the entity goes under water
+     *
+     * @param rider The entity that is riding
+     * @return if the entity should be dismounted when under water
+     */
+    public boolean shouldDismountInWater(Entity rider){
+        return this instanceof EntityLivingBase;
+    }
 }
