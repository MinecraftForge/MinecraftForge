--- ../src_base/minecraft/net/minecraft/entity/Entity.java
+++ ../src_work/minecraft/net/minecraft/entity/Entity.java
@@ -2,8 +2,12 @@
 
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
+
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
+import java.util.UUID;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockFluid;
 import net.minecraft.block.StepSound;
@@ -12,8 +16,13 @@
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.enchantment.EnchantmentProtection;
 import net.minecraft.entity.effect.EntityLightningBolt;
+import net.minecraft.entity.item.EntityBoat;
 import net.minecraft.entity.item.EntityItem;
+import net.minecraft.entity.item.EntityItemFrame;
+import net.minecraft.entity.item.EntityMinecart;
+import net.minecraft.entity.item.EntityPainting;
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagDouble;
@@ -24,6 +33,7 @@
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.Direction;
 import net.minecraft.util.MathHelper;
+import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.util.ReportedException;
 import net.minecraft.util.StatCollector;
 import net.minecraft.util.Vec3;
@@ -222,6 +232,11 @@
     protected int field_82152_aq;
     private boolean invulnerable;
     public EnumEntitySize myEntitySize;
+    /** Forge: Used to store custom data for each entity. */
+    private NBTTagCompound customEntityData;
+    public boolean captureDrops = false;
+    public ArrayList<EntityItem> capturedDrops = new ArrayList<EntityItem>();
+    private UUID persistentID;
 
     public Entity(World par1World)
     {
@@ -543,7 +558,7 @@
         if (!this.worldObj.isRemote)
         {
             this.setFlag(0, this.fire > 0);
-            this.setFlag(2, this.ridingEntity != null);
+            this.setFlag(2, this.ridingEntity != null && ridingEntity.shouldRiderSit());
         }
 
         this.firstUpdate = false;
@@ -847,6 +862,8 @@
                     par5 = var27;
                     this.boundingBox.setBB(var29);
                 }
+                /* Fixes a vanilla bug where the player view would dip when stepping between certain blocks
+                 * https://mojang.atlassian.net/browse/MC-1594
                 else
                 {
                     double var40 = this.boundingBox.minY - (double)((int)this.boundingBox.minY);
@@ -856,6 +873,7 @@
                         this.ySize = (float)((double)this.ySize + var40 + 0.01D);
                     }
                 }
+                */
             }
 
             this.worldObj.theProfiler.endSection();
@@ -1514,6 +1532,15 @@
             par1NBTTagCompound.setInteger("Dimension", this.dimension);
             par1NBTTagCompound.setBoolean("Invulnerable", this.invulnerable);
             par1NBTTagCompound.setInteger("PortalCooldown", this.timeUntilPortal);
+            if (persistentID != null)
+            {
+                par1NBTTagCompound.setLong("PersistentIDMSB", persistentID.getMostSignificantBits());
+                par1NBTTagCompound.setLong("PersistentIDLSB", persistentID.getLeastSignificantBits());
+            }
+            if (customEntityData != null)
+            {
+                par1NBTTagCompound.setCompoundTag("ForgeData", customEntityData);
+            }
             this.writeEntityToNBT(par1NBTTagCompound);
         }
         catch (Throwable var5)
@@ -1568,6 +1595,14 @@
             this.timeUntilPortal = par1NBTTagCompound.getInteger("PortalCooldown");
             this.setPosition(this.posX, this.posY, this.posZ);
             this.setRotation(this.rotationYaw, this.rotationPitch);
+            if (par1NBTTagCompound.hasKey("ForgeData"))
+            {
+                customEntityData = par1NBTTagCompound.getCompoundTag("ForgeData");
+            }
+            if (par1NBTTagCompound.hasKey("PersistentIDMSB") && par1NBTTagCompound.hasKey("PersistentIDLSB"))
+            {
+                persistentID = new UUID(par1NBTTagCompound.getLong("PersistentIDMSB"), par1NBTTagCompound.getLong("PersistentIDLSB"));
+            }
             this.readEntityFromNBT(par1NBTTagCompound);
         }
         catch (Throwable var5)
@@ -1662,7 +1697,14 @@
     {
         EntityItem var3 = new EntityItem(this.worldObj, this.posX, this.posY + (double)par2, this.posZ, par1ItemStack);
         var3.delayBeforeCanPickup = 10;
-        this.worldObj.spawnEntityInWorld(var3);
+        if (captureDrops)
+        {
+            capturedDrops.add(var3);
+        }
+        else
+        {
+            this.worldObj.spawnEntityInWorld(var3);
+        }
         return var3;
     }
 
@@ -2021,7 +2063,7 @@
      */
     public boolean isRiding()
     {
-        return this.ridingEntity != null || this.getFlag(2);
+        return (this.ridingEntity != null && ridingEntity.shouldRiderSit()) || this.getFlag(2);
     }
 
     /**
@@ -2359,7 +2401,7 @@
 
     public float func_82146_a(Explosion par1Explosion, Block par2Block, int par3, int par4, int par5)
     {
-        return par2Block.getExplosionResistance(this);
+        return par2Block.getExplosionResistance(this, worldObj, par3, par4, par5, posX, posY + (double)getEyeHeight(), posZ);
     }
 
     public int func_82143_as()
@@ -2399,4 +2441,89 @@
     {
         return this.isBurning();
     }
+
+    /* ================================== Forge Start =====================================*/
+    /**
+     * Returns a NBTTagCompound that can be used to store custom data for this entity.
+     * It will be written, and read from disc, so it persists over world saves.
+     * @return A NBTTagCompound
+     */
+    public NBTTagCompound getEntityData()
+    {
+        if (customEntityData == null)
+        {
+            customEntityData = new NBTTagCompound();
+        }
+        return customEntityData;
+    }
+
+    /**
+     * Used in model rendering to determine if the entity riding this entity should be in the 'sitting' position.
+     * @return false to prevent an entity that is mounted to this entity from displaying the 'sitting' animation.
+     */
+    public boolean shouldRiderSit()
+    {
+        return true;
+    }
+
+    /**
+     * Called when a user uses the creative pick block button on this entity.
+     *
+     * @param target The full target the player is looking at
+     * @return A ItemStack to add to the player's inventory, Null if nothing should be added.
+     */
+    public ItemStack getPickedResult(MovingObjectPosition target)
+    {
+        if (this instanceof EntityPainting)
+        {
+            return new ItemStack(Item.painting);
+        }
+        else if (this instanceof EntityMinecart)
+        {
+            return ((EntityMinecart)this).getCartItem();
+        }
+        else if (this instanceof EntityBoat)
+        {
+            return new ItemStack(Item.boat);
+        }
+        else if (this instanceof EntityItemFrame)
+        {
+            ItemStack held = ((EntityItemFrame)this).getDisplayedItem();
+            if (held == null)
+            {
+                return new ItemStack(Item.itemFrame);
+            }
+            else
+            {
+                return held.copy();
+            }
+        }
+        else
+        {
+            int id = EntityList.getEntityID(this);
+            if (id > 0 && EntityList.entityEggs.containsKey(id))
+            {
+                return new ItemStack(Item.monsterPlacer, 1, id);
+            }
+        }
+        return null;
+    }
+
+    public UUID getPersistentID()
+    {
+        return persistentID;
+    }
+
+    public synchronized void generatePersistentID()
+    {
+        if (persistentID == null)
+        {
+            persistentID = UUID.randomUUID();
+        }
+    }
+
+    public boolean shouldRenderInPass(int pass)
+    {
+        return pass == 0;
+    }
 }
