--- a/net/minecraft/entity/EntityType.java
+++ b/net/minecraft/entity/EntityType.java
@@ -143,7 +_,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class EntityType<T extends Entity> {
+public class EntityType<T extends Entity> extends net.minecraftforge.registries.ForgeRegistryEntry<EntityType<?>> {
    private static final Logger LOGGER = LogManager.getLogger();
    public static final EntityType<AreaEffectCloudEntity> AREA_EFFECT_CLOUD = register("area_effect_cloud", EntityType.Builder.<AreaEffectCloudEntity>of(AreaEffectCloudEntity::new, EntityClassification.MISC).fireImmune().sized(6.0F, 0.5F).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
    public static final EntityType<ArmorStandEntity> ARMOR_STAND = register("armor_stand", EntityType.Builder.<ArmorStandEntity>of(ArmorStandEntity::new, EntityClassification.MISC).sized(0.5F, 1.975F).clientTrackingRange(10));
@@ -270,6 +_,12 @@
    private ResourceLocation lootTable;
    private final EntitySize dimensions;
 
+   private final java.util.function.Predicate<EntityType<?>> velocityUpdateSupplier;
+   private final java.util.function.ToIntFunction<EntityType<?>> trackingRangeSupplier;
+   private final java.util.function.ToIntFunction<EntityType<?>> updateIntervalSupplier;
+   private final java.util.function.BiFunction<net.minecraftforge.fml.network.FMLPlayMessages.SpawnEntity, World, T> customClientFactory;
+   private final net.minecraftforge.common.util.ReverseTagWrapper<EntityType<?>> reverseTags = new net.minecraftforge.common.util.ReverseTagWrapper<>(this, net.minecraft.tags.EntityTypeTags::getAllTags);
+
    private static <T extends Entity> EntityType<T> register(String p_200712_0_, EntityType.Builder<T> p_200712_1_) {
       return Registry.register(Registry.ENTITY_TYPE, p_200712_0_, p_200712_1_.build(p_200712_0_));
    }
@@ -283,6 +_,9 @@
    }
 
    public EntityType(EntityType.IFactory<T> p_i231489_1_, EntityClassification p_i231489_2_, boolean p_i231489_3_, boolean p_i231489_4_, boolean p_i231489_5_, boolean p_i231489_6_, ImmutableSet<Block> p_i231489_7_, EntitySize p_i231489_8_, int p_i231489_9_, int p_i231489_10_) {
+       this(p_i231489_1_, p_i231489_2_, p_i231489_3_, p_i231489_4_, p_i231489_5_, p_i231489_6_, p_i231489_7_, p_i231489_8_, p_i231489_9_, p_i231489_10_, EntityType::defaultVelocitySupplier, EntityType::defaultTrackingRangeSupplier, EntityType::defaultUpdateIntervalSupplier, null);
+   }
+   public EntityType(EntityType.IFactory<T> p_i231489_1_, EntityClassification p_i231489_2_, boolean p_i231489_3_, boolean p_i231489_4_, boolean p_i231489_5_, boolean p_i231489_6_, ImmutableSet<Block> p_i231489_7_, EntitySize p_i231489_8_, int p_i231489_9_, int p_i231489_10_, final java.util.function.Predicate<EntityType<?>> velocityUpdateSupplier, final java.util.function.ToIntFunction<EntityType<?>> trackingRangeSupplier, final java.util.function.ToIntFunction<EntityType<?>> updateIntervalSupplier, final java.util.function.BiFunction<net.minecraftforge.fml.network.FMLPlayMessages.SpawnEntity, World, T> customClientFactory) {
       this.factory = p_i231489_1_;
       this.category = p_i231489_2_;
       this.canSpawnFarFromPlayer = p_i231489_6_;
@@ -293,6 +_,10 @@
       this.dimensions = p_i231489_8_;
       this.clientTrackingRange = p_i231489_9_;
       this.updateInterval = p_i231489_10_;
+      this.velocityUpdateSupplier = velocityUpdateSupplier;
+      this.trackingRangeSupplier = trackingRangeSupplier;
+      this.updateIntervalSupplier = updateIntervalSupplier;
+      this.customClientFactory = customClientFactory;
    }
 
    @Nullable
@@ -304,6 +_,7 @@
    public T spawn(ServerWorld p_220342_1_, @Nullable CompoundNBT p_220342_2_, @Nullable ITextComponent p_220342_3_, @Nullable PlayerEntity p_220342_4_, BlockPos p_220342_5_, SpawnReason p_220342_6_, boolean p_220342_7_, boolean p_220342_8_) {
       T t = this.create(p_220342_1_, p_220342_2_, p_220342_3_, p_220342_4_, p_220342_5_, p_220342_6_, p_220342_7_, p_220342_8_);
       if (t != null) {
+         if (t instanceof net.minecraft.entity.MobEntity && net.minecraftforge.event.ForgeEventFactory.doSpecialSpawn((net.minecraft.entity.MobEntity) t, p_220342_1_, p_220342_5_.getX(), p_220342_5_.getY(), p_220342_5_.getZ(), null, p_220342_6_)) return null;
          p_220342_1_.addFreshEntityWithPassengers(t);
       }
 
@@ -504,14 +_,23 @@
    }
 
    public int clientTrackingRange() {
+      return trackingRangeSupplier.applyAsInt(this);
+   }
+   private int defaultTrackingRangeSupplier() {
       return this.clientTrackingRange;
    }
 
    public int updateInterval() {
+      return updateIntervalSupplier.applyAsInt(this);
+   }
+   private int defaultUpdateIntervalSupplier() {
       return this.updateInterval;
    }
 
    public boolean trackDeltas() {
+      return velocityUpdateSupplier.test(this);
+   }
+   private boolean defaultVelocitySupplier() {
       return this != PLAYER && this != LLAMA_SPIT && this != WITHER && this != BAT && this != ITEM_FRAME && this != LEASH_KNOT && this != PAINTING && this != END_CRYSTAL && this != EVOKER_FANGS;
    }
 
@@ -519,6 +_,19 @@
       return p_220341_1_.contains(this);
    }
 
+   public T customClientSpawn(net.minecraftforge.fml.network.FMLPlayMessages.SpawnEntity packet, World world) {
+       if (customClientFactory == null) return this.create(world);
+       return customClientFactory.apply(packet, world);
+   }
+
+   /**
+    * Retrieves a list of tags names this is known to be associated with.
+    * This should be used in favor of TagCollection.getOwningTags, as this caches the result and automatically updates when the TagCollection changes.
+    */
+   public java.util.Set<ResourceLocation> getTags() {
+       return reverseTags.getTagNames();
+   }
+
    public static class Builder<T extends Entity> {
       private final EntityType.IFactory<T> factory;
       private final EntityClassification category;
@@ -531,6 +_,11 @@
       private int updateInterval = 3;
       private EntitySize dimensions = EntitySize.scalable(0.6F, 1.8F);
 
+      private java.util.function.Predicate<EntityType<?>> velocityUpdateSupplier = EntityType::defaultVelocitySupplier;
+      private java.util.function.ToIntFunction<EntityType<?>> trackingRangeSupplier = EntityType::defaultTrackingRangeSupplier;
+      private java.util.function.ToIntFunction<EntityType<?>> updateIntervalSupplier = EntityType::defaultUpdateIntervalSupplier;
+      private java.util.function.BiFunction<net.minecraftforge.fml.network.FMLPlayMessages.SpawnEntity, World, T> customClientFactory;
+
       private Builder(EntityType.IFactory<T> p_i50479_1_, EntityClassification p_i50479_2_) {
          this.factory = p_i50479_1_;
          this.category = p_i50479_2_;
@@ -587,12 +_,36 @@
          return this;
       }
 
+      public EntityType.Builder<T> setUpdateInterval(int interval) {
+          this.updateIntervalSupplier = t->interval;
+          return this;
+      }
+
+      public EntityType.Builder<T> setTrackingRange(int range) {
+          this.trackingRangeSupplier = t->range;
+          return this;
+      }
+
+      public EntityType.Builder<T> setShouldReceiveVelocityUpdates(boolean value) {
+          this.velocityUpdateSupplier = t->value;
+          return this;
+      }
+
+      /**
+       * By default, entities are spawned clientside via {@link EntityType#create(World)}.
+       * If you need finer control over the spawning process, use this to get read access to the spawn packet.
+       */
+      public EntityType.Builder<T> setCustomClientFactory(java.util.function.BiFunction<net.minecraftforge.fml.network.FMLPlayMessages.SpawnEntity, World, T> customClientFactory) {
+          this.customClientFactory = customClientFactory;
+          return this;
+      }
+
       public EntityType<T> build(String p_206830_1_) {
          if (this.serialize) {
             Util.fetchChoiceType(TypeReferences.ENTITY_TREE, p_206830_1_);
          }
 
-         return new EntityType<>(this.factory, this.category, this.serialize, this.summon, this.fireImmune, this.canSpawnFarFromPlayer, this.immuneTo, this.dimensions, this.clientTrackingRange, this.updateInterval);
+         return new EntityType<>(this.factory, this.category, this.serialize, this.summon, this.fireImmune, this.canSpawnFarFromPlayer, this.immuneTo, this.dimensions, this.clientTrackingRange, this.updateInterval, velocityUpdateSupplier, trackingRangeSupplier, updateIntervalSupplier, customClientFactory);
       }
    }
 
