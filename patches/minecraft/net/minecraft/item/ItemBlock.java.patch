--- ../src_base/minecraft/net/minecraft/item/ItemBlock.java
+++ ../src_work/minecraft/net/minecraft/item/ItemBlock.java
@@ -4,12 +4,16 @@
 import cpw.mods.fml.relauncher.SideOnly;
 import java.util.List;
 import net.minecraft.block.Block;
+import net.minecraft.block.BlockContainer;
 import net.minecraft.client.renderer.texture.IconRegister;
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.util.Icon;
 import net.minecraft.world.World;
+import net.minecraftforge.common.BlockSnapshot;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.block.BlockPlaceEvent;
 
 public class ItemBlock extends Item
 {
@@ -58,13 +62,15 @@
      */
     public boolean onItemUse(ItemStack par1ItemStack, EntityPlayer par2EntityPlayer, World par3World, int par4, int par5, int par6, int par7, float par8, float par9, float par10)
     {
+        int clickedX = par4, clickedY = par5, clickedZ = par6;
         int i1 = par3World.getBlockId(par4, par5, par6);
 
         if (i1 == Block.snow.blockID && (par3World.getBlockMetadata(par4, par5, par6) & 7) < 1)
         {
             par7 = 1;
         }
-        else if (i1 != Block.vine.blockID && i1 != Block.tallGrass.blockID && i1 != Block.deadBush.blockID)
+        else if (i1 != Block.vine.blockID && i1 != Block.tallGrass.blockID && i1 != Block.deadBush.blockID
+                && (Block.blocksList[i1] == null || !Block.blocksList[i1].isBlockReplaceable(par3World, par4, par5, par6)))
         {
             if (par7 == 0)
             {
@@ -115,19 +121,7 @@
             int j1 = this.getMetadata(par1ItemStack.getItemDamage());
             int k1 = Block.blocksList[this.blockID].onBlockPlaced(par3World, par4, par5, par6, par7, par8, par9, par10, j1);
 
-            if (par3World.setBlock(par4, par5, par6, this.blockID, k1, 3))
-            {
-                if (par3World.getBlockId(par4, par5, par6) == this.blockID)
-                {
-                    Block.blocksList[this.blockID].onBlockPlacedBy(par3World, par4, par5, par6, par2EntityPlayer, par1ItemStack);
-                    Block.blocksList[this.blockID].onPostBlockPlaced(par3World, par4, par5, par6, k1);
-                }
-
-                par3World.playSoundEffect((double)((float)par4 + 0.5F), (double)((float)par5 + 0.5F), (double)((float)par6 + 0.5F), block.stepSound.getPlaceSound(), (block.stepSound.getVolume() + 1.0F) / 2.0F, block.stepSound.getPitch() * 0.8F);
-                --par1ItemStack.stackSize;
-            }
-
-            return true;
+            return placeBlockAt(par3World, par2EntityPlayer, par1ItemStack, par4, par5, par6, par7, this.blockID, k1, clickedX, clickedY, clickedZ);
         }
         else
         {
@@ -148,7 +142,8 @@
         {
             par5 = 1;
         }
-        else if (i1 != Block.vine.blockID && i1 != Block.tallGrass.blockID && i1 != Block.deadBush.blockID)
+        else if (i1 != Block.vine.blockID && i1 != Block.tallGrass.blockID && i1 != Block.deadBush.blockID
+                && (Block.blocksList[i1] == null || !Block.blocksList[i1].isBlockReplaceable(par1World, par2, par3, par4)))
         {
             if (par5 == 0)
             {
@@ -231,4 +226,70 @@
             this.field_94588_b = par1IconRegister.registerIcon(s);
         }
     }
+
+    /**
+     * Called to actually place the block, after the location is determined
+     * and all permission checks have been made.
+     *
+     * @param stack The item stack that was used to place the block. This can be changed inside the method.
+     * @param player The player who is placing the block. Can be null if the block is not being placed by a player.
+     * @param side The side the player (or machine) right-clicked on.
+     * @param id The block ID for item.
+     * @param metadata The block metadata.
+     * @param clickedX The x-coordinate for block that was right-clicked on.
+     * @param clickedY The y-coordinate for block that was right-clicked on.
+     * @param clickedZ The z-coordinate for block that was right-clicked on.
+     */
+    public boolean placeBlockAt(World world, EntityPlayer player, ItemStack stack, int x, int y, int z, int side, int id, int metadata, int clickedX, int clickedY, int clickedZ)
+    {
+        if (!world.isRemote)
+        {
+            BlockSnapshot blocksnapshot = new BlockSnapshot(world, x, y, z, world.getBlockMetadata(x, y, z));
+            world.callingPlaceEvent = true;
+            world.setBlock(x, y, z, id, metadata, 2);
+            BlockPlaceEvent event = new BlockPlaceEvent(stack, player, world, x, y, z, side, metadata, clickedX, clickedY, clickedZ, blocksnapshot);
+
+            if (event.isCanceled())
+            {
+                blocksnapshot.restore(true, false);
+                world.callingPlaceEvent = false;
+                return false;
+            }
+
+            world.callingPlaceEvent = false;
+            int newId = world.getBlockId(x, y, z);
+            int newData = world.getBlockMetadata(x, y, z);
+    
+            Block block = Block.blocksList[newId];
+    
+            if (block != null && !(block instanceof BlockContainer))   // Containers get placed automatically
+            {
+                block.onBlockAdded(world, x, y, z);
+            }
+    
+            world.notifyBlockChange(x, y, z, newId);
+    
+            // Skulls don't get block data applied to them
+            if (block != null && block != Block.skull)
+            {
+                block.onBlockPlacedBy(world, x, y, z, player, stack);
+                block.onPostBlockPlaced(world, x, y, z, newData);
+            }
+        }
+        else // standard method for client
+        {
+            if (!world.setBlock(x, y, z, id, metadata, 3))
+            {
+                return false;
+            }
+
+            if (world.getBlockId(x, y, z) == id)
+            {
+                Block.blocksList[id].onBlockPlacedBy(world, x, y, z, player, stack);
+                Block.blocksList[id].onPostBlockPlaced(world, x, y, z, metadata);
+            }
+        }
+
+        return true;
+    }
 }
