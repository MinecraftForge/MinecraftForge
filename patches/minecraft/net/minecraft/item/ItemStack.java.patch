--- ../src-base/minecraft/net/minecraft/item/ItemStack.java
+++ ../src-work/minecraft/net/minecraft/item/ItemStack.java
@@ -1,15 +1,12 @@
 package net.minecraft.item;
 
-import com.google.common.collect.HashMultimap;
-import com.google.common.collect.Multimap;
-import cpw.mods.fml.relauncher.Side;
-import cpw.mods.fml.relauncher.SideOnly;
 import java.text.DecimalFormat;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Random;
 import java.util.Map.Entry;
+import java.util.Random;
+
 import net.minecraft.block.Block;
 import net.minecraft.enchantment.Enchantment;
 import net.minecraft.enchantment.EnchantmentDurability;
@@ -32,7 +29,14 @@
 import net.minecraft.util.IIcon;
 import net.minecraft.util.StatCollector;
 import net.minecraft.world.World;
+import net.minecraftforge.event.ForgeEventFactory;
 
+import com.google.common.collect.HashMultimap;
+import com.google.common.collect.Multimap;
+
+import cpw.mods.fml.relauncher.Side;
+import cpw.mods.fml.relauncher.SideOnly;
+
 public final class ItemStack
 {
     public static final DecimalFormat field_111284_a = new DecimalFormat("#.###");
@@ -192,7 +196,7 @@
     // JAVADOC METHOD $$ func_77976_d
     public int getMaxStackSize()
     {
-        return this.getItem().getItemStackLimit();
+        return this.getItem().getItemStackLimit(this);
     }
 
     // JAVADOC METHOD $$ func_77985_e
@@ -204,7 +208,7 @@
     // JAVADOC METHOD $$ func_77984_f
     public boolean isItemStackDamageable()
     {
-        return this.field_151002_e.getMaxDamage() <= 0 ? false : !this.hasTagCompound() || !this.getTagCompound().getBoolean("Unbreakable");
+        return this.field_151002_e.getMaxDamage(this) <= 0 ? false : !this.hasTagCompound() || !this.getTagCompound().getBoolean("Unbreakable");
     }
 
     public boolean getHasSubtypes()
@@ -215,36 +219,31 @@
     // JAVADOC METHOD $$ func_77951_h
     public boolean isItemDamaged()
     {
-        return this.isItemStackDamageable() && this.itemDamage > 0;
+        return this.isItemStackDamageable() && getItem().isDamaged(this);
     }
 
     // JAVADOC METHOD $$ func_77952_i
     public int getItemDamageForDisplay()
     {
-        return this.itemDamage;
+        return getItem().getDisplayDamage(this);
     }
 
     // JAVADOC METHOD $$ func_77960_j
     public int getItemDamage()
     {
-        return this.itemDamage;
+        return getItem().getDamage(this);
     }
 
     // JAVADOC METHOD $$ func_77964_b
     public void setItemDamage(int par1)
     {
-        this.itemDamage = par1;
-
-        if (this.itemDamage < 0)
-        {
-            this.itemDamage = 0;
-        }
+        getItem().setDamage(this, par1);
     }
 
     // JAVADOC METHOD $$ func_77958_k
     public int getMaxDamage()
     {
-        return this.field_151002_e.getMaxDamage();
+        return getItem().getMaxDamage(this);
     }
 
     // JAVADOC METHOD $$ func_96631_a
@@ -277,8 +276,8 @@
                 }
             }
 
-            this.itemDamage += par1;
-            return this.itemDamage > this.getMaxDamage();
+            setItemDamage(getItemDamage() + par1); //Redirect through Item's callback if applicable.
+            return getItemDamage() > getMaxDamage();
         }
     }
 
@@ -339,7 +338,7 @@
 
     public boolean func_150998_b(Block p_150998_1_)
     {
-        return this.field_151002_e.func_150897_b(p_150998_1_);
+        return getItem().canHarvestBlock(p_150998_1_, this);
     }
 
     public boolean interactWithEntity(EntityPlayer par1EntityPlayer, EntityLivingBase par2EntityLivingBase)
@@ -653,16 +652,24 @@
         {
             arraylist.add("Durability: " + (this.getMaxDamage() - this.getItemDamageForDisplay()) + " / " + this.getMaxDamage());
         }
+        ForgeEventFactory.onItemTooltip(this, par1EntityPlayer, arraylist, par2);
 
         return arraylist;
     }
 
+    @Deprecated
     @SideOnly(Side.CLIENT)
     public boolean hasEffect()
     {
-        return this.getItem().hasEffect(this);
+        return hasEffect(0);
     }
 
+    @SideOnly(Side.CLIENT)
+    public boolean hasEffect(int pass)
+    {
+        return this.getItem().hasEffect(this, pass);
+    }
+
     public EnumRarity getRarity()
     {
         return this.getItem().getRarity(this);
@@ -798,4 +805,33 @@
 
         return ichatcomponent;
     }
+
+    @Override
+    public int hashCode()
+    {
+        int code = 1;
+        if(getItem() != null)
+            code = 31*code + getItem().hashCode();
+        code = 31*code + getItemDamage();
+        code = 31*code + stackSize;
+        if(hasTagCompound())
+            code = 31*code + getTagCompound().hashCode();
+        return code;
+    }
+    
+    @Override
+    public boolean equals(Object o){
+        if(o == this)
+            return true;
+        if(!(o instanceof ItemStack))
+            return false;
+        ItemStack stack = (ItemStack) o;
+        if(getItem() != stack.getItem())
+            return false;
+        if(stackSize != stack.stackSize)
+            return false;
+        if(getItemDamage() != stack.getItemDamage())
+            return false;
+        return hasTagCompound() ? getTagCompound().equals(stack.getTagCompound()) : !stack.hasTagCompound();
+    }
 }
