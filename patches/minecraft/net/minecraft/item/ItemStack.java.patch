--- ../src_base/minecraft/net/minecraft/item/ItemStack.java
+++ ../src_work/minecraft/net/minecraft/item/ItemStack.java
@@ -1,16 +1,14 @@
 package net.minecraft.item;
 
-import com.google.common.collect.HashMultimap;
-import com.google.common.collect.Multimap;
-import cpw.mods.fml.relauncher.Side;
-import cpw.mods.fml.relauncher.SideOnly;
 import java.text.DecimalFormat;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map.Entry;
 import java.util.Random;
-import java.util.Map.Entry;
+
 import net.minecraft.block.Block;
+import net.minecraft.block.material.Material;
 import net.minecraft.enchantment.Enchantment;
 import net.minecraft.enchantment.EnchantmentDurability;
 import net.minecraft.enchantment.EnchantmentHelper;
@@ -30,6 +28,12 @@
 import net.minecraft.util.StatCollector;
 import net.minecraft.world.World;
 
+import com.google.common.collect.HashMultimap;
+import com.google.common.collect.Multimap;
+
+import cpw.mods.fml.relauncher.Side;
+import cpw.mods.fml.relauncher.SideOnly;
+
 public final class ItemStack
 {
     public static final DecimalFormat field_111284_a = new DecimalFormat("#.###");
@@ -252,7 +256,9 @@
      */
     public boolean isItemDamaged()
     {
-        return this.isItemStackDamageable() && this.itemDamage > 0;
+        boolean damaged = itemDamage > 0;
+        if (getItem() != null) damaged = getItem().isDamaged(this);
+        return this.isItemStackDamageable() && damaged;
     }
 
     /**
@@ -260,6 +266,10 @@
      */
     public int getItemDamageForDisplay()
     {
+        if (getItem() != null)
+        {
+            return getItem().getDisplayDamage(this);
+        }
         return this.itemDamage;
     }
 
@@ -268,6 +278,10 @@
      */
     public int getItemDamage()
     {
+        if (getItem() != null)
+        {
+            return getItem().getDamage(this);
+        }
         return this.itemDamage;
     }
 
@@ -276,6 +290,12 @@
      */
     public void setItemDamage(int par1)
     {
+        if (getItem() != null)
+        {
+            getItem().setDamage(this, par1);
+            return;
+        }
+
         this.itemDamage = par1;
 
         if (this.itemDamage < 0)
@@ -289,7 +309,7 @@
      */
     public int getMaxDamage()
     {
-        return Item.itemsList[this.itemID].getMaxDamage();
+        return this.getItem().getMaxDamage(this);
     }
 
     /**
@@ -327,8 +347,8 @@
                 }
             }
 
-            this.itemDamage += par1;
-            return this.itemDamage > this.getMaxDamage();
+            setItemDamage(getItemDamage() + par1); //Redirect through Item's callback if applicable.
+            return getItemDamage() > getMaxDamage();
         }
     }
 
@@ -394,9 +414,15 @@
     /**
      * Checks if the itemStack object can harvest a specified block
      */
+    @Deprecated
     public boolean canHarvestBlock(Block par1Block)
     {
-        return Item.itemsList[this.itemID].canHarvestBlock(par1Block);
+        return Item.itemsList[this.itemID].canHarvestBlock(par1Block, this);
+    }
+    
+    public boolean canHarvestBlock(Block par1Block, Material par2Material)
+    {
+        return Item.itemsList[this.itemID].canHarvestBlock(par1Block, this, par2Material);
     }
 
     public boolean func_111282_a(EntityPlayer par1EntityPlayer, EntityLivingBase par2EntityLivingBase)
@@ -737,10 +763,16 @@
         return arraylist;
     }
 
+    @Deprecated
     @SideOnly(Side.CLIENT)
     public boolean hasEffect()
     {
-        return this.getItem().hasEffect(this);
+        return hasEffect(0);
+    }
+    @SideOnly(Side.CLIENT)
+    public boolean hasEffect(int pass)
+    {
+        return this.getItem().hasEffect(this, pass);
     }
 
     @SideOnly(Side.CLIENT)
