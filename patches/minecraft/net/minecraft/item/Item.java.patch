--- a/net/minecraft/item/Item.java
+++ b/net/minecraft/item/Item.java
@@ -40,8 +_,8 @@
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 
-public class Item implements IItemProvider {
-   public static final Map<Block, Item> BY_BLOCK = Maps.newHashMap();
+public class Item extends net.minecraftforge.registries.ForgeRegistryEntry<Item> implements IItemProvider, net.minecraftforge.common.extensions.IForgeItem {
+   public static final Map<Block, Item> BY_BLOCK = net.minecraftforge.registries.GameData.getBlockItemMap();
    protected static final UUID BASE_ATTACK_DAMAGE_UUID = UUID.fromString("CB3F55D3-645C-4F38-A497-9C13A33DB5CF");
    protected static final UUID BASE_ATTACK_SPEED_UUID = UUID.fromString("FA233E1C-4180-4865-B01B-BCCE9785ACA3");
    protected static final Random random = new Random();
@@ -77,6 +_,10 @@
       this.maxStackSize = p_i48487_1_.maxStackSize;
       this.foodProperties = p_i48487_1_.foodProperties;
       this.isFireResistant = p_i48487_1_.isFireResistant;
+      this.canRepair = p_i48487_1_.canRepair;
+      this.toolClasses.putAll(p_i48487_1_.toolClasses);
+      Object tmp = p_i48487_1_.ister == null ? null : net.minecraftforge.fml.DistExecutor.callWhenOn(Dist.CLIENT, p_i48487_1_.ister);
+      this.ister = tmp == null ? null : () -> (net.minecraft.client.renderer.tileentity.ItemStackTileEntityRenderer) tmp;
    }
 
    public void onUseTick(World p_219972_1_, LivingEntity p_219972_2_, ItemStack p_219972_3_, int p_219972_4_) {
@@ -120,10 +_,12 @@
       return this.isEdible() ? p_77654_3_.eat(p_77654_2_, p_77654_1_) : p_77654_1_;
    }
 
+   @Deprecated // Use ItemStack sensitive version.
    public final int getMaxStackSize() {
       return this.maxStackSize;
    }
 
+   @Deprecated // Use ItemStack sensitive version.
    public final int getMaxDamage() {
       return this.maxDamage;
    }
@@ -178,10 +_,12 @@
    }
 
    @Nullable
+   @Deprecated // Use ItemStack sensitive version.
    public final Item getCraftingRemainingItem() {
       return this.craftingRemainingItem;
    }
 
+   @Deprecated // Use ItemStack sensitive version.
    public boolean hasCraftingRemainingItem() {
       return this.craftingRemainingItem != null;
    }
@@ -241,7 +_,7 @@
    }
 
    public boolean isEnchantable(ItemStack p_77616_1_) {
-      return this.getMaxStackSize() == 1 && this.canBeDepleted();
+      return this.getItemStackLimit(p_77616_1_) == 1 && this.isDamageable(p_77616_1_);
    }
 
    protected static BlockRayTraceResult getPlayerPOVHitResult(World p_219968_0_, PlayerEntity p_219968_1_, RayTraceContext.FluidMode p_219968_2_) {
@@ -254,8 +_,8 @@
       float f5 = MathHelper.sin(-f * ((float)Math.PI / 180F));
       float f6 = f3 * f4;
       float f7 = f2 * f4;
-      double d0 = 5.0D;
-      Vector3d vector3d1 = vector3d.add((double)f6 * 5.0D, (double)f5 * 5.0D, (double)f7 * 5.0D);
+      double d0 = p_219968_1_.getAttribute(net.minecraftforge.common.ForgeMod.REACH_DISTANCE.get()).getValue();;
+      Vector3d vector3d1 = vector3d.add((double)f6 * d0, (double)f5 * d0, (double)f7 * d0);
       return p_219968_0_.clip(new RayTraceContext(vector3d, vector3d1, RayTraceContext.BlockMode.OUTLINE, p_219968_2_, p_219968_1_));
    }
 
@@ -271,6 +_,7 @@
    }
 
    protected boolean allowdedIn(ItemGroup p_194125_1_) {
+      if (getCreativeTabs().stream().anyMatch(tab -> tab == p_194125_1_)) return true;
       ItemGroup itemgroup = this.getItemCategory();
       return itemgroup != null && (p_194125_1_ == ItemGroup.TAB_SEARCH || p_194125_1_ == itemgroup);
    }
@@ -284,10 +_,44 @@
       return false;
    }
 
+   @Deprecated // Use ItemStack sensitive version.
    public Multimap<Attribute, AttributeModifier> getDefaultAttributeModifiers(EquipmentSlotType p_111205_1_) {
       return ImmutableMultimap.of();
    }
 
+   @Nullable
+   private final java.util.function.Supplier<net.minecraft.client.renderer.tileentity.ItemStackTileEntityRenderer> ister;
+   private final java.util.Map<net.minecraftforge.common.ToolType, Integer> toolClasses = Maps.newHashMap();
+   private final net.minecraftforge.common.util.ReverseTagWrapper<Item> reverseTags = new net.minecraftforge.common.util.ReverseTagWrapper<>(this, net.minecraft.tags.ItemTags::getAllTags);
+   protected final boolean canRepair;
+
+   @Override
+   public boolean isRepairable(ItemStack stack) {
+      return canRepair && isDamageable(stack);
+   }
+
+   @Override
+   public java.util.Set<net.minecraftforge.common.ToolType> getToolTypes(ItemStack stack) {
+      return toolClasses.keySet();
+   }
+
+   @Override
+   public int getHarvestLevel(ItemStack stack, net.minecraftforge.common.ToolType tool, @Nullable PlayerEntity player, @Nullable BlockState blockState) {
+      return toolClasses.getOrDefault(tool, -1);
+   }
+
+   @OnlyIn(Dist.CLIENT)
+   @Override
+   public final net.minecraft.client.renderer.tileentity.ItemStackTileEntityRenderer getItemStackTileEntityRenderer() {
+      net.minecraft.client.renderer.tileentity.ItemStackTileEntityRenderer renderer = ister != null ? ister.get() : null;
+      return renderer != null ? renderer : net.minecraft.client.renderer.tileentity.ItemStackTileEntityRenderer.instance;
+   }
+
+   @Override
+   public java.util.Set<net.minecraft.util.ResourceLocation> getTags() {
+      return reverseTags.getTagNames();
+   }
+
    public boolean useOnRelease(ItemStack p_219970_1_) {
       return p_219970_1_.getItem() == Items.CROSSBOW;
    }
@@ -333,6 +_,9 @@
       private Rarity rarity = Rarity.COMMON;
       private Food foodProperties;
       private boolean isFireResistant;
+      private boolean canRepair = true;
+      private java.util.Map<net.minecraftforge.common.ToolType, Integer> toolClasses = Maps.newHashMap();
+      private java.util.function.Supplier<java.util.concurrent.Callable<net.minecraft.client.renderer.tileentity.ItemStackTileEntityRenderer>> ister;
 
       public Item.Properties food(Food p_221540_1_) {
          this.foodProperties = p_221540_1_;
@@ -375,6 +_,21 @@
 
       public Item.Properties fireResistant() {
          this.isFireResistant = true;
+         return this;
+      }
+
+      public Item.Properties setNoRepair() {
+         canRepair = false;
+         return this;
+      }
+
+      public Item.Properties addToolType(net.minecraftforge.common.ToolType type, int level) {
+         toolClasses.put(type, level);
+         return this;
+      }
+
+      public Item.Properties setISTER(java.util.function.Supplier<java.util.concurrent.Callable<net.minecraft.client.renderer.tileentity.ItemStackTileEntityRenderer>> ister) {
+         this.ister = ister;
          return this;
       }
    }
