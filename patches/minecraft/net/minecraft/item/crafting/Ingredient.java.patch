--- ../src-base/minecraft/net/minecraft/item/crafting/Ingredient.java
+++ ../src-work/minecraft/net/minecraft/item/crafting/Ingredient.java
@@ -8,11 +8,11 @@
 import net.minecraft.client.util.RecipeItemHelper;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
 public class Ingredient implements Predicate<ItemStack>
 {
+    //Because Mojang caches things... we need to invalidate them.. so... here we go..
+    private static final java.util.Set<Ingredient> INSTANCES = java.util.Collections.newSetFromMap(new java.util.WeakHashMap<Ingredient, Boolean>());
     public static final Ingredient field_193370_a = new Ingredient(new ItemStack[0])
     {
         public boolean apply(@Nullable ItemStack p_apply_1_)
@@ -21,17 +21,39 @@
         }
     };
     private final ItemStack[] field_193371_b;
+    private final ItemStack[] matchingStacksExploded;
     private IntList field_194140_c;
+    private final boolean isSimple;
 
+    protected Ingredient(int size)
+    {
+        this(new ItemStack[size]);
+    }
+
     protected Ingredient(ItemStack... p_i47503_1_)
     {
+        boolean simple = true;
         this.field_193371_b = p_i47503_1_;
+        net.minecraft.util.NonNullList<ItemStack> lst = net.minecraft.util.NonNullList.func_191196_a();
+        for (ItemStack s : p_i47503_1_)
+        {
+            if (s.func_190926_b())
+                continue;
+            if (s.func_77973_b().func_77645_m())
+                simple = false;
+            if (s.func_77960_j() == net.minecraftforge.oredict.OreDictionary.WILDCARD_VALUE)
+                s.func_77973_b().func_150895_a(net.minecraft.creativetab.CreativeTabs.field_78027_g, lst);
+            else
+                lst.add(s);
+        }
+        this.matchingStacksExploded = lst.toArray(new ItemStack[lst.size()]);
+        this.isSimple = simple && this.matchingStacksExploded.length > 0;
+        Ingredient.INSTANCES.add(this);
     }
 
-    @SideOnly(Side.CLIENT)
     public ItemStack[] func_193365_a()
     {
-        return this.field_193371_b;
+        return this.matchingStacksExploded;
     }
 
     public boolean apply(@Nullable ItemStack p_apply_1_)
@@ -63,9 +85,9 @@
     {
         if (this.field_194140_c == null)
         {
-            this.field_194140_c = new IntArrayList(this.field_193371_b.length);
+            this.field_194140_c = new IntArrayList(this.matchingStacksExploded.length);
 
-            for (ItemStack itemstack : this.field_193371_b)
+            for (ItemStack itemstack : this.matchingStacksExploded)
             {
                 this.field_194140_c.add(RecipeItemHelper.func_194113_b(itemstack));
             }
@@ -76,6 +98,18 @@
         return this.field_194140_c;
     }
 
+    public static void invalidateAll()
+    {
+        for (Ingredient ing : INSTANCES)
+            if (ing != null)
+                ing.invalidate();
+    }
+
+    protected void invalidate()
+    {
+        this.field_194140_c = null;
+    }
+
     public static Ingredient func_193367_a(Item p_193367_0_)
     {
         return func_193369_a(new ItemStack(p_193367_0_, 1, 32767));
@@ -108,4 +142,22 @@
 
         return field_193370_a;
     }
+
+    // Merges several vanilla Ingredients together. As a qwerk of how the json is structured, we can't tell if its a single Ingredient type or multiple so we split per item and remerge here.
+    //Only public for internal use, so we can access a private field in here.
+    public static Ingredient merge(java.util.Collection<Ingredient> parts)
+    {
+        net.minecraft.util.NonNullList<ItemStack> lst = net.minecraft.util.NonNullList.func_191196_a();
+        for (Ingredient part : parts)
+        {
+            for (ItemStack stack : part.field_193371_b)
+                lst.add(stack);
+        }
+        return new Ingredient(lst.toArray(new ItemStack[lst.size()]));
+    }
+
+    public boolean isSimple()
+    {
+        return isSimple || this == field_193370_a;
+    }
 }
