--- a/net/minecraft/item/crafting/Ingredient.java
+++ b/net/minecraft/item/crafting/Ingredient.java
@@ -28,15 +_,24 @@
 import net.minecraft.util.registry.Registry;
 
 public class Ingredient implements Predicate<ItemStack> {
+   //Because Mojang caches things... we need to invalidate them.. so... here we go..
+   private static final java.util.Set<Ingredient> INSTANCES = java.util.Collections.newSetFromMap(new java.util.WeakHashMap<Ingredient, Boolean>());
+   public static void invalidateAll() {
+      INSTANCES.stream().filter(e -> e != null).forEach(i -> i.invalidate());
+   }
+
    public static final Ingredient EMPTY = new Ingredient(Stream.empty());
    private final Ingredient.IItemList[] values;
    private ItemStack[] itemStacks;
    private IntList stackingIds;
+   private final boolean isSimple;
 
    protected Ingredient(Stream<? extends Ingredient.IItemList> p_i49381_1_) {
       this.values = p_i49381_1_.toArray((p_209360_0_) -> {
          return new Ingredient.IItemList[p_209360_0_];
       });
+      this.isSimple = !net.minecraftforge.fml.DatagenModLoader.isRunningDataGen() && !Arrays.stream(values).anyMatch(list -> list.getItems().stream().anyMatch(stack -> stack.getItem().isDamageable(stack)));
+      Ingredient.INSTANCES.add(this);
    }
 
    public ItemStack[] getItems() {
@@ -91,6 +_,10 @@
 
    public final void toNetwork(PacketBuffer p_199564_1_) {
       this.dissolve();
+      if (!this.isVanilla()) {
+         net.minecraftforge.common.crafting.CraftingHelper.write(p_199564_1_, this);
+         return;
+      }
       p_199564_1_.writeVarInt(this.itemStacks.length);
 
       for(int i = 0; i < this.itemStacks.length; ++i) {
@@ -117,6 +_,25 @@
       return this.values.length == 0 && (this.itemStacks == null || this.itemStacks.length == 0) && (this.stackingIds == null || this.stackingIds.isEmpty());
    }
 
+   protected void invalidate() {
+      this.itemStacks = null;
+      this.stackingIds = null;
+   }
+
+   public boolean isSimple() {
+      return isSimple || this == EMPTY;
+   }
+
+   private final boolean isVanilla = this.getClass() == Ingredient.class;
+   public final boolean isVanilla() {
+       return isVanilla;
+   }
+
+   public net.minecraftforge.common.crafting.IIngredientSerializer<? extends Ingredient> getSerializer() {
+      if (!isVanilla()) throw new IllegalStateException("Modders must implement Ingredient.getSerializer in their custom Ingredients: " + this);
+      return net.minecraftforge.common.crafting.VanillaIngredientSerializer.INSTANCE;
+   }
+
    public static Ingredient fromValues(Stream<? extends Ingredient.IItemList> p_209357_0_) {
       Ingredient ingredient = new Ingredient(p_209357_0_);
       return ingredient.values.length == 0 ? EMPTY : ingredient;
@@ -144,6 +_,9 @@
 
    public static Ingredient fromNetwork(PacketBuffer p_199566_0_) {
       int i = p_199566_0_.readVarInt();
+      if (i == -1) {
+         return net.minecraftforge.common.crafting.CraftingHelper.getIngredient(p_199566_0_.readResourceLocation(), p_199566_0_);
+      }
       return fromValues(Stream.generate(() -> {
          return new Ingredient.SingleItemList(p_199566_0_.readItem());
       }).limit((long)i));
@@ -151,6 +_,8 @@
 
    public static Ingredient fromJson(@Nullable JsonElement p_199802_0_) {
       if (p_199802_0_ != null && !p_199802_0_.isJsonNull()) {
+         Ingredient ret = net.minecraftforge.common.crafting.CraftingHelper.getIngredient(p_199802_0_);
+         if (ret != null) return ret;
          if (p_199802_0_.isJsonObject()) {
             return fromValues(Stream.of(valueFromJson(p_199802_0_.getAsJsonObject())));
          } else if (p_199802_0_.isJsonArray()) {
@@ -192,6 +_,12 @@
       }
    }
 
+   //Merges several vanilla Ingredients together. As a quirk of how the json is structured, we can't tell if its a single Ingredient type or multiple so we split per item and re-merge here.
+   //Only public for internal use, so we can access a private field in here.
+   public static Ingredient merge(Collection<Ingredient> parts) {
+      return fromValues(parts.stream().flatMap(i -> Arrays.stream(i.values)));
+   }
+
    public interface IItemList {
       Collection<ItemStack> getItems();
 
@@ -230,6 +_,9 @@
             list.add(new ItemStack(item));
          }
 
+         if (list.size() == 0 && !net.minecraftforge.common.ForgeConfig.SERVER.treatEmptyTagsAsAir.get()) {
+            list.add(new ItemStack(net.minecraft.block.Blocks.BARRIER).setHoverName(new net.minecraft.util.text.StringTextComponent("Empty Tag: " + TagCollectionManager.getInstance().getItems().getIdOrThrow(this.tag).toString())));
+         }
          return list;
       }
 
