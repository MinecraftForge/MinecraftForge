--- a/net/minecraft/item/crafting/ShapelessRecipe.java
+++ b/net/minecraft/item/crafting/ShapelessRecipe.java
@@ -17,12 +_,14 @@
    private final String group;
    private final ItemStack result;
    private final NonNullList<Ingredient> ingredients;
+   private final boolean isSimple;
 
    public ShapelessRecipe(ResourceLocation p_i48161_1_, String p_i48161_2_, ItemStack p_i48161_3_, NonNullList<Ingredient> p_i48161_4_) {
       this.id = p_i48161_1_;
       this.group = p_i48161_2_;
       this.result = p_i48161_3_;
       this.ingredients = p_i48161_4_;
+      this.isSimple = p_i48161_4_.stream().allMatch(Ingredient::isSimple);
    }
 
    public ResourceLocation getId() {
@@ -47,17 +_,20 @@
 
    public boolean matches(CraftingInventory p_77569_1_, World p_77569_2_) {
       RecipeItemHelper recipeitemhelper = new RecipeItemHelper();
+      java.util.List<ItemStack> inputs = new java.util.ArrayList<>();
       int i = 0;
 
       for(int j = 0; j < p_77569_1_.getContainerSize(); ++j) {
          ItemStack itemstack = p_77569_1_.getItem(j);
          if (!itemstack.isEmpty()) {
             ++i;
+            if (isSimple)
             recipeitemhelper.accountStack(itemstack, 1);
+            else inputs.add(itemstack);
          }
       }
 
-      return i == this.ingredients.size() && recipeitemhelper.canCraft(this, (IntList)null);
+      return i == this.ingredients.size() && (isSimple ? recipeitemhelper.canCraft(this, (IntList)null) : net.minecraftforge.common.util.RecipeMatcher.findMatches(inputs,  this.ingredients) != null);
    }
 
    public ItemStack assemble(CraftingInventory p_77572_1_) {
@@ -68,14 +_,15 @@
       return p_194133_1_ * p_194133_2_ >= this.ingredients.size();
    }
 
-   public static class Serializer implements IRecipeSerializer<ShapelessRecipe> {
+   public static class Serializer extends net.minecraftforge.registries.ForgeRegistryEntry<IRecipeSerializer<?>> implements IRecipeSerializer<ShapelessRecipe> {
+      private static final ResourceLocation NAME = new ResourceLocation("minecraft", "crafting_shapeless");
       public ShapelessRecipe fromJson(ResourceLocation p_199425_1_, JsonObject p_199425_2_) {
          String s = JSONUtils.getAsString(p_199425_2_, "group", "");
          NonNullList<Ingredient> nonnulllist = itemsFromJson(JSONUtils.getAsJsonArray(p_199425_2_, "ingredients"));
          if (nonnulllist.isEmpty()) {
             throw new JsonParseException("No ingredients for shapeless recipe");
-         } else if (nonnulllist.size() > 9) {
-            throw new JsonParseException("Too many ingredients for shapeless recipe");
+         } else if (nonnulllist.size() > ShapedRecipe.MAX_WIDTH * ShapedRecipe.MAX_HEIGHT) {
+            throw new JsonParseException("Too many ingredients for shapeless recipe the max is " + (ShapedRecipe.MAX_WIDTH * ShapedRecipe.MAX_HEIGHT));
          } else {
             ItemStack itemstack = ShapedRecipe.itemFromJson(JSONUtils.getAsJsonObject(p_199425_2_, "result"));
             return new ShapelessRecipe(p_199425_1_, s, itemstack, nonnulllist);
