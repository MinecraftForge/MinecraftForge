--- a/net/minecraft/item/crafting/ShapedRecipe.java
+++ b/net/minecraft/item/crafting/ShapedRecipe.java
@@ -21,7 +_,20 @@
 import net.minecraft.util.registry.Registry;
 import net.minecraft.world.World;
 
-public class ShapedRecipe implements ICraftingRecipe {
+public class ShapedRecipe implements ICraftingRecipe, net.minecraftforge.common.crafting.IShapedRecipe<CraftingInventory> {
+   static int MAX_WIDTH = 3;
+   static int MAX_HEIGHT = 3;
+   /**
+    * Expand the max width and height allowed in the deserializer.
+    * This should be called by modders who add custom crafting tables that are larger than the vanilla 3x3.
+    * @param width your max recipe width
+    * @param height your max recipe height
+    */
+   public static void setCraftingSize(int width, int height) {
+      if (MAX_WIDTH < width) MAX_WIDTH = width;
+      if (MAX_HEIGHT < height) MAX_HEIGHT = height;
+   }
+
    private final int width;
    private final int height;
    private final NonNullList<Ingredient> recipeItems;
@@ -109,10 +_,20 @@
       return this.width;
    }
 
+   @Override
+   public int getRecipeWidth() {
+      return getWidth();
+   }
+
    public int getHeight() {
       return this.height;
    }
 
+   @Override
+   public int getRecipeHeight() {
+      return getHeight();
+   }
+
    private static NonNullList<Ingredient> dissolvePattern(String[] p_192402_0_, Map<String, Ingredient> p_192402_1_, int p_192402_2_, int p_192402_3_) {
       NonNullList<Ingredient> nonnulllist = NonNullList.withSize(p_192402_2_ * p_192402_3_, Ingredient.EMPTY);
       Set<String> set = Sets.newHashSet(p_192402_1_.keySet());
@@ -192,15 +_,15 @@
 
    private static String[] patternFromJson(JsonArray p_192407_0_) {
       String[] astring = new String[p_192407_0_.size()];
-      if (astring.length > 3) {
-         throw new JsonSyntaxException("Invalid pattern: too many rows, 3 is maximum");
+      if (astring.length > MAX_HEIGHT) {
+         throw new JsonSyntaxException("Invalid pattern: too many rows, " + MAX_HEIGHT + " is maximum");
       } else if (astring.length == 0) {
          throw new JsonSyntaxException("Invalid pattern: empty pattern not allowed");
       } else {
          for(int i = 0; i < astring.length; ++i) {
             String s = JSONUtils.convertToString(p_192407_0_.get(i), "pattern[" + i + "]");
-            if (s.length() > 3) {
-               throw new JsonSyntaxException("Invalid pattern: too many columns, 3 is maximum");
+            if (s.length() > MAX_WIDTH) {
+               throw new JsonSyntaxException("Invalid pattern: too many columns, " + MAX_WIDTH + " is maximum");
             }
 
             if (i > 0 && astring[0].length() != s.length()) {
@@ -242,11 +_,12 @@
          throw new JsonParseException("Disallowed data tag found");
       } else {
          int i = JSONUtils.getAsInt(p_199798_0_, "count", 1);
-         return new ItemStack(item, i);
+         return net.minecraftforge.common.crafting.CraftingHelper.getItemStack(p_199798_0_, true);
       }
    }
 
-   public static class Serializer implements IRecipeSerializer<ShapedRecipe> {
+   public static class Serializer extends net.minecraftforge.registries.ForgeRegistryEntry<IRecipeSerializer<?>>  implements IRecipeSerializer<ShapedRecipe> {
+      private static final ResourceLocation NAME = new ResourceLocation("minecraft", "crafting_shaped");
       public ShapedRecipe fromJson(ResourceLocation p_199425_1_, JsonObject p_199425_2_) {
          String s = JSONUtils.getAsString(p_199425_2_, "group", "");
          Map<String, Ingredient> map = ShapedRecipe.keyFromJson(JSONUtils.getAsJsonObject(p_199425_2_, "key"));
