--- ../src_base/minecraft/net/minecraft/item/crafting/FurnaceRecipes.java
+++ ../src_work/minecraft/net/minecraft/item/crafting/FurnaceRecipes.java
@@ -1,18 +1,24 @@
 package net.minecraft.item.crafting;
 
+import java.util.Collections;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
+
+import com.google.common.collect.Lists;
+
 import net.minecraft.block.Block;
+import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
+import net.minecraftforge.StandardFurnaceRecipe;
+import net.minecraftforge.common.IFurnaceRecipe;
 
 public class FurnaceRecipes
 {
     private static final FurnaceRecipes smeltingBase = new FurnaceRecipes();
 
-    /** The list of smelting results. */
-    private Map smeltingList = new HashMap();
-    private Map experienceList = new HashMap();
+    private List<IFurnaceRecipe> recipes = Lists.newLinkedList();
 
     /**
      * Used to call methods addSmelting and getSmeltingResult.
@@ -51,25 +57,75 @@
      */
     public void addSmelting(int par1, ItemStack par2ItemStack, float par3)
     {
-        this.smeltingList.put(Integer.valueOf(par1), par2ItemStack);
-        this.experienceList.put(Integer.valueOf(par2ItemStack.itemID), Float.valueOf(par3));
+        addSmelting(new StandardFurnaceRecipe(par1, par3, par2ItemStack));
     }
 
     /**
      * Returns the smelting result of an item.
      */
+    @Deprecated // use getSmeltingResult(ItemStack)
     public ItemStack getSmeltingResult(int par1)
     {
-        return (ItemStack)this.smeltingList.get(Integer.valueOf(par1));
+        return getSmeltingResult(new ItemStack(par1, 1, 0));
+    }
+    
+    public ItemStack getSmeltingResult(ItemStack smeltingItem)
+    {
+        IFurnaceRecipe r = getRecipe(smeltingItem);
+        return r == null ? null : r.getResult(smeltingItem);
+    }
+    
+    private IFurnaceRecipe getRecipe(ItemStack smeltingItem)
+    {
+        if (smeltingItem == null) {
+            return null;
+        }
+        for (IFurnaceRecipe recipe : recipes)
+        {
+            if (recipe.matches(smeltingItem))
+            {
+                return recipe;
+            }
+        }
+        return null;
+    }
+    
+    public float getExperience(ItemStack item, EntityPlayer player)
+    {
+        IFurnaceRecipe r = getRecipe(item);
+        return r == null ? 0 : r.getExperience(item, player);
+    }
+    
+    public void addSmelting(int itemID, int metadata, ItemStack itemstack, float experience)
+    {
+        addSmelting(new StandardFurnaceRecipe.WithMeta(itemID, metadata, experience, itemstack));
+    }
+    
+    public void addSmelting(IFurnaceRecipe recipe)
+    {
+        recipes.add(recipe);
+    }
+    
+    public List<IFurnaceRecipe> getRecipes()
+    {
+        return recipes;
+    }
+    
+    public int getSmeltTime(ItemStack smeltingItem)
+    {
+        IFurnaceRecipe r = getRecipe(smeltingItem);
+        return r == null ? 200 : r.getSmeltTime(smeltingItem);
     }
 
+    @Deprecated // use getRecipes()
     public Map getSmeltingList()
     {
-        return this.smeltingList;
+        return Collections.emptyMap();
     }
 
+    @Deprecated // use getExperience(ItemStack)
     public float getExperience(int par1)
     {
-        return this.experienceList.containsKey(Integer.valueOf(par1)) ? ((Float)this.experienceList.get(Integer.valueOf(par1))).floatValue() : 0.0F;
+        return 0;
     }
 }
