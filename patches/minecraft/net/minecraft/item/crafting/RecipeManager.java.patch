--- a/net/minecraft/item/crafting/RecipeManager.java
+++ b/net/minecraft/item/crafting/RecipeManager.java
@@ -25,7 +25,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class RecipeManager implements IResourceManagerReloadListener {
+public class RecipeManager extends net.minecraftforge.common.extensions.ForgeRecipeManager {
    private static final Logger field_199521_c = LogManager.getLogger();
    public static final int field_199519_a = "recipes/".length();
    public static final int field_199520_b = ".json".length();
@@ -36,9 +36,10 @@
       Gson gson = (new GsonBuilder()).setPrettyPrinting().disableHtmlEscaping().create();
       this.field_199523_e = false;
       this.field_199522_d.clear();
+      super.func_195410_a(p_195410_1_);
 
       for(ResourceLocation resourcelocation : p_195410_1_.func_199003_a("recipes", (p_199516_0_) -> {
-         return p_199516_0_.endsWith(".json");
+         return p_199516_0_.endsWith(".json") && !p_199516_0_.startsWith("_"); //Forge filter anything beginning with "_" as it's used for metadata.
       })) {
          String s = resourcelocation.func_110623_a();
          ResourceLocation resourcelocation1 = new ResourceLocation(resourcelocation.func_110624_b(), s.substring(field_199519_a, s.length() - field_199520_b));
@@ -47,6 +48,8 @@
             JsonObject jsonobject = JsonUtils.func_188178_a(gson, IOUtils.toString(iresource.func_199027_b(), StandardCharsets.UTF_8), JsonObject.class);
             if (jsonobject == null) {
                field_199521_c.error("Couldn't load recipe {} as it's null or empty", (Object)resourcelocation1);
+            } else if (jsonobject.has("conditions") && !net.minecraftforge.common.crafting.CraftingHelper.processConditions(JsonUtils.func_151214_t(jsonobject, "conditions"))) {
+               field_199521_c.info("Skipping loading recipe {} as it's conditions were not met", resourcelocation1);
             } else {
                this.func_199509_a(RecipeSerializers.func_199572_a(resourcelocation1, jsonobject));
             }
@@ -67,9 +70,12 @@
          throw new IllegalStateException("Duplicate recipe ignored with ID " + p_199509_1_.func_199560_c());
       } else {
          this.field_199522_d.put(p_199509_1_.func_199560_c(), p_199509_1_);
+         if(!p_199509_1_.getType().getBaseClass().isAssignableFrom(p_199509_1_.getClass())) throw new IllegalStateException(String.format("Recipe type %s is not valid for class %s", p_199509_1_.getType().getBaseClass().getName(), p_199509_1_.getClass().getName()));
+         ((java.util.List) getRecipes(p_199509_1_.getType())).add(p_199509_1_);
       }
    }
 
+   @Deprecated //Forge Use getResult(IInventory, World, RecipeType)
    public ItemStack func_199514_a(IInventory p_199514_1_, World p_199514_2_) {
       for(IRecipe irecipe : this.field_199522_d.values()) {
          if (irecipe.func_77569_a(p_199514_1_, p_199514_2_)) {
@@ -81,6 +87,7 @@
    }
 
    @Nullable
+   @Deprecated //Forge: Use getRecipe(IInventory, World, RecipeType)
    public IRecipe func_199515_b(IInventory p_199515_1_, World p_199515_2_) {
       for(IRecipe irecipe : this.field_199522_d.values()) {
          if (irecipe.func_77569_a(p_199515_1_, p_199515_2_)) {
@@ -91,6 +98,7 @@
       return null;
    }
 
+   @Deprecated //Forge: Use getRemainingItems(IInventory, World, RecipeType)
    public NonNullList<ItemStack> func_199513_c(IInventory p_199513_1_, World p_199513_2_) {
       for(IRecipe irecipe : this.field_199522_d.values()) {
          if (irecipe.func_77569_a(p_199513_1_, p_199513_2_)) {
@@ -123,5 +131,7 @@
    @OnlyIn(Dist.CLIENT)
    public void func_199518_d() {
       this.field_199522_d.clear();
+      this.sortedRecipes.clear();
    }
+
 }
