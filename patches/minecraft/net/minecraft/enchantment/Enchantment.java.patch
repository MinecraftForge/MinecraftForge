--- ../src_base/minecraft/net/minecraft/enchantment/Enchantment.java
+++ ../src_work/minecraft/net/minecraft/enchantment/Enchantment.java
@@ -1,10 +1,20 @@
 package net.minecraft.enchantment;
 
+import java.awt.List;
 import java.util.ArrayList;
+import java.util.HashMap;
+
+import com.google.common.collect.ObjectArrays;
+
+import cpw.mods.fml.common.FMLLog;
+
 import net.minecraft.entity.EntityLiving;
 import net.minecraft.item.ItemStack;
+import net.minecraft.nbt.NBTTagCompound;
+import net.minecraft.nbt.NBTTagList;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.StatCollector;
+import net.minecraftforge.common.ForgeVersion;
 
 public abstract class Enchantment
 {
@@ -205,6 +215,27 @@
         return this.type.canEnchantItem(par1ItemStack.getItem());
     }
 
+    /**
+     * This applies specifically to applying at the enchanting table. The other method {@link #func_92037_a(ItemStack)}
+     * applies for <i>all possible</i> enchantments.
+     * @param stack
+     * @return
+     */
+    public boolean canApplyAtEnchantingTable(ItemStack stack)
+    {
+        return this.type.canEnchantItem(stack.getItem());
+    }
+
+    /**
+     * Add to the list of enchantments applicable by the anvil from a book
+     *
+     * @param enchantment
+     */
+    public static void addToBookList(Enchantment enchantment)
+    {
+        ObjectArrays.concat(field_92090_c, enchantment);
+    }
+
     static
     {
         ArrayList var0 = new ArrayList();
@@ -223,4 +254,30 @@
 
         field_92090_c = (Enchantment[])var0.toArray(new Enchantment[0]);
     }
+    
+    /* =========================================================== FORGE START ===============================================================*/
+    
+    public static HashMap<String, Enchantment> forgeEnchants = new HashMap();
+    
+    protected Enchantment(String enchantName, int enchantWeight, EnumEnchantmentType enchantType)
+    {
+        this.effectId = -1;
+        this.weight = enchantWeight;
+        this.type = enchantType;
+        this.name = enchantName;
+
+        if (forgeEnchants.containsKey(name))
+            throw new IllegalArgumentException("Enchantment " + name + " already exists!");
+        FMLLog.info("Added Enchantment %s", name);
+        forgeEnchants.put(name, this);
+    }
+    
+    public String getInternalName() {
+        return name;
+    }
+    
+    public static Enchantment getEnchantmentFromObject(Object input) {
+        return input instanceof Integer ? Enchantment.enchantmentsList[(Integer)input] : Enchantment.forgeEnchants.get((String)input);
+    }
+    
 }
