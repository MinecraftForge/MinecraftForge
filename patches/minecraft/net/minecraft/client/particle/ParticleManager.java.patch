--- ../src-base/minecraft/net/minecraft/client/particle/ParticleManager.java
+++ ../src-work/minecraft/net/minecraft/client/particle/ParticleManager.java
@@ -153,6 +153,7 @@
 
     public void func_78873_a(Particle p_78873_1_)
     {
+        if (checkParticle(p_78873_1_)) // Forge: don't allow invalid particles to be added
         this.field_187241_h.add(p_78873_1_);
     }
 
@@ -409,7 +410,7 @@
 
     public void func_180533_a(BlockPos p_180533_1_, IBlockState p_180533_2_)
     {
-        if (p_180533_2_.func_185904_a() != Material.field_151579_a)
+        if (!p_180533_2_.func_177230_c().isAir(p_180533_2_, this.field_78878_a, p_180533_1_) && !p_180533_2_.func_177230_c().addDestroyEffects(field_78878_a, p_180533_1_, this))
         {
             p_180533_2_ = p_180533_2_.func_185899_b(this.field_78878_a, p_180533_1_);
             int i = 4;
@@ -493,4 +494,30 @@
 
         return "" + i;
     }
+
+    /* ======================================== FORGE START ===================================== */
+
+    public void addBlockHitEffects(BlockPos pos, net.minecraft.util.math.RayTraceResult target)
+    {
+        IBlockState state = field_78878_a.func_180495_p(pos);
+        if (state != null && !state.func_177230_c().addHitEffects(state, field_78878_a, target, this))
+        {
+            func_180532_a(pos, target.field_178784_b);
+        }
+    }
+
+    private boolean checkParticle(Particle particle)
+    {
+        java.util.Objects.requireNonNull(particle); // make NPEs from null particles traceable
+        if (particle.field_187122_b != this.field_78878_a)
+        {
+            net.minecraftforge.fml.common.FMLLog.log.warn(
+                    "An attempt was made to spawn a particle (type: {}) from an invalid world (was: {}, expected: {}). " +
+                            "This can cause serious thread-safety issues and should be reported to the mod responsible.",
+                    particle.getClass().getName(), particle.field_187122_b, this.field_78878_a
+            );
+            return false;
+        }
+        return true;
+    }
 }
