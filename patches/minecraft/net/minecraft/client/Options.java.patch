--- a/net/minecraft/client/Options.java
+++ b/net/minecraft/client/Options.java
@@ -544,7 +_,8 @@
    }, new OptionInstance.LazyEnum<>(() -> {
       return Stream.concat(Stream.of(""), Minecraft.m_91087_().m_91106_().m_194525_().stream()).toList();
    }, (p_232011_) -> {
-      return Minecraft.m_91087_().m_91396_() && p_232011_ != "" && !Minecraft.m_91087_().m_91106_().m_194525_().contains(p_232011_) ? Optional.empty() : Optional.of(p_232011_);
+      // FORGE: fix incorrect string comparison - PR #8767
+      return Minecraft.m_91087_().m_91396_() && (p_232011_ == null || !p_232011_.isEmpty()) && !Minecraft.m_91087_().m_91106_().m_194525_().contains(p_232011_) ? Optional.empty() : Optional.of(p_232011_);
    }, Codec.STRING), "", (p_275584_) -> {
       SoundManager soundmanager = Minecraft.m_91087_().m_91106_();
       soundmanager.m_194526_();
@@ -868,6 +_,7 @@
    }
 
    public Options(Minecraft p_92138_, File p_92139_) {
+      setForgeKeybindProperties();
       this.f_92060_ = p_92138_;
       this.f_92110_ = new File(p_92139_, "options.txt");
       boolean flag = p_92138_.m_91103_();
@@ -989,11 +_,20 @@
       p_168428_.m_213982_("telemetryOptInExtra", this.f_260461_);
       this.f_263744_ = p_168428_.m_142682_("onboardAccessibility", this.f_263744_);
 
+      processOptionsForge(p_168428_);
+   }
+   // FORGE: split off to allow reloading options after mod loading is done
+   private void processOptionsForge(Options.FieldAccess p_168428_)
+   {
       for(KeyMapping keymapping : this.f_92059_) {
-         String s = keymapping.m_90865_();
+         String s = keymapping.m_90865_() + (keymapping.getKeyModifier() != net.minecraftforge.client.settings.KeyModifier.NONE ? ":" + keymapping.getKeyModifier() : "");
          String s1 = p_168428_.m_141943_("key_" + keymapping.m_90860_(), s);
          if (!s.equals(s1)) {
-            keymapping.m_90848_(InputConstants.m_84851_(s1));
+            if (s1.indexOf(':') != -1) {
+               String[] pts = s1.split(":");
+               keymapping.setKeyModifierAndCode(net.minecraftforge.client.settings.KeyModifier.valueFromString(pts[1]), InputConstants.m_84851_(pts[0]));
+            } else
+               keymapping.setKeyModifierAndCode(net.minecraftforge.client.settings.KeyModifier.NONE, InputConstants.m_84851_(s1));
          }
       }
 
@@ -1012,6 +_,9 @@
    }
 
    public void m_92140_() {
+      this.load(false);
+   }
+   public void load(boolean limited) {
       try {
          if (!this.f_92110_.exists()) {
             return;
@@ -1040,7 +_,8 @@
             }
          }
 
-         this.m_168427_(new Options.FieldAccess() {
+         java.util.function.Consumer<FieldAccess> processor = limited ? this::processOptionsForge : this::m_168427_;
+         processor.accept(new Options.FieldAccess() {
             @Nullable
             private String m_168458_(String p_168459_) {
                return compoundtag1.m_128441_(p_168459_) ? compoundtag1.m_128461_(p_168459_) : null;
@@ -1203,6 +_,7 @@
    }
 
    public void m_92172_() {
+      if (net.minecraftforge.client.loading.ClientModLoader.isLoading()) return; //Don't save settings before mods add keybindigns and the like to prevent them from being deleted.
       if (this.f_92060_.f_91074_ != null) {
          int i = 0;
 
@@ -1267,6 +_,23 @@
       }
 
       p_92146_.m_10509_(set);
+   }
+
+   private void setForgeKeybindProperties() {
+      net.minecraftforge.client.settings.KeyConflictContext inGame = net.minecraftforge.client.settings.KeyConflictContext.IN_GAME;
+      f_92085_.setKeyConflictContext(inGame);
+      f_92086_.setKeyConflictContext(inGame);
+      f_92087_.setKeyConflictContext(inGame);
+      f_92088_.setKeyConflictContext(inGame);
+      f_92089_.setKeyConflictContext(inGame);
+      f_92090_.setKeyConflictContext(inGame);
+      f_92091_.setKeyConflictContext(inGame);
+      f_92096_.setKeyConflictContext(inGame);
+      f_92098_.setKeyConflictContext(inGame);
+      f_92099_.setKeyConflictContext(inGame);
+      f_92100_.setKeyConflictContext(inGame);
+      f_92103_.setKeyConflictContext(inGame);
+      f_92104_.setKeyConflictContext(inGame);
    }
 
    public CameraType m_92176_() {
