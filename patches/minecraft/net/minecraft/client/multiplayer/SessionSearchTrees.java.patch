--- a/net/minecraft/client/multiplayer/SessionSearchTrees.java
+++ b/net/minecraft/client/multiplayer/SessionSearchTrees.java
@@ -31,8 +_,8 @@
     private static final SessionSearchTrees.Key RECIPE_COLLECTIONS = new SessionSearchTrees.Key();
     public static final SessionSearchTrees.Key CREATIVE_NAMES = new SessionSearchTrees.Key();
     public static final SessionSearchTrees.Key CREATIVE_TAGS = new SessionSearchTrees.Key();
-    private CompletableFuture<SearchTree<ItemStack>> creativeByNameSearch = CompletableFuture.completedFuture(SearchTree.empty());
-    private CompletableFuture<SearchTree<ItemStack>> creativeByTagSearch = CompletableFuture.completedFuture(SearchTree.empty());
+    private CompletableFuture<SearchTree<ItemStack>> EMPTY = CompletableFuture.completedFuture(SearchTree.empty());
+    private Map<SessionSearchTrees.Key, CompletableFuture<SearchTree<ItemStack>>> creativeSearch = new IdentityHashMap<>();
     private CompletableFuture<SearchTree<RecipeCollection>> recipeSearch = CompletableFuture.completedFuture(SearchTree.empty());
     private final Map<SessionSearchTrees.Key, Runnable> reloaders = new IdentityHashMap<>();
 
@@ -82,44 +_,52 @@
     }
 
     public void updateCreativeTags(List<ItemStack> p_344581_) {
+        for (var entry : net.minecraftforge.client.CreativeModeTabSearchRegistry.getTagSearchKeys().entrySet())
         this.register(
-            CREATIVE_TAGS,
+            entry.getValue(),
             () -> {
-                CompletableFuture<?> completablefuture = this.creativeByTagSearch;
-                this.creativeByTagSearch = CompletableFuture.supplyAsync(
-                    () -> new IdSearchTree<>(p_342206_ -> p_342206_.getTags().map(TagKey::location), p_344581_), Util.backgroundExecutor()
-                );
+                var items = entry.getKey() == net.minecraft.world.item.CreativeModeTabs.searchTab() ? p_344581_ : List.copyOf(entry.getKey().getDisplayItems());
+                CompletableFuture<?> completablefuture = this.creativeSearch.getOrDefault(entry.getValue(), EMPTY);
+                this.creativeSearch.put(entry.getValue(), CompletableFuture.supplyAsync(
+                    () -> new IdSearchTree<>(p_342206_ -> p_342206_.getTags().map(TagKey::location), items), Util.backgroundExecutor()
+                ));
                 completablefuture.cancel(true);
             }
         );
     }
 
     public SearchTree<ItemStack> creativeTagSearch() {
-        return this.creativeByTagSearch.join();
+        return this.getSearchTree(CREATIVE_TAGS);
     }
 
     public void updateCreativeTooltips(HolderLookup.Provider p_343364_, List<ItemStack> p_342500_) {
+        for (var entry : net.minecraftforge.client.CreativeModeTabSearchRegistry.getNameSearchKeys().entrySet())
         this.register(
-            CREATIVE_NAMES,
+            entry.getValue(),
             () -> {
+                var items = entry.getKey() == net.minecraft.world.item.CreativeModeTabs.searchTab() ? p_342500_ : List.copyOf(entry.getKey().getDisplayItems());
                 Item.TooltipContext item$tooltipcontext = Item.TooltipContext.of(p_343364_);
                 TooltipFlag tooltipflag = TooltipFlag.Default.NORMAL.asCreative();
-                CompletableFuture<?> completablefuture = this.creativeByNameSearch;
-                this.creativeByNameSearch = CompletableFuture.supplyAsync(
+                CompletableFuture<?> completablefuture = this.creativeSearch.getOrDefault(entry.getValue(), EMPTY);
+                this.creativeSearch.put(entry.getValue(), CompletableFuture.supplyAsync(
                     () -> new FullTextSearchTree<>(
                             p_345254_ -> getTooltipLines(Stream.of(p_345254_), item$tooltipcontext, tooltipflag),
                             p_344415_ -> p_344415_.getItemHolder().unwrapKey().map(ResourceKey::location).stream(),
-                            p_342500_
+                            items
                         ),
                     Util.backgroundExecutor()
-                );
+                ));
                 completablefuture.cancel(true);
             }
         );
     }
 
     public SearchTree<ItemStack> creativeNameSearch() {
-        return this.creativeByNameSearch.join();
+        return this.getSearchTree(CREATIVE_NAMES);
+    }
+
+    public SearchTree<ItemStack> getSearchTree(SessionSearchTrees.Key key) {
+        return this.creativeSearch.getOrDefault(key, EMPTY).join();
     }
 
     @OnlyIn(Dist.CLIENT)
