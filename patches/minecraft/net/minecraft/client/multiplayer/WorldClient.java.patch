--- ../src_base/minecraft/net/minecraft/client/multiplayer/WorldClient.java
+++ ../src_work/minecraft/net/minecraft/client/multiplayer/WorldClient.java
@@ -29,6 +29,9 @@
 import net.minecraft.world.chunk.IChunkProvider;
 import net.minecraft.world.storage.SaveHandlerMP;
 
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.world.WorldEvent;
+
 @SideOnly(Side.CLIENT)
 public class WorldClient extends World
 {
@@ -59,8 +62,11 @@
         super(new SaveHandlerMP(), "MpServer", WorldProvider.getProviderForDimension(par3), par2WorldSettings, par5Profiler, par6ILogAgent);
         this.sendQueue = par1NetClientHandler;
         this.difficultySetting = par4;
+        this.mapStorage = par1NetClientHandler.mapStorage;
+        this.isRemote = true;
+        finishSetup();
         this.setSpawnLocation(8, 64, 8);
-        this.mapStorage = par1NetClientHandler.mapStorage;
+        MinecraftForge.EVENT_BUS.post(new WorldEvent.Load(this));
     }
 
     /**
@@ -117,7 +123,7 @@
      * plays random cave ambient sounds and runs updateTick on random blocks within each chunk in the vacinity of a
      * player
      */
-    protected void tickBlocksAndAmbiance()
+    /*protected void tickBlocksAndAmbiance()
     {
         super.tickBlocksAndAmbiance();
         this.previousActiveChunkSet.retainAll(this.activeChunkSet);
@@ -151,7 +157,24 @@
                 }
             }
         }
-    }
+    }*/
+    // MCPC+ start
+    /**
+     * plays random cave ambient sounds and runs updateTick on random blocks within each chunk in the vacinity of a
+     * player
+     */
+    protected void tickBlocksAndAmbiance()
+    {
+        try
+        {
+            this.setActivePlayerChunksAndCheckLight();
+        }
+        catch (Exception e)
+        {
+            org.bukkit.craftbukkit.util.ExceptionReporter.handle(e, "Spigot has detected an unexpected exception while ticking chunks");
+        }
+    }
+    // MCPC+ end
 
     public void doPreChunk(int par1, int par2, boolean par3)
     {
@@ -289,6 +312,12 @@
      * Updates all weather states.
      */
     protected void updateWeather()
+    {
+        super.updateWeather();
+    }
+
+    @Override
+    public void updateWeatherBody()
     {
         if (!this.provider.hasNoSky)
         {
