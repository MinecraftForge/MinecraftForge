--- a/net/minecraft/client/KeyMapping.java
+++ b/net/minecraft/client/KeyMapping.java
@@ -14,9 +_,9 @@
 import net.minecraftforge.api.distmarker.OnlyIn;
 
 @OnlyIn(Dist.CLIENT)
-public class KeyMapping implements Comparable<KeyMapping> {
+public class KeyMapping implements Comparable<KeyMapping>, net.minecraftforge.client.extensions.IForgeKeyMapping {
    private static final Map<String, KeyMapping> f_90809_ = Maps.newHashMap();
-   private static final Map<InputConstants.Key, KeyMapping> f_90810_ = Maps.newHashMap();
+   private static final net.minecraftforge.client.settings.KeyBindingMap f_90810_ = new net.minecraftforge.client.settings.KeyBindingMap();
    private static final Set<String> f_90811_ = Sets.newHashSet();
    public static final String f_167805_ = "key.categories.movement";
    public static final String f_167806_ = "key.categories.misc";
@@ -42,7 +_,7 @@
    private int f_90818_;
 
    public static void m_90835_(InputConstants.Key p_90836_) {
-      KeyMapping keymapping = f_90810_.get(p_90836_);
+      KeyMapping keymapping = f_90810_.lookupActive(p_90836_);
       if (keymapping != null) {
          ++keymapping.f_90818_;
       }
@@ -50,7 +_,7 @@
    }
 
    public static void m_90837_(InputConstants.Key p_90838_, boolean p_90839_) {
-      KeyMapping keymapping = f_90810_.get(p_90838_);
+      for (KeyMapping keymapping : f_90810_.lookupAll(p_90838_))
       if (keymapping != null) {
          keymapping.m_7249_(p_90839_);
       }
@@ -74,10 +_,10 @@
    }
 
    public static void m_90854_() {
-      f_90810_.clear();
+      f_90810_.clearMap();
 
       for(KeyMapping keymapping : f_90809_.values()) {
-         f_90810_.put(keymapping.f_90816_, keymapping);
+         f_90810_.addKey(keymapping.f_90816_, keymapping);
       }
 
    }
@@ -92,12 +_,12 @@
       this.f_90814_ = this.f_90816_;
       this.f_90815_ = p_90828_;
       f_90809_.put(p_90825_, this);
-      f_90810_.put(this.f_90816_, this);
+      f_90810_.addKey(this.f_90816_, this);
       f_90811_.add(p_90828_);
    }
 
    public boolean m_90857_() {
-      return this.f_90817_;
+      return this.f_90817_ && isConflictContextAndModifierActive();
    }
 
    public String m_90858_() {
@@ -131,7 +_,13 @@
    }
 
    public int compareTo(KeyMapping p_90841_) {
-      return this.f_90815_.equals(p_90841_.f_90815_) ? I18n.m_118938_(this.f_90813_).compareTo(I18n.m_118938_(p_90841_.f_90813_)) : f_90812_.get(this.f_90815_).compareTo(f_90812_.get(p_90841_.f_90815_));
+      if (this.f_90815_.equals(p_90841_.f_90815_)) return I18n.m_118938_(this.f_90813_).compareTo(I18n.m_118938_(p_90841_.f_90813_));
+      Integer tCat = f_90812_.get(this.f_90815_);
+      Integer oCat = f_90812_.get(p_90841_.f_90815_);
+      if (tCat == null && oCat != null) return 1;
+      if (tCat != null && oCat == null) return -1;
+      if (tCat == null && oCat == null) return I18n.m_118938_(this.f_90815_).compareTo(I18n.m_118938_(p_90841_.f_90815_));
+      return  tCat.compareTo(oCat);
    }
 
    public static Supplier<Component> m_90842_(String p_90843_) {
@@ -142,6 +_,20 @@
    }
 
    public boolean m_90850_(KeyMapping p_90851_) {
+      if (getKeyConflictContext().conflicts(p_90851_.getKeyConflictContext()) || p_90851_.getKeyConflictContext().conflicts(getKeyConflictContext())) {
+         net.minecraftforge.client.settings.KeyModifier keyModifier = getKeyModifier();
+         net.minecraftforge.client.settings.KeyModifier otherKeyModifier = p_90851_.getKeyModifier();
+         if (keyModifier.matches(p_90851_.getKey()) || otherKeyModifier.matches(getKey())) {
+            return true;
+         } else if (getKey().equals(p_90851_.getKey())) {
+            // IN_GAME key contexts have a conflict when at least one modifier is NONE.
+            // For example: If you hold shift to crouch, you can still press E to open your inventory. This means that a Shift+E hotkey is in conflict with E.
+            // GUI and other key contexts do not have this limitation.
+            return keyModifier == otherKeyModifier ||
+               (getKeyConflictContext().conflicts(net.minecraftforge.client.settings.KeyConflictContext.IN_GAME) &&
+               (keyModifier == net.minecraftforge.client.settings.KeyModifier.NONE || otherKeyModifier == net.minecraftforge.client.settings.KeyModifier.NONE));
+         }
+      }
       return this.f_90816_.equals(p_90851_.f_90816_);
    }
 
@@ -162,11 +_,13 @@
    }
 
    public Component m_90863_() {
+      return getKeyModifier().getCombinedName(f_90816_, () -> {
       return this.f_90816_.m_84875_();
+      });
    }
 
    public boolean m_90864_() {
-      return this.f_90816_.equals(this.f_90814_);
+      return this.f_90816_.equals(this.f_90814_) && getKeyModifier() == getKeyModifierDefault();
    }
 
    public String m_90865_() {
@@ -176,4 +_,84 @@
    public void m_7249_(boolean p_90846_) {
       this.f_90817_ = p_90846_;
    }
+
+   /****************** Forge Start *****************************/
+   private net.minecraftforge.client.settings.KeyModifier keyModifierDefault = net.minecraftforge.client.settings.KeyModifier.NONE;
+   private net.minecraftforge.client.settings.KeyModifier keyModifier = net.minecraftforge.client.settings.KeyModifier.NONE;
+   private net.minecraftforge.client.settings.IKeyConflictContext keyConflictContext = net.minecraftforge.client.settings.KeyConflictContext.UNIVERSAL;
+
+   /**
+    * Convenience constructor for creating KeyBindings with keyConflictContext set.
+    */
+   public KeyMapping(String description, net.minecraftforge.client.settings.IKeyConflictContext keyConflictContext, final InputConstants.Type inputType, final int keyCode, String category) {
+       this(description, keyConflictContext, inputType.m_84895_(keyCode), category);
+   }
+
+   /**
+    * Convenience constructor for creating KeyBindings with keyConflictContext set.
+    */
+   public KeyMapping(String description, net.minecraftforge.client.settings.IKeyConflictContext keyConflictContext, InputConstants.Key keyCode, String category) {
+       this(description, keyConflictContext, net.minecraftforge.client.settings.KeyModifier.NONE, keyCode, category);
+   }
+
+   /**
+    * Convenience constructor for creating KeyBindings with keyConflictContext and keyModifier set.
+    */
+   public KeyMapping(String description, net.minecraftforge.client.settings.IKeyConflictContext keyConflictContext, net.minecraftforge.client.settings.KeyModifier keyModifier, final InputConstants.Type inputType, final int keyCode, String category) {
+       this(description, keyConflictContext, keyModifier, inputType.m_84895_(keyCode), category);
+   }
+
+   /**
+    * Convenience constructor for creating KeyBindings with keyConflictContext and keyModifier set.
+    */
+   public KeyMapping(String description, net.minecraftforge.client.settings.IKeyConflictContext keyConflictContext, net.minecraftforge.client.settings.KeyModifier keyModifier, InputConstants.Key keyCode, String category) {
+      this.f_90813_ = description;
+      this.f_90816_ = keyCode;
+      this.f_90814_ = keyCode;
+      this.f_90815_ = category;
+      this.keyConflictContext = keyConflictContext;
+      this.keyModifier = keyModifier;
+      this.keyModifierDefault = keyModifier;
+      if (this.keyModifier.matches(keyCode))
+         this.keyModifier = net.minecraftforge.client.settings.KeyModifier.NONE;
+      f_90809_.put(description, this);
+      f_90810_.addKey(keyCode, this);
+      f_90811_.add(category);
+   }
+
+   @Override
+   public InputConstants.Key getKey() {
+       return this.f_90816_;
+   }
+
+   @Override
+   public void setKeyConflictContext(net.minecraftforge.client.settings.IKeyConflictContext keyConflictContext) {
+       this.keyConflictContext = keyConflictContext;
+   }
+
+   @Override
+   public net.minecraftforge.client.settings.IKeyConflictContext getKeyConflictContext() {
+       return keyConflictContext;
+   }
+
+   @Override
+   public net.minecraftforge.client.settings.KeyModifier getKeyModifierDefault() {
+       return keyModifierDefault;
+   }
+
+   @Override
+   public net.minecraftforge.client.settings.KeyModifier getKeyModifier() {
+       return keyModifier;
+   }
+
+   @Override
+   public void setKeyModifierAndCode(net.minecraftforge.client.settings.KeyModifier keyModifier, InputConstants.Key keyCode) {
+       this.f_90816_ = keyCode;
+       if (keyModifier.matches(keyCode))
+           keyModifier = net.minecraftforge.client.settings.KeyModifier.NONE;
+       f_90810_.removeKey(this);
+       this.keyModifier = keyModifier;
+       f_90810_.addKey(keyCode, this);
+   }
+   /****************** Forge End *****************************/
 }
