--- a/net/minecraft/client/resources/model/MultiPartBakedModel.java
+++ b/net/minecraft/client/resources/model/MultiPartBakedModel.java
@@ -21,7 +_,7 @@
 import org.apache.commons.lang3.tuple.Pair;
 
 @OnlyIn(Dist.CLIENT)
-public class MultiPartBakedModel implements BakedModel {
+public class MultiPartBakedModel implements net.minecraftforge.client.model.IDynamicBakedModel {
    private final List<Pair<Predicate<BlockState>, BakedModel>> f_119459_;
    protected final boolean f_119453_;
    protected final boolean f_119454_;
@@ -30,10 +_,12 @@
    protected final ItemTransforms f_119457_;
    protected final ItemOverrides f_119458_;
    private final Map<BlockState, BitSet> f_119460_ = new Object2ObjectOpenCustomHashMap<>(Util.m_137583_());
+   private final BakedModel defaultModel;
 
    public MultiPartBakedModel(List<Pair<Predicate<BlockState>, BakedModel>> p_119462_) {
       this.f_119459_ = p_119462_;
       BakedModel bakedmodel = p_119462_.iterator().next().getRight();
+      this.defaultModel = bakedmodel;
       this.f_119453_ = bakedmodel.m_7541_();
       this.f_119454_ = bakedmodel.m_7539_();
       this.f_119455_ = bakedmodel.m_7547_();
@@ -42,7 +_,8 @@
       this.f_119458_ = bakedmodel.m_7343_();
    }
 
-   public List<BakedQuad> m_213637_(@Nullable BlockState p_235050_, @Nullable Direction p_235051_, RandomSource p_235052_) {
+   // FORGE: Implement our overloads (here and below) so child models can have custom logic
+   public List<BakedQuad> getQuads(@Nullable BlockState p_235050_, @Nullable Direction p_235051_, RandomSource p_235052_, net.minecraftforge.client.model.data.ModelData modelData, @org.jetbrains.annotations.Nullable net.minecraft.client.renderer.RenderType renderType) {
       if (p_235050_ == null) {
          return Collections.emptyList();
       } else {
@@ -60,16 +_,17 @@
             this.f_119460_.put(p_235050_, bitset);
          }
 
-         List<BakedQuad> list = Lists.newArrayList();
+         List<List<BakedQuad>> list = Lists.newArrayList();
          long k = p_235052_.m_188505_();
 
          for(int j = 0; j < bitset.length(); ++j) {
             if (bitset.get(j)) {
-               list.addAll(this.f_119459_.get(j).getRight().m_213637_(p_235050_, p_235051_, RandomSource.m_216335_(k)));
+               var model = this.f_119459_.get(j).getRight();
+               list.add(model.getQuads(p_235050_, p_235051_, RandomSource.m_216335_(k), net.minecraftforge.client.model.data.MultipartModelData.resolve(modelData, model), renderType));
             }
          }
 
-         return list;
+         return net.minecraftforge.common.util.ConcatenatedListView.of(list);
       }
    }
 
@@ -77,6 +_,14 @@
       return this.f_119453_;
    }
 
+   public boolean useAmbientOcclusion(BlockState state) {
+      return this.defaultModel.useAmbientOcclusion(state);
+   }
+
+   public boolean useAmbientOcclusion(BlockState state, net.minecraft.client.renderer.RenderType renderType) {
+      return this.defaultModel.useAmbientOcclusion(state, renderType);
+   }
+
    public boolean m_7539_() {
       return this.f_119454_;
    }
@@ -89,12 +_,22 @@
       return false;
    }
 
+   @Deprecated
    public TextureAtlasSprite m_6160_() {
       return this.f_119456_;
    }
 
+   public TextureAtlasSprite getParticleIcon(net.minecraftforge.client.model.data.ModelData modelData) {
+      return this.defaultModel.getParticleIcon(modelData);
+   }
+
+   @Deprecated
    public ItemTransforms m_7442_() {
       return this.f_119457_;
+   }
+
+   public BakedModel applyTransform(net.minecraft.client.renderer.block.model.ItemTransforms.TransformType transformType, com.mojang.blaze3d.vertex.PoseStack poseStack, boolean applyLeftHandTransform) {
+      return this.defaultModel.applyTransform(transformType, poseStack, applyLeftHandTransform);
    }
 
    public ItemOverrides m_7343_() {
