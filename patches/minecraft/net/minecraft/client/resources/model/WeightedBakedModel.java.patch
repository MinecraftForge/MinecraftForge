--- a/net/minecraft/client/resources/model/WeightedBakedModel.java
+++ b/net/minecraft/client/resources/model/WeightedBakedModel.java
@@ -17,7 +_,7 @@
 import net.minecraftforge.api.distmarker.OnlyIn;
 
 @OnlyIn(Dist.CLIENT)
-public class WeightedBakedModel implements BakedModel {
+public class WeightedBakedModel implements net.minecraftforge.client.model.IDynamicBakedModel {
    private final int totalWeight;
    private final List<WeightedEntry.Wrapper<BakedModel>> list;
    private final BakedModel wrapped;
@@ -28,9 +_,10 @@
       this.wrapped = p_119544_.get(0).getData();
    }
 
-   public List<BakedQuad> getQuads(@Nullable BlockState p_235058_, @Nullable Direction p_235059_, RandomSource p_235060_) {
+   // FORGE: Implement our overloads (here and below) so child models can have custom logic
+   public List<BakedQuad> getQuads(@Nullable BlockState p_235058_, @Nullable Direction p_235059_, RandomSource p_235060_, net.minecraftforge.client.model.data.ModelData modelData, @org.jetbrains.annotations.Nullable net.minecraft.client.renderer.RenderType renderType) {
       return WeightedRandom.getWeightedItem(this.list, Math.abs((int)p_235060_.nextLong()) % this.totalWeight).map((p_235065_) -> {
-         return p_235065_.getData().getQuads(p_235058_, p_235059_, p_235060_);
+         return p_235065_.getData().getQuads(p_235058_, p_235059_, p_235060_, modelData, renderType);
       }).orElse(Collections.emptyList());
    }
 
@@ -38,6 +_,16 @@
       return this.wrapped.useAmbientOcclusion();
    }
 
+   @Override
+   public boolean useAmbientOcclusion(BlockState state) {
+      return this.wrapped.useAmbientOcclusion(state);
+   }
+
+   @Override
+   public boolean useAmbientOcclusion(BlockState state, net.minecraft.client.renderer.RenderType renderType) {
+      return this.wrapped.useAmbientOcclusion(state, renderType);
+   }
+
    public boolean isGui3d() {
       return this.wrapped.isGui3d();
    }
@@ -54,8 +_,23 @@
       return this.wrapped.getParticleIcon();
    }
 
+   public TextureAtlasSprite getParticleIcon(net.minecraftforge.client.model.data.ModelData modelData) {
+      return this.wrapped.getParticleIcon(modelData);
+   }
+
    public ItemTransforms getTransforms() {
       return this.wrapped.getTransforms();
+   }
+
+   public BakedModel applyTransform(net.minecraft.world.item.ItemDisplayContext transformType, com.mojang.blaze3d.vertex.PoseStack poseStack, boolean applyLeftHandTransform) {
+      return this.wrapped.applyTransform(transformType, poseStack, applyLeftHandTransform);
+   }
+
+   @Override // FORGE: Get render types based on the active weighted model
+   public net.minecraftforge.client.ChunkRenderTypeSet getRenderTypes(@org.jetbrains.annotations.NotNull BlockState state, @org.jetbrains.annotations.NotNull RandomSource rand, @org.jetbrains.annotations.NotNull net.minecraftforge.client.model.data.ModelData data) {
+      return WeightedRandom.getWeightedItem(this.list, Math.abs((int)rand.nextLong()) % this.totalWeight)
+              .map((p_235065_) -> p_235065_.getData().getRenderTypes(state, rand, data))
+              .orElse(net.minecraftforge.client.ChunkRenderTypeSet.none());
    }
 
    public ItemOverrides getOverrides() {
