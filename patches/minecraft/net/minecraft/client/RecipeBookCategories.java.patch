--- a/net/minecraft/client/RecipeBookCategories.java
+++ b/net/minecraft/client/RecipeBookCategories.java
@@ -12,7 +_,7 @@
 import net.minecraftforge.api.distmarker.OnlyIn;
 
 @OnlyIn(Dist.CLIENT)
-public enum RecipeBookCategories {
+public enum RecipeBookCategories implements net.minecraftforge.common.IExtensibleEnum {
    CRAFTING_SEARCH(new ItemStack(Items.f_42522_)),
    CRAFTING_BUILDING_BLOCKS(new ItemStack(Blocks.f_50076_)),
    CRAFTING_REDSTONE(new ItemStack(Items.f_42451_)),
@@ -36,7 +_,8 @@
    public static final List<RecipeBookCategories> f_92257_ = ImmutableList.of(BLAST_FURNACE_SEARCH, BLAST_FURNACE_BLOCKS, BLAST_FURNACE_MISC);
    public static final List<RecipeBookCategories> f_92258_ = ImmutableList.of(FURNACE_SEARCH, FURNACE_FOOD, FURNACE_BLOCKS, FURNACE_MISC);
    public static final List<RecipeBookCategories> f_92259_ = ImmutableList.of(CRAFTING_SEARCH, CRAFTING_EQUIPMENT, CRAFTING_BUILDING_BLOCKS, CRAFTING_MISC, CRAFTING_REDSTONE);
-   public static final Map<RecipeBookCategories, List<RecipeBookCategories>> f_92260_ = ImmutableMap.of(CRAFTING_SEARCH, ImmutableList.of(CRAFTING_EQUIPMENT, CRAFTING_BUILDING_BLOCKS, CRAFTING_MISC, CRAFTING_REDSTONE), FURNACE_SEARCH, ImmutableList.of(FURNACE_FOOD, FURNACE_BLOCKS, FURNACE_MISC), BLAST_FURNACE_SEARCH, ImmutableList.of(BLAST_FURNACE_BLOCKS, BLAST_FURNACE_MISC), SMOKER_SEARCH, ImmutableList.of(SMOKER_FOOD));
+   private static final Map<RecipeBookCategories, List<RecipeBookCategories>> MUTABLE_AGGREGATE_CATEGORIES = new java.util.HashMap<>(ImmutableMap.of(CRAFTING_SEARCH, ImmutableList.of(CRAFTING_EQUIPMENT, CRAFTING_BUILDING_BLOCKS, CRAFTING_MISC, CRAFTING_REDSTONE), FURNACE_SEARCH, ImmutableList.of(FURNACE_FOOD, FURNACE_BLOCKS, FURNACE_MISC), BLAST_FURNACE_SEARCH, ImmutableList.of(BLAST_FURNACE_BLOCKS, BLAST_FURNACE_MISC), SMOKER_SEARCH, ImmutableList.of(SMOKER_FOOD)));
+   public static final Map<RecipeBookCategories, List<RecipeBookCategories>> f_92260_ = java.util.Collections.unmodifiableMap(MUTABLE_AGGREGATE_CATEGORIES);
    private final List<ItemStack> f_92261_;
 
    private RecipeBookCategories(ItemStack... p_92267_) {
@@ -54,11 +_,32 @@
       case SMOKER:
          return f_92256_;
       default:
+         if (TYPE_TO_CATEGORIES.containsKey(p_92270_))
+            return TYPE_TO_CATEGORIES.get(p_92270_);
          return ImmutableList.of();
       }
    }
 
    public List<ItemStack> m_92268_() {
       return this.f_92261_;
+   }
+   //FORGE START - note: add methods are not thread-safe, to do in enqueueWork in CLIENT setup.
+   private static final Map<RecipeBookType, List<RecipeBookCategories>> TYPE_TO_CATEGORIES = new java.util.HashMap<>();
+   private static final Map<net.minecraft.world.item.crafting.RecipeType<?>, java.util.function.Function<net.minecraft.world.item.crafting.Recipe<?>, RecipeBookCategories>> FIND_CATEGORIES_FOR_TYPE = new java.util.HashMap<>();
+   public static void addCategoriesToType(RecipeBookType type, List<RecipeBookCategories> categories) {
+      TYPE_TO_CATEGORIES.put(type, categories);
+   }
+   public static void addAggregateCategories(RecipeBookCategories search, List<RecipeBookCategories> aggregate) {
+      MUTABLE_AGGREGATE_CATEGORIES.put(search, aggregate);
+   }
+   public static void addCategoriesFinder(net.minecraft.world.item.crafting.RecipeType<?> type, java.util.function.Function<net.minecraft.world.item.crafting.Recipe<?>, RecipeBookCategories> finder) {
+      FIND_CATEGORIES_FOR_TYPE.put(type, finder);
+   }
+   @javax.annotation.Nullable
+   public static RecipeBookCategories findCategories(net.minecraft.world.item.crafting.RecipeType<?> type, net.minecraft.world.item.crafting.Recipe<?> recipe) {
+      return java.util.Optional.ofNullable(FIND_CATEGORIES_FOR_TYPE.get(type)).map(f -> f.apply(recipe)).orElse(null);
+   }
+   public static RecipeBookCategories create(String name, ItemStack... icons) {
+      throw new IllegalStateException("Enum not extended");
    }
 }
