--- ../src_base/minecraft/net/minecraft/client/renderer/entity/RenderItem.java
+++ ../src_work/minecraft/net/minecraft/client/renderer/entity/RenderItem.java
@@ -13,11 +13,14 @@
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.item.EntityItem;
 import net.minecraft.item.Item;
+import net.minecraft.item.ItemBlock;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.MathHelper;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
+import net.minecraftforge.client.ForgeHooksClient;
+
 @SideOnly(Side.CLIENT)
 public class RenderItem extends Render
 {
@@ -48,39 +51,22 @@
         if (var10.getItem() != null)
         {
             GL11.glPushMatrix();
-            float var11 = MathHelper.sin(((float)par1EntityItem.age + par9) / 10.0F + par1EntityItem.hoverStart) * 0.1F + 0.1F;
+            float var11 = shouldBob() ? MathHelper.sin(((float)par1EntityItem.age + par9) / 10.0F + par1EntityItem.hoverStart) * 0.1F + 0.1F : 0F;
             float var12 = (((float)par1EntityItem.age + par9) / 20.0F + par1EntityItem.hoverStart) * (180F / (float)Math.PI);
-            byte var13 = 1;
-
-            if (par1EntityItem.getEntityItem().stackSize > 1)
-            {
-                var13 = 2;
-            }
-
-            if (par1EntityItem.getEntityItem().stackSize > 5)
-            {
-                var13 = 3;
-            }
-
-            if (par1EntityItem.getEntityItem().stackSize > 20)
-            {
-                var13 = 4;
-            }
-
-            if (par1EntityItem.getEntityItem().stackSize > 40)
-            {
-                var13 = 5;
-            }
+            byte var13 = getMiniBlockCountForItemStack(var10);
 
             GL11.glTranslatef((float)par2, (float)par4 + var11, (float)par6);
             GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-            Block var14 = Block.blocksList[var10.itemID];
             int var16;
             float var19;
             float var20;
             float var24;
 
-            if (var14 != null && RenderBlocks.renderItemIn3d(var14.getRenderType()))
+            if (ForgeHooksClient.renderEntityItem(par1EntityItem, var10, var11, var12, random, renderManager.renderEngine, renderBlocks))
+            {
+                ;
+            }
+            else if (var10.getItem() instanceof ItemBlock && RenderBlocks.renderItemIn3d(Block.blocksList[var10.itemID].getRenderType()))
             {
                 GL11.glRotatef(var12, 0.0F, 1.0F, 0.0F);
 
@@ -91,9 +77,9 @@
                     GL11.glRotatef(-90.0F, 0.0F, 1.0F, 0.0F);
                 }
 
-                this.loadTexture("/terrain.png");
+                this.loadTexture(Block.blocksList[var10.itemID].getTextureFile());
                 float var22 = 0.25F;
-                var16 = var14.getRenderType();
+                var16 = Block.blocksList[var10.itemID].getRenderType();
 
                 if (var16 == 1 || var16 == 19 || var16 == 12 || var16 == 2)
                 {
@@ -115,7 +101,7 @@
                     }
 
                     var24 = 1.0F;
-                    this.itemRenderBlocks.renderBlockAsItem(var14, var10.getItemDamage(), var24);
+                    this.itemRenderBlocks.renderBlockAsItem(Block.blocksList[var10.itemID], var10.getItemDamage(), var24);
                     GL11.glPopMatrix();
                 }
             }
@@ -136,12 +122,12 @@
                         GL11.glScalef(0.5F, 0.5F, 0.5F);
                     }
 
-                    this.loadTexture("/gui/items.png");
-
-                    for (var15 = 0; var15 <= 1; ++var15)
-                    {
+
+                    for (var15 = 0; var15 < var10.getItem().getRenderPasses(var10.getItemDamage()); ++var15)
+                    {
+                        this.loadTexture(Item.itemsList[var10.itemID].getTextureFile());
                         this.random.setSeed(187L);
-                        var16 = var10.getItem().getIconFromDamageForRenderPass(var10.getItemDamage(), var15);
+                        var16 = var10.getItem().getIconIndex(var10, var15);
                         var17 = 1.0F;
 
                         if (this.field_77024_a)
@@ -173,14 +159,7 @@
 
                     var15 = var10.getIconIndex();
 
-                    if (var14 != null)
-                    {
-                        this.loadTexture("/terrain.png");
-                    }
-                    else
-                    {
-                        this.loadTexture("/gui/items.png");
-                    }
+                    this.loadTexture(var10.getItem().getTextureFile());
 
                     if (this.field_77024_a)
                     {
@@ -232,39 +211,27 @@
             var17 = 0.021875F;
             ItemStack var18 = par1EntityItem.getEntityItem();
             int var19 = var18.stackSize;
-            byte var24;
-
-            if (var19 < 2)
-            {
-                var24 = 1;
-            }
-            else if (var19 < 16)
-            {
-                var24 = 2;
-            }
-            else if (var19 < 32)
-            {
-                var24 = 3;
-            }
-            else
-            {
-                var24 = 4;
-            }
+            byte var24 = getMiniItemCountForItemStack(var18);
+
 
             GL11.glTranslatef(-var14, -var15, -((var16 + var17) * (float)var24 / 2.0F));
 
             for (int var20 = 0; var20 < var24; ++var20)
             {
-                GL11.glTranslatef(0.0F, 0.0F, var16 + var17);
-
-                if (Block.blocksList[var18.itemID] != null)
-                {
-                    this.loadTexture("/terrain.png");
+                // Makes items offset when in 3D, like when in 2D, looks much better. Considered a vanilla bug...
+                if (var20 > 0 && shouldSpreadItems())
+                {
+                    float x = (random.nextFloat() * 2.0F - 1.0F) * 0.3F / 0.5F;
+                    float y = (random.nextFloat() * 2.0F - 1.0F) * 0.3F / 0.5F;
+                    float z = (random.nextFloat() * 2.0F - 1.0F) * 0.3F / 0.5F;
+                    GL11.glTranslatef(x, y, var16 + var17);
                 }
                 else
                 {
-                    this.loadTexture("/gui/items.png");
-                }
+                    GL11.glTranslatef(0f, 0f, var16 + var17);
+                }
+
+                this.loadTexture(Item.itemsList[var18.itemID].getTextureFile());
 
                 GL11.glColor4f(par5, par6, par7, 1.0F);
                 ItemRenderer.renderItemIn2D(var8, var10, var11, var9, var12, var16);
@@ -348,10 +315,10 @@
         float var13;
         float var16;
 
-        if (var6 < 256 && RenderBlocks.renderItemIn3d(Block.blocksList[var6].getRenderType()))
-        {
-            par2RenderEngine.bindTexture(par2RenderEngine.getTexture("/terrain.png"));
+        if (par3ItemStack.getItem() instanceof ItemBlock && RenderBlocks.renderItemIn3d(Block.blocksList[par3ItemStack.itemID].getRenderType()))
+        {
             Block var15 = Block.blocksList[var6];
+            par2RenderEngine.bindTexture(par2RenderEngine.getTexture(var15.getTextureFile()));
             GL11.glPushMatrix();
             GL11.glTranslatef((float)(par4 - 2), (float)(par5 + 3), -3.0F + this.zLevel);
             GL11.glScalef(10.0F, 10.0F, 10.0F);
@@ -382,11 +349,11 @@
             if (Item.itemsList[var6].requiresMultipleRenderPasses())
             {
                 GL11.glDisable(GL11.GL_LIGHTING);
-                par2RenderEngine.bindTexture(par2RenderEngine.getTexture("/gui/items.png"));
-
-                for (var9 = 0; var9 <= 1; ++var9)
-                {
-                    var10 = Item.itemsList[var6].getIconFromDamageForRenderPass(var7, var9);
+                par2RenderEngine.bindTexture(par2RenderEngine.getTexture(Item.itemsList[var6].getTextureFile()));
+
+                for (var9 = 0; var9 < Item.itemsList[var6].getRenderPasses(var7); ++var9)
+                {
+                    var10 = Item.itemsList[var6].getIconIndex(par3ItemStack, var9);
                     int var11 = Item.itemsList[var6].getColorFromItemStack(par3ItemStack, var9);
                     var12 = (float)(var11 >> 16 & 255) / 255.0F;
                     var13 = (float)(var11 >> 8 & 255) / 255.0F;
@@ -406,14 +373,7 @@
             {
                 GL11.glDisable(GL11.GL_LIGHTING);
 
-                if (var6 < 256)
-                {
-                    par2RenderEngine.bindTexture(par2RenderEngine.getTexture("/terrain.png"));
-                }
-                else
-                {
-                    par2RenderEngine.bindTexture(par2RenderEngine.getTexture("/gui/items.png"));
-                }
+                par2RenderEngine.bindTexture(par2RenderEngine.getTexture(par3ItemStack.getItem().getTextureFile()));
 
                 var9 = Item.itemsList[var6].getColorFromItemStack(par3ItemStack, 0);
                 float var17 = (float)(var9 >> 16 & 255) / 255.0F;
@@ -440,7 +400,10 @@
     {
         if (par3ItemStack != null)
         {
-            this.renderItemIntoGUI(par1FontRenderer, par2RenderEngine, par3ItemStack, par4, par5);
+            if (!ForgeHooksClient.renderInventoryItem(renderBlocks, par2RenderEngine, par3ItemStack, field_77024_a, zLevel, (float)par4, (float)par5))
+            {
+                this.renderItemIntoGUI(par1FontRenderer, par2RenderEngine, par3ItemStack, par4, par5);
+            }
 
             if (par3ItemStack != null && par3ItemStack.hasEffect())
             {
@@ -578,4 +541,77 @@
     {
         this.doRenderItem((EntityItem)par1Entity, par2, par4, par6, par8, par9);
     }
+
+    /* ==== Forge start ===== */
+    /**
+     * Items should spread out when rendered in 3d?
+     * @return
+     */
+    public boolean shouldSpreadItems()
+    {
+        return true;
+    }
+
+    /**
+     * Items should have a bob effect
+     * @return
+     */
+    public boolean shouldBob()
+    {
+        return true;
+    }
+
+    public byte getMiniBlockCountForItemStack(ItemStack stack)
+    {
+        byte var13 = 1;
+        if (stack.stackSize > 1)
+        {
+            var13 = 2;
+        }
+
+        if (stack.stackSize > 5)
+        {
+            var13 = 3;
+        }
+
+        if (stack.stackSize > 20)
+        {
+            var13 = 4;
+        }
+
+        if (stack.stackSize > 40)
+        {
+            var13 = 5;
+        }
+        return var13;
+    }
+
+    /**
+     * Allows for a subclass to override how many rendered items appear in a
+     * "mini item 3d stack"
+     * @param stack
+     * @return
+     */
+    public byte getMiniItemCountForItemStack(ItemStack stack)
+    {
+        byte var24;
+        int var19 = stack.stackSize;
+        if (var19 < 2)
+        {
+            var24 = 1;
+        }
+        else if (var19 < 16)
+        {
+            var24 = 2;
+        }
+        else if (var19 < 32)
+        {
+            var24 = 3;
+        }
+        else
+        {
+            var24 = 4;
+        }
+        return var24;
+    }
 }
