--- ../src_base/minecraft/net/minecraft/client/renderer/entity/RenderItem.java
+++ ../src_work/minecraft/net/minecraft/client/renderer/entity/RenderItem.java
@@ -21,6 +21,8 @@
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
+import net.minecraftforge.client.ForgeHooksClient;
+
 @SideOnly(Side.CLIENT)
 public class RenderItem extends Render
 {
@@ -53,29 +55,9 @@
         if (itemstack.getItem() != null)
         {
             GL11.glPushMatrix();
-            float f2 = MathHelper.sin(((float)par1EntityItem.age + par9) / 10.0F + par1EntityItem.hoverStart) * 0.1F + 0.1F;
+            float f2 = shouldBob() ? MathHelper.sin(((float)par1EntityItem.age + par9) / 10.0F + par1EntityItem.hoverStart) * 0.1F + 0.1F : 0F;
             float f3 = (((float)par1EntityItem.age + par9) / 20.0F + par1EntityItem.hoverStart) * (180F / (float)Math.PI);
-            byte b0 = 1;
-
-            if (par1EntityItem.getEntityItem().stackSize > 1)
-            {
-                b0 = 2;
-            }
-
-            if (par1EntityItem.getEntityItem().stackSize > 5)
-            {
-                b0 = 3;
-            }
-
-            if (par1EntityItem.getEntityItem().stackSize > 20)
-            {
-                b0 = 4;
-            }
-
-            if (par1EntityItem.getEntityItem().stackSize > 40)
-            {
-                b0 = 5;
-            }
+            byte b0 = getMiniBlockCount(itemstack);
 
             GL11.glTranslatef((float)par2, (float)par4 + f2, (float)par6);
             GL11.glEnable(GL12.GL_RESCALE_NORMAL);
@@ -84,9 +66,18 @@
             float f6;
             int i;
 
-            if (itemstack.getItemSpriteNumber() == 0 && itemstack.itemID < Block.blocksList.length && Block.blocksList[itemstack.itemID] != null && RenderBlocks.renderItemIn3d(Block.blocksList[itemstack.itemID].getRenderType()))
-            {
-                Block block = Block.blocksList[itemstack.itemID];
+            Block block = null;
+            if (itemstack.itemID < Block.blocksList.length)
+            {
+                block = Block.blocksList[itemstack.itemID];
+            }
+
+            if (ForgeHooksClient.renderEntityItem(par1EntityItem, itemstack, f2, f3, random, renderManager.renderEngine, renderBlocks))
+            {
+                ;
+            }
+            else if (itemstack.getItemSpriteNumber() == 0 && block != null && RenderBlocks.renderItemIn3d(Block.blocksList[itemstack.itemID].getRenderType()))
+            {
                 GL11.glRotatef(f3, 0.0F, 1.0F, 0.0F);
 
                 if (renderInFrame)
@@ -127,7 +118,7 @@
             {
                 float f8;
 
-                if (itemstack.getItemSpriteNumber() == 1 && itemstack.getItem().requiresMultipleRenderPasses())
+                if (itemstack.getItem().requiresMultipleRenderPasses())
                 {
                     if (renderInFrame)
                     {
@@ -139,10 +130,10 @@
                         GL11.glScalef(0.5F, 0.5F, 0.5F);
                     }
 
-                    for (int k = 0; k <= 1; ++k)
+                    for (int k = 0; k < itemstack.getItem().getRenderPasses(itemstack.getItemDamage()); ++k)
                     {
                         this.random.setSeed(187L);
-                        Icon icon = itemstack.getItem().getIconFromDamageForRenderPass(itemstack.getItemDamage(), k);
+                        Icon icon = itemstack.getItem().getIcon(itemstack, k);
                         f8 = 1.0F;
 
                         if (this.renderWithColor)
@@ -152,11 +143,11 @@
                             f4 = (float)(i >> 8 & 255) / 255.0F;
                             f6 = (float)(i & 255) / 255.0F;
                             GL11.glColor4f(f5 * f8, f4 * f8, f6 * f8, 1.0F);
-                            this.renderDroppedItem(par1EntityItem, icon, b0, par9, f5 * f8, f4 * f8, f6 * f8);
+                            this.renderDroppedItem(par1EntityItem, icon, b0, par9, f5 * f8, f4 * f8, f6 * f8, k);
                         }
                         else
                         {
-                            this.renderDroppedItem(par1EntityItem, icon, b0, par9, 1.0F, 1.0F, 1.0F);
+                            this.renderDroppedItem(par1EntityItem, icon, b0, par9, 1.0F, 1.0F, 1.0F, k);
                         }
                     }
                 }
@@ -204,6 +195,10 @@
      * Renders a dropped item
      */
     private void renderDroppedItem(EntityItem par1EntityItem, Icon par2Icon, int par3, float par4, float par5, float par6, float par7)
+    {
+        renderDroppedItem(par1EntityItem, par2Icon, par3, par4, par5, par6, par7, 0);
+    }
+    private void renderDroppedItem(EntityItem par1EntityItem, Icon par2Icon, int par3, float par4, float par5, float par6, float par7, int pass)
     {
         Tessellator tessellator = Tessellator.instance;
 
@@ -240,32 +235,26 @@
             f11 = 0.021875F;
             ItemStack itemstack = par1EntityItem.getEntityItem();
             int j = itemstack.stackSize;
-            byte b0;
-
-            if (j < 2)
-            {
-                b0 = 1;
-            }
-            else if (j < 16)
-            {
-                b0 = 2;
-            }
-            else if (j < 32)
-            {
-                b0 = 3;
-            }
-            else
-            {
-                b0 = 4;
-            }
+            byte b0 = getMiniItemCount(itemstack);
 
             GL11.glTranslatef(-f9, -f10, -((f12 + f11) * (float)b0 / 2.0F));
 
             for (int k = 0; k < b0; ++k)
             {
-                GL11.glTranslatef(0.0F, 0.0F, f12 + f11);
-
-                if (itemstack.getItemSpriteNumber() == 0 && Block.blocksList[itemstack.itemID] != null)
+                // Makes items offset when in 3D, like when in 2D, looks much better. Considered a vanilla bug...
+                if (k > 0 && shouldSpreadItems())
+                {
+                    float x = (random.nextFloat() * 2.0F - 1.0F) * 0.3F / 0.5F;
+                    float y = (random.nextFloat() * 2.0F - 1.0F) * 0.3F / 0.5F;
+                    float z = (random.nextFloat() * 2.0F - 1.0F) * 0.3F / 0.5F;
+                    GL11.glTranslatef(x, y, f12 + f11);
+                }
+                else
+                {
+                    GL11.glTranslatef(0f, 0f, f12 + f11);
+                }
+
+                if (itemstack.getItemSpriteNumber() == 0)
                 {
                     this.bindTexture(TextureMap.locationBlocksTexture);
                 }
@@ -277,7 +266,7 @@
                 GL11.glColor4f(par5, par6, par7, 1.0F);
                 ItemRenderer.renderItemIn2D(tessellator, f5, f6, f4, f7, ((Icon)par2Icon).getIconWidth(), ((Icon)par2Icon).getIconHeight(), f12);
 
-                if (itemstack.hasEffect())
+                if (itemstack.hasEffect(pass))
                 {
                     GL11.glDepthFunc(GL11.GL_EQUAL);
                     GL11.glDisable(GL11.GL_LIGHTING);
@@ -348,6 +337,10 @@
      */
     public void renderItemIntoGUI(FontRenderer par1FontRenderer, TextureManager par2TextureManager, ItemStack par3ItemStack, int par4, int par5)
     {
+        renderItemIntoGUI(par1FontRenderer, par2TextureManager, par3ItemStack, par4, par5, false);
+    }
+    public void renderItemIntoGUI(FontRenderer par1FontRenderer, TextureManager par2TextureManager, ItemStack par3ItemStack, int par4, int par5, boolean renderEffect)
+    {
         int k = par3ItemStack.itemID;
         int l = par3ItemStack.getItemDamage();
         Object object = par3ItemStack.getIconIndex();
@@ -356,10 +349,10 @@
         float f1;
         float f2;
 
-        if (par3ItemStack.getItemSpriteNumber() == 0 && RenderBlocks.renderItemIn3d(Block.blocksList[k].getRenderType()))
+        Block block = (k < Block.blocksList.length ? Block.blocksList[k] : null);
+        if (par3ItemStack.getItemSpriteNumber() == 0 && block != null && RenderBlocks.renderItemIn3d(Block.blocksList[k].getRenderType()))
         {
             par2TextureManager.bindTexture(TextureMap.locationBlocksTexture);
-            Block block = Block.blocksList[k];
             GL11.glPushMatrix();
             GL11.glTranslatef((float)(par4 - 2), (float)(par5 + 3), -3.0F + this.zLevel);
             GL11.glScalef(10.0F, 10.0F, 10.0F);
@@ -386,11 +379,11 @@
         else if (Item.itemsList[k].requiresMultipleRenderPasses())
         {
             GL11.glDisable(GL11.GL_LIGHTING);
-            par2TextureManager.bindTexture(TextureMap.locationItemsTexture);
-
-            for (int j1 = 0; j1 <= 1; ++j1)
-            {
-                Icon icon = Item.itemsList[k].getIconFromDamageForRenderPass(l, j1);
+
+            for (int j1 = 0; j1 < Item.itemsList[k].getRenderPasses(l); ++j1)
+            {
+                par2TextureManager.bindTexture(par3ItemStack.getItemSpriteNumber() == 0 ? TextureMap.locationBlocksTexture : TextureMap.locationItemsTexture);
+                Icon icon = Item.itemsList[k].getIcon(par3ItemStack, j1);
                 int k1 = Item.itemsList[k].getColorFromItemStack(par3ItemStack, j1);
                 f1 = (float)(k1 >> 16 & 255) / 255.0F;
                 f2 = (float)(k1 >> 8 & 255) / 255.0F;
@@ -402,6 +395,11 @@
                 }
 
                 this.renderIcon(par4, par5, icon, 16, 16);
+
+                if (par3ItemStack.hasEffect(j1))
+                {
+                    renderEffect(par2TextureManager, par4, par5);
+                }
             }
 
             GL11.glEnable(GL11.GL_LIGHTING);
@@ -429,11 +427,34 @@
 
             this.renderIcon(par4, par5, (Icon)object, 16, 16);
             GL11.glEnable(GL11.GL_LIGHTING);
+
+            if (par3ItemStack.hasEffect(0))
+            {
+                renderEffect(par2TextureManager, par4, par5);
+            }
         }
 
         GL11.glEnable(GL11.GL_CULL_FACE);
     }
 
+    private void renderEffect(TextureManager manager, int x, int y)
+    {
+        GL11.glDepthFunc(GL11.GL_GREATER);
+        GL11.glDisable(GL11.GL_LIGHTING);
+        GL11.glDepthMask(false);
+        manager.bindTexture(RES_ITEM_GLINT);
+        this.zLevel -= 50.0F;
+        GL11.glEnable(GL11.GL_BLEND);
+        GL11.glBlendFunc(GL11.GL_DST_COLOR, GL11.GL_DST_COLOR);
+        GL11.glColor4f(0.5F, 0.25F, 0.8F, 1.0F);
+        this.renderGlint(x * 431278612 + y * 32178161, x - 2, y - 2, 20, 20);
+        GL11.glDisable(GL11.GL_BLEND);
+        GL11.glDepthMask(true);
+        this.zLevel += 50.0F;
+        GL11.glEnable(GL11.GL_LIGHTING);
+        GL11.glDepthFunc(GL11.GL_LEQUAL);
+    }
+
     /**
      * Render the item's icon or block into the GUI, including the glint effect.
      */
@@ -441,8 +462,12 @@
     {
         if (par3ItemStack != null)
         {
-            this.renderItemIntoGUI(par1FontRenderer, par2TextureManager, par3ItemStack, par4, par5);
-
+            if (!ForgeHooksClient.renderInventoryItem(renderBlocks, par2TextureManager, par3ItemStack, renderWithColor, zLevel, (float)par4, (float)par5))
+            {
+                this.renderItemIntoGUI(par1FontRenderer, par2TextureManager, par3ItemStack, par4, par5, true);
+            }
+
+            /* Modders must handle this themselves if they use custom renderers!
             if (par3ItemStack.hasEffect())
             {
                 GL11.glDepthFunc(GL11.GL_GREATER);
@@ -460,6 +485,7 @@
                 GL11.glEnable(GL11.GL_LIGHTING);
                 GL11.glDepthFunc(GL11.GL_LEQUAL);
             }
+            */
         }
     }
 
@@ -586,4 +612,47 @@
     {
         this.doRenderItem((EntityItem)par1Entity, par2, par4, par6, par8, par9);
     }
+
+    /**
+     * Items should spread out when rendered in 3d?
+     * @return
+     */
+    public boolean shouldSpreadItems()
+    {
+        return true;
+    }
+
+    /**
+     * Items should have a bob effect
+     * @return
+     */
+    public boolean shouldBob()
+    {
+        return true;
+    }
+
+    public byte getMiniBlockCount(ItemStack stack)
+    {
+        byte ret = 1;
+        if (stack.stackSize > 1 ) ret = 2;
+        if (stack.stackSize > 5 ) ret = 3;
+        if (stack.stackSize > 20) ret = 4;
+        if (stack.stackSize > 40) ret = 5;
+        return ret;
+    }
+
+    /**
+     * Allows for a subclass to override how many rendered items appear in a
+     * "mini item 3d stack"
+     * @param stack
+     * @return
+     */
+    public byte getMiniItemCount(ItemStack stack)
+    {
+        byte ret = 1;
+        if (stack.stackSize > 1) ret = 2;
+        if (stack.stackSize > 15) ret = 3;
+        if (stack.stackSize > 31) ret = 4;
+        return ret;
+    }
 }
