--- a/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
+++ b/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
@@ -173,12 +_,12 @@
    private static void renderHitbox(PoseStack p_114442_, VertexConsumer p_114443_, Entity p_114444_, float p_114445_) {
       AABB aabb = p_114444_.getBoundingBox().move(-p_114444_.getX(), -p_114444_.getY(), -p_114444_.getZ());
       LevelRenderer.renderLineBox(p_114442_, p_114443_, aabb, 1.0F, 1.0F, 1.0F, 1.0F);
-      if (p_114444_ instanceof EnderDragon) {
+      if (p_114444_.isMultipartEntity()) {
          double d0 = -Mth.lerp((double)p_114445_, p_114444_.xOld, p_114444_.getX());
          double d1 = -Mth.lerp((double)p_114445_, p_114444_.yOld, p_114444_.getY());
          double d2 = -Mth.lerp((double)p_114445_, p_114444_.zOld, p_114444_.getZ());
 
-         for(EnderDragonPart enderdragonpart : ((EnderDragon)p_114444_).getSubEntities()) {
+         for(net.minecraftforge.entity.PartEntity<?> enderdragonpart : p_114444_.getParts()) {
             p_114442_.pushPose();
             double d3 = d0 + Mth.lerp((double)p_114445_, enderdragonpart.xOld, enderdragonpart.getX());
             double d4 = d1 + Mth.lerp((double)p_114445_, enderdragonpart.yOld, enderdragonpart.getY());
@@ -360,9 +_,14 @@
       return this.itemInHandRenderer;
    }
 
+   public Map<PlayerSkin.Model, EntityRenderer<? extends Player>> getSkinMap() {
+      return java.util.Collections.unmodifiableMap(playerRenderers);
+   }
+
    public void onResourceManagerReload(ResourceManager p_174004_) {
       EntityRendererProvider.Context entityrendererprovider$context = new EntityRendererProvider.Context(this, this.itemRenderer, this.blockRenderDispatcher, this.itemInHandRenderer, p_174004_, this.entityModels, this.font);
       this.renderers = EntityRenderers.createEntityRenderers(entityrendererprovider$context);
       this.playerRenderers = EntityRenderers.createPlayerRenderers(entityrendererprovider$context);
+      net.minecraftforge.client.event.ForgeEventFactoryClient.gatherLayers(renderers, playerRenderers, entityrendererprovider$context);
    }
 }
