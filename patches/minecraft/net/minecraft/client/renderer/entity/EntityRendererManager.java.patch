--- a/net/minecraft/client/renderer/entity/EntityRendererManager.java
+++ b/net/minecraft/client/renderer/entity/EntityRendererManager.java
@@ -188,7 +_,10 @@
       this.defaultPlayerRenderer = new PlayerRenderer(this);
       this.playerRenderers.put("default", this.defaultPlayerRenderer);
       this.playerRenderers.put("slim", new PlayerRenderer(this, true));
+   }
 
+   //FORGE: Validate the existence of a renderer for each entity type after modded entity renderers have been added
+   public void validateRendererExistence() {
       for(EntityType<?> entitytype : Registry.ENTITY_TYPE) {
          if (entitytype != EntityType.PLAYER && !this.renderers.containsKey(entitytype)) {
             throw new IllegalStateException("No renderer registered for " + Registry.ENTITY_TYPE.getKey(entitytype));
@@ -280,12 +_,12 @@
    private void renderHitbox(MatrixStack p_229093_1_, IVertexBuilder p_229093_2_, Entity p_229093_3_, float p_229093_4_) {
       float f = p_229093_3_.getBbWidth() / 2.0F;
       this.renderBox(p_229093_1_, p_229093_2_, p_229093_3_, 1.0F, 1.0F, 1.0F);
-      if (p_229093_3_ instanceof EnderDragonEntity) {
+      if (p_229093_3_.isMultipartEntity()) {
          double d0 = -MathHelper.lerp((double)p_229093_4_, p_229093_3_.xOld, p_229093_3_.getX());
          double d1 = -MathHelper.lerp((double)p_229093_4_, p_229093_3_.yOld, p_229093_3_.getY());
          double d2 = -MathHelper.lerp((double)p_229093_4_, p_229093_3_.zOld, p_229093_3_.getZ());
 
-         for(EnderDragonPartEntity enderdragonpartentity : ((EnderDragonEntity)p_229093_3_).getSubEntities()) {
+         for(net.minecraftforge.entity.PartEntity<?> enderdragonpartentity : p_229093_3_.getParts()) {
             p_229093_1_.pushPose();
             double d3 = d0 + MathHelper.lerp((double)p_229093_4_, enderdragonpartentity.xOld, enderdragonpartentity.getX());
             double d4 = d1 + MathHelper.lerp((double)p_229093_4_, enderdragonpartentity.yOld, enderdragonpartentity.getY());
@@ -449,5 +_,9 @@
 
    public FontRenderer getFont() {
       return this.font;
+   }
+
+   public Map<String, PlayerRenderer> getSkinMap() {
+      return (Map<String, PlayerRenderer>) java.util.Collections.unmodifiableMap(playerRenderers);
    }
 }
