--- a/net/minecraft/client/renderer/model/ModelManager.java
+++ b/net/minecraft/client/renderer/model/ModelManager.java
@@ -19,7 +_,7 @@
 
 @OnlyIn(Dist.CLIENT)
 public class ModelManager extends ReloadListener<ModelBakery> implements AutoCloseable {
-   private Map<ResourceLocation, IBakedModel> bakedRegistry;
+   private Map<ResourceLocation, IBakedModel> bakedRegistry = new java.util.HashMap<>();
    @Nullable
    private SpriteMap atlases;
    private final BlockModelShapes blockModelShaper;
@@ -36,6 +_,10 @@
       this.blockModelShaper = new BlockModelShapes(this);
    }
 
+   public IBakedModel getModel(ResourceLocation modelLocation) {
+      return this.bakedRegistry.getOrDefault(modelLocation, this.missingModel);
+   }
+
    public IBakedModel getModel(ModelResourceLocation p_174953_1_) {
       return this.bakedRegistry.getOrDefault(p_174953_1_, this.missingModel);
    }
@@ -50,7 +_,7 @@
 
    protected ModelBakery prepare(IResourceManager p_212854_1_, IProfiler p_212854_2_) {
       p_212854_2_.startTick();
-      ModelBakery modelbakery = new ModelBakery(p_212854_1_, this.blockColors, p_212854_2_, this.maxMipmapLevels);
+      net.minecraftforge.client.model.ModelLoader modelbakery = new net.minecraftforge.client.model.ModelLoader(p_212854_1_, this.blockColors, p_212854_2_, this.maxMipmapLevels);
       p_212854_2_.endTick();
       return modelbakery;
    }
@@ -66,6 +_,7 @@
       this.bakedRegistry = p_212853_1_.getBakedTopLevelModels();
       this.modelGroups = p_212853_1_.getModelGroups();
       this.missingModel = this.bakedRegistry.get(ModelBakery.MISSING_MODEL_LOCATION);
+      net.minecraftforge.client.ForgeHooksClient.onModelBake(this, this.bakedRegistry, (net.minecraftforge.client.model.ModelLoader) p_212853_1_);
       p_212853_3_.popPush("cache");
       this.blockModelShaper.rebuildCache();
       p_212853_3_.pop();
@@ -91,6 +_,7 @@
    }
 
    public AtlasTexture getAtlas(ResourceLocation p_229356_1_) {
+      if (this.atlases == null) throw new RuntimeException("getAtlasTexture called too early!");
       return this.atlases.getAtlas(p_229356_1_);
    }
 
@@ -103,5 +_,11 @@
 
    public void updateMaxMipLevel(int p_229355_1_) {
       this.maxMipmapLevels = p_229355_1_;
+   }
+
+   // TODO
+   //@Override
+   public net.minecraftforge.resource.IResourceType getResourceType() {
+      return net.minecraftforge.resource.VanillaResourceType.MODELS;
    }
 }
