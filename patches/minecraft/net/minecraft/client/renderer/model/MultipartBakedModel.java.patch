--- a/net/minecraft/client/renderer/model/MultipartBakedModel.java
+++ b/net/minecraft/client/renderer/model/MultipartBakedModel.java
@@ -18,7 +_,7 @@
 import org.apache.commons.lang3.tuple.Pair;
 
 @OnlyIn(Dist.CLIENT)
-public class MultipartBakedModel implements IBakedModel {
+public class MultipartBakedModel implements net.minecraftforge.client.model.data.IDynamicBakedModel {
    private final List<Pair<Predicate<BlockState>, IBakedModel>> selectors;
    protected final boolean hasAmbientOcclusion;
    protected final boolean isGui3d;
@@ -27,10 +_,12 @@
    protected final ItemCameraTransforms transforms;
    protected final ItemOverrideList overrides;
    private final Map<BlockState, BitSet> selectorCache = new Object2ObjectOpenCustomHashMap<>(Util.identityStrategy());
+   private final IBakedModel defaultModel;
 
    public MultipartBakedModel(List<Pair<Predicate<BlockState>, IBakedModel>> p_i48273_1_) {
       this.selectors = p_i48273_1_;
       IBakedModel ibakedmodel = p_i48273_1_.iterator().next().getRight();
+      this.defaultModel = ibakedmodel;
       this.hasAmbientOcclusion = ibakedmodel.useAmbientOcclusion();
       this.isGui3d = ibakedmodel.isGui3d();
       this.usesBlockLight = ibakedmodel.usesBlockLight();
@@ -39,7 +_,8 @@
       this.overrides = ibakedmodel.getOverrides();
    }
 
-   public List<BakedQuad> getQuads(@Nullable BlockState p_200117_1_, @Nullable Direction p_200117_2_, Random p_200117_3_) {
+   // FORGE: Implement our overloads (here and below) so child models can have custom logic 
+   public List<BakedQuad> getQuads(@Nullable BlockState p_200117_1_, @Nullable Direction p_200117_2_, Random p_200117_3_, net.minecraftforge.client.model.data.IModelData modelData) {
       if (p_200117_1_ == null) {
          return Collections.emptyList();
       } else {
@@ -62,7 +_,7 @@
 
          for(int j = 0; j < bitset.length(); ++j) {
             if (bitset.get(j)) {
-               list.addAll(this.selectors.get(j).getRight().getQuads(p_200117_1_, p_200117_2_, new Random(k)));
+               list.addAll(this.selectors.get(j).getRight().getQuads(p_200117_1_, p_200117_2_, new Random(k), net.minecraftforge.client.model.data.MultipartModelData.resolve(this.selectors.get(j).getRight(), modelData)));
             }
          }
 
@@ -74,6 +_,10 @@
       return this.hasAmbientOcclusion;
    }
 
+   public boolean isAmbientOcclusion(BlockState state) {
+      return this.defaultModel.isAmbientOcclusion(state);
+   }
+
    public boolean isGui3d() {
       return this.isGui3d;
    }
@@ -86,16 +_,31 @@
       return false;
    }
 
+   @Deprecated
    public TextureAtlasSprite getParticleIcon() {
       return this.particleIcon;
    }
 
+   public TextureAtlasSprite getParticleTexture(net.minecraftforge.client.model.data.IModelData modelData) {
+      return this.defaultModel.getParticleTexture(modelData);
+   }
+
+   @Deprecated
    public ItemCameraTransforms getTransforms() {
       return this.transforms;
    }
 
+   public IBakedModel handlePerspective(net.minecraft.client.renderer.model.ItemCameraTransforms.TransformType transformType, com.mojang.blaze3d.matrix.MatrixStack matrixStack) {
+      return this.defaultModel.handlePerspective(transformType, matrixStack);
+   }
+
    public ItemOverrideList getOverrides() {
       return this.overrides;
+   }
+
+   @Override
+   public net.minecraftforge.client.model.data.IModelData getModelData(net.minecraft.world.IBlockDisplayReader world, net.minecraft.util.math.BlockPos pos, BlockState state, net.minecraftforge.client.model.data.IModelData tileData) {
+      return net.minecraftforge.client.model.data.MultipartModelData.create(selectors, world, pos, state, tileData);
    }
 
    @OnlyIn(Dist.CLIENT)
