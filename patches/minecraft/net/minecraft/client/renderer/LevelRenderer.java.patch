--- a/net/minecraft/client/renderer/LevelRenderer.java
+++ b/net/minecraft/client/renderer/LevelRenderer.java
@@ -245,6 +_,8 @@
    }
 
    private void renderSnowAndRain(LightTexture p_109704_, float p_109705_, double p_109706_, double p_109707_, double p_109708_) {
+      if (level.effects().renderSnowAndRain(level, ticks, p_109705_, p_109704_, p_109706_, p_109707_, p_109708_))
+         return;
       float f = this.minecraft.level.getRainLevel(p_109705_);
       if (!(f <= 0.0F)) {
          p_109704_.turnOnLightLayer();
@@ -364,6 +_,8 @@
    }
 
    public void tickRain(Camera p_109694_) {
+      if (level.effects().tickRain(level, ticks, p_109694_))
+         return;
       float f = this.minecraft.level.getRainLevel(1.0F) / (Minecraft.useFancyGraphics() ? 1.0F : 2.0F);
       if (!(f <= 0.0F)) {
          RandomSource randomsource = RandomSource.create((long)this.ticks * 312987231L);
@@ -888,11 +_,13 @@
       RenderSystem.clear(16640, Minecraft.ON_OSX);
       float f = p_109605_.getRenderDistance();
       boolean flag1 = this.minecraft.level.effects().isFoggyAt(Mth.floor(d0), Mth.floor(d1)) || this.minecraft.gui.getBossOverlay().shouldCreateWorldFog();
+      FogRenderer.setupFog(p_109604_, FogRenderer.FogMode.FOG_SKY, f, flag1, p_109601_);
       profilerfiller.popPush("sky");
       RenderSystem.setShader(GameRenderer::getPositionShader);
       this.renderSky(p_109600_, p_254120_, p_109601_, p_109604_, flag1, () -> {
          FogRenderer.setupFog(p_109604_, FogRenderer.FogMode.FOG_SKY, f, flag1, p_109601_);
       });
+      net.minecraftforge.client.event.RenderLevelStageEvent.Stage.AFTER_SKY.dispatch(this, p_109600_, p_254120_, this.ticks, p_109604_, frustum);
       profilerfiller.popPush("fog");
       FogRenderer.setupFog(p_109604_, FogRenderer.FogMode.FOG_TERRAIN, Math.max(f, 32.0F), flag1, p_109601_);
       profilerfiller.popPush("terrain_setup");
@@ -901,7 +_,9 @@
       this.compileSections(p_109604_);
       profilerfiller.popPush("terrain");
       this.renderSectionLayer(RenderType.solid(), p_109600_, d0, d1, d2, p_254120_);
+      this.minecraft.getModelManager().getAtlas(TextureAtlas.LOCATION_BLOCKS).setBlurMipmap(false, this.minecraft.options.mipmapLevels().get() > 0); // FORGE: fix flickering leaves when mods mess up the blurMipmap settings
       this.renderSectionLayer(RenderType.cutoutMipped(), p_109600_, d0, d1, d2, p_254120_);
+      this.minecraft.getModelManager().getAtlas(TextureAtlas.LOCATION_BLOCKS).restoreLastBlurMipmap();
       this.renderSectionLayer(RenderType.cutout(), p_109600_, d0, d1, d2, p_254120_);
       if (this.level.effects().constantAmbientLight()) {
          Lighting.setupNetherLevel(p_109600_.last().pose());
@@ -933,7 +_,7 @@
       for(Entity entity : this.level.entitiesForRendering()) {
          if (this.entityRenderDispatcher.shouldRender(entity, frustum, d0, d1, d2) || entity.hasIndirectPassenger(this.minecraft.player)) {
             BlockPos blockpos = entity.blockPosition();
-            if ((this.level.isOutsideBuildHeight(blockpos.getY()) || this.isSectionCompiled(blockpos)) && (entity != p_109604_.getEntity() || p_109604_.isDetached() || p_109604_.getEntity() instanceof LivingEntity && ((LivingEntity)p_109604_.getEntity()).isSleeping()) && (!(entity instanceof LocalPlayer) || p_109604_.getEntity() == entity)) {
+            if ((this.level.isOutsideBuildHeight(blockpos.getY()) || this.isSectionCompiled(blockpos)) && (entity != p_109604_.getEntity() || p_109604_.isDetached() || p_109604_.getEntity() instanceof LivingEntity && ((LivingEntity)p_109604_.getEntity()).isSleeping()) && (!(entity instanceof LocalPlayer) || p_109604_.getEntity() == entity || (entity == minecraft.player && !minecraft.player.isSpectator()))) { //FORGE: render local player entity when it is not the renderViewEntity
                ++this.renderedEntities;
                if (entity.tickCount == 0) {
                   entity.xOld = entity.getX();
@@ -949,6 +_,9 @@
                   int i = entity.getTeamColor();
                   outlinebuffersource.setColor(FastColor.ARGB32.red(i), FastColor.ARGB32.green(i), FastColor.ARGB32.blue(i), 255);
                } else {
+                  if (this.shouldShowEntityOutlines() && entity.hasCustomOutlineRendering(this.minecraft.player)) { // FORGE: allow custom outline rendering
+                     flag2 = true;
+                  }
                   multibuffersource = multibuffersource$buffersource;
                }
 
@@ -963,12 +_,14 @@
       multibuffersource$buffersource.endBatch(RenderType.entityCutout(TextureAtlas.LOCATION_BLOCKS));
       multibuffersource$buffersource.endBatch(RenderType.entityCutoutNoCull(TextureAtlas.LOCATION_BLOCKS));
       multibuffersource$buffersource.endBatch(RenderType.entitySmoothCutout(TextureAtlas.LOCATION_BLOCKS));
+      net.minecraftforge.client.event.RenderLevelStageEvent.Stage.AFTER_ENTITIES.dispatch(this, p_109600_, p_254120_, this.ticks, p_109604_, frustum);
       profilerfiller.popPush("blockentities");
 
       for(SectionRenderDispatcher.RenderSection sectionrenderdispatcher$rendersection : this.visibleSections) {
          List<BlockEntity> list = sectionrenderdispatcher$rendersection.getCompiled().getRenderableBlockEntities();
          if (!list.isEmpty()) {
             for(BlockEntity blockentity1 : list) {
+               if (!frustum.isVisible(blockentity1.getRenderBoundingBox())) continue;
                BlockPos blockpos4 = blockentity1.getBlockPos();
                MultiBufferSource multibuffersource1 = multibuffersource$buffersource;
                p_109600_.pushPose();
@@ -985,6 +_,9 @@
                      };
                   }
                }
+               if (this.shouldShowEntityOutlines() && blockentity1.hasCustomOutlineRendering(this.minecraft.player)) { // FORGE: allow custom outline rendering
+                  flag2 = true;
+               }
 
                this.blockEntityRenderDispatcher.render(blockentity1, p_109601_, p_109600_, multibuffersource1);
                p_109600_.popPose();
@@ -994,9 +_,13 @@
 
       synchronized(this.globalBlockEntities) {
          for(BlockEntity blockentity : this.globalBlockEntities) {
+            if(!frustum.isVisible(blockentity.getRenderBoundingBox())) continue;
             BlockPos blockpos3 = blockentity.getBlockPos();
             p_109600_.pushPose();
             p_109600_.translate((double)blockpos3.getX() - d0, (double)blockpos3.getY() - d1, (double)blockpos3.getZ() - d2);
+            if (this.shouldShowEntityOutlines() && blockentity.hasCustomOutlineRendering(this.minecraft.player)) { // FORGE: allow custom outline rendering
+               flag2 = true;
+            }
             this.blockEntityRenderDispatcher.render(blockentity, p_109601_, p_109600_, multibuffersource$buffersource);
             p_109600_.popPose();
          }
@@ -1019,6 +_,7 @@
          this.minecraft.getMainRenderTarget().bindWrite(false);
       }
 
+      net.minecraftforge.client.event.RenderLevelStageEvent.Stage.AFTER_BLOCK_ENTITIES.dispatch(this, p_109600_, p_254120_, this.ticks, p_109604_, frustum);
       profilerfiller.popPush("destroyProgress");
 
       for(Long2ObjectMap.Entry<SortedSet<BlockDestructionProgress>> entry : this.destructionProgress.long2ObjectEntrySet()) {
@@ -1034,7 +_,8 @@
                p_109600_.translate((double)blockpos2.getX() - d0, (double)blockpos2.getY() - d1, (double)blockpos2.getZ() - d2);
                PoseStack.Pose posestack$pose1 = p_109600_.last();
                VertexConsumer vertexconsumer1 = new SheetedDecalTextureGenerator(this.renderBuffers.crumblingBufferSource().getBuffer(ModelBakery.DESTROY_TYPES.get(k)), posestack$pose1.pose(), posestack$pose1.normal(), 1.0F);
-               this.minecraft.getBlockRenderer().renderBreakingTexture(this.level.getBlockState(blockpos2), blockpos2, this.level, p_109600_, vertexconsumer1);
+               var modelData = level.getModelDataManager().getAt(blockpos2);
+               this.minecraft.getBlockRenderer().renderBreakingTexture(this.level.getBlockState(blockpos2), blockpos2, this.level, p_109600_, vertexconsumer1, modelData == null ? net.minecraftforge.client.model.data.ModelData.EMPTY : modelData);
                p_109600_.popPose();
             }
          }
@@ -1046,10 +_,13 @@
          profilerfiller.popPush("outline");
          BlockPos blockpos1 = ((BlockHitResult)hitresult).getBlockPos();
          BlockState blockstate = this.level.getBlockState(blockpos1);
+         if (!net.minecraftforge.client.ForgeHooksClient.onDrawHighlight(this, p_109604_, hitresult, p_109601_, p_109600_, multibuffersource$buffersource))
          if (!blockstate.isAir() && this.level.getWorldBorder().isWithinBounds(blockpos1)) {
             VertexConsumer vertexconsumer2 = multibuffersource$buffersource.getBuffer(RenderType.lines());
             this.renderHitOutline(p_109600_, vertexconsumer2, p_109604_.getEntity(), d0, d1, d2, blockpos1, blockstate);
          }
+      } else if (hitresult != null && hitresult.getType() == HitResult.Type.ENTITY) {
+         net.minecraftforge.client.ForgeHooksClient.onDrawHighlight(this, p_109604_, hitresult, p_109601_, p_109600_, multibuffersource$buffersource);
       }
 
       this.minecraft.debugRenderer.render(p_109600_, multibuffersource$buffersource, d0, d1, d2);
@@ -1081,7 +_,8 @@
          this.particlesTarget.copyDepthFrom(this.minecraft.getMainRenderTarget());
          RenderStateShard.PARTICLES_TARGET.setupRenderState();
          profilerfiller.popPush("particles");
-         this.minecraft.particleEngine.render(p_109600_, multibuffersource$buffersource, p_109606_, p_109604_, p_109601_);
+         this.minecraft.particleEngine.render(p_109600_, multibuffersource$buffersource, p_109606_, p_109604_, p_109601_, frustum);
+         net.minecraftforge.client.event.RenderLevelStageEvent.Stage.AFTER_PARTICLES.dispatch(this, p_109600_, p_254120_, this.ticks, p_109604_, frustum);
          RenderStateShard.PARTICLES_TARGET.clearRenderState();
       } else {
          profilerfiller.popPush("translucent");
@@ -1095,7 +_,8 @@
          profilerfiller.popPush("string");
          this.renderSectionLayer(RenderType.tripwire(), p_109600_, d0, d1, d2, p_254120_);
          profilerfiller.popPush("particles");
-         this.minecraft.particleEngine.render(p_109600_, multibuffersource$buffersource, p_109606_, p_109604_, p_109601_);
+         this.minecraft.particleEngine.render(p_109600_, multibuffersource$buffersource, p_109606_, p_109604_, p_109601_, frustum);
+         net.minecraftforge.client.event.RenderLevelStageEvent.Stage.AFTER_PARTICLES.dispatch(this, p_109600_, p_254120_, this.ticks, p_109604_, frustum);
       }
 
       posestack.pushPose();
@@ -1119,6 +_,7 @@
          RenderStateShard.WEATHER_TARGET.setupRenderState();
          profilerfiller.popPush("weather");
          this.renderSnowAndRain(p_109606_, p_109601_, d0, d1, d2);
+         net.minecraftforge.client.event.RenderLevelStageEvent.Stage.AFTER_WEATHER.dispatch(this, p_109600_, p_254120_, this.ticks, p_109604_, frustum);
          this.renderWorldBorder(p_109604_);
          RenderStateShard.WEATHER_TARGET.clearRenderState();
          this.transparencyChain.process(p_109601_);
@@ -1127,6 +_,7 @@
          RenderSystem.depthMask(false);
          profilerfiller.popPush("weather");
          this.renderSnowAndRain(p_109606_, p_109601_, d0, d1, d2);
+         net.minecraftforge.client.event.RenderLevelStageEvent.Stage.AFTER_WEATHER.dispatch(this, p_109600_, p_254120_, this.ticks, p_109604_, frustum);
          this.renderWorldBorder(p_109604_);
          RenderSystem.depthMask(true);
       }
@@ -1269,6 +_,7 @@
       shaderinstance.clear();
       VertexBuffer.unbind();
       this.minecraft.getProfiler().pop();
+      net.minecraftforge.client.ForgeHooksClient.dispatchRenderStage(p_298012_, this, p_298121_, p_297481_, this.ticks, this.minecraft.gameRenderer.getMainCamera(), this.getFrustum());
       p_298012_.clearRenderState();
    }
 
@@ -1485,6 +_,8 @@
    }
 
    public void renderSky(PoseStack p_202424_, Matrix4f p_254034_, float p_202426_, Camera p_202427_, boolean p_202428_, Runnable p_202429_) {
+      if (level.effects().renderSky(level, ticks, p_202426_, p_202424_, p_202427_, p_254034_, p_202428_, p_202429_))
+         return;
       p_202429_.run();
       if (!p_202428_) {
          FogType fogtype = p_202427_.getFluidInCamera();
@@ -1606,6 +_,8 @@
    }
 
    public void renderClouds(PoseStack p_254145_, Matrix4f p_254537_, float p_254364_, double p_253843_, double p_253663_, double p_253795_) {
+      if (level.effects().renderClouds(level, ticks, p_254364_, p_254145_, p_253843_, p_253663_, p_253795_, p_254537_))
+         return;
       float f = this.level.effects().getCloudHeight();
       if (!Float.isNaN(f)) {
          RenderSystem.disableCull();
@@ -1792,7 +_,7 @@
             boolean flag = false;
             if (this.minecraft.options.prioritizeChunkUpdates().get() == PrioritizeChunkUpdates.NEARBY) {
                BlockPos blockpos1 = sectionrenderdispatcher$rendersection.getOrigin().offset(8, 8, 8);
-               flag = blockpos1.distSqr(blockpos) < 768.0D || sectionrenderdispatcher$rendersection.isDirtyFromPlayer();
+               flag = !net.minecraftforge.common.ForgeConfig.CLIENT.alwaysSetupTerrainOffThread.get() && (blockpos1.distSqr(blockpos) < 768.0D || sectionrenderdispatcher$rendersection.isDirtyFromPlayer()); // the target is the else block below, so invert the forge addition to get there early
             } else if (this.minecraft.options.prioritizeChunkUpdates().get() == PrioritizeChunkUpdates.PLAYER_AFFECTED) {
                flag = sectionrenderdispatcher$rendersection.isDirtyFromPlayer();
             }
@@ -2139,7 +_,23 @@
       this.viewArea.setDirty(p_109502_, p_109503_, p_109504_, p_109505_);
    }
 
+   public Frustum getFrustum() {
+      return this.capturedFrustum != null ? this.capturedFrustum : this.cullingFrustum;
+   }
+
+   public int getTicks() {
+      return this.ticks;
+   }
+
+   /**
+    * @deprecated Forge: Use item aware function below
+    */
+   @Deprecated
    public void playStreamingMusic(@Nullable SoundEvent p_109515_, BlockPos p_109516_) {
+      this.playStreamingMusic(p_109515_, p_109516_, p_109515_ == null? null : RecordItem.getBySound(p_109515_));
+   }
+
+   public void playStreamingMusic(@Nullable SoundEvent p_109515_, BlockPos p_109516_, @Nullable RecordItem musicDiscItem) {
       SoundInstance soundinstance = this.playingRecords.get(p_109516_);
       if (soundinstance != null) {
          this.minecraft.getSoundManager().stop(soundinstance);
@@ -2147,7 +_,7 @@
       }
 
       if (p_109515_ != null) {
-         RecordItem recorditem = RecordItem.getBySound(p_109515_);
+         RecordItem recorditem = musicDiscItem;
          if (recorditem != null) {
             this.minecraft.gui.setNowPlaying(recorditem.getDisplayName());
          }
@@ -2284,7 +_,7 @@
          case 1010:
             Item item = Item.byId(p_234307_);
             if (item instanceof RecordItem recorditem) {
-               this.playStreamingMusic(recorditem.getSound(), p_234306_);
+               this.playStreamingMusic(recorditem.getSound(), p_234306_, recorditem);
             }
             break;
          case 1011:
@@ -2437,7 +_,7 @@
          case 2001:
             BlockState blockstate1 = Block.stateById(p_234307_);
             if (!blockstate1.isAir()) {
-               SoundType soundtype = blockstate1.getSoundType();
+               SoundType soundtype = blockstate1.getSoundType(this.level, p_234306_, null);
                this.level.playLocalSound(p_234306_, soundtype.getBreakSound(), SoundSource.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F, false);
             }
 
@@ -2672,7 +_,7 @@
       } else {
          int i = p_109538_.getBrightness(LightLayer.SKY, p_109540_);
          int j = p_109538_.getBrightness(LightLayer.BLOCK, p_109540_);
-         int k = p_109539_.getLightEmission();
+         int k = p_109539_.getLightEmission(p_109538_, p_109540_);
          if (j < k) {
             j = k;
          }
