--- a/net/minecraft/client/renderer/ShaderInstance.java
+++ b/net/minecraft/client/renderer/ShaderInstance.java
@@ -98,10 +_,14 @@
    @Nullable
    public final Uniform CHUNK_OFFSET;
 
+   @Deprecated // FORGE: Use the ResourceLocation variant below
    public ShaderInstance(ResourceProvider p_173336_, String p_173337_, VertexFormat p_173338_) throws IOException {
-      this.name = p_173337_;
+      this(p_173336_, new ResourceLocation(p_173337_), p_173338_);
+   }
+   public ShaderInstance(ResourceProvider p_173336_, ResourceLocation shaderLocation, VertexFormat p_173338_) throws IOException {
+      this.name = shaderLocation.getNamespace().equals("minecraft") ? shaderLocation.getPath() : shaderLocation.toString();
       this.vertexFormat = p_173338_;
-      ResourceLocation resourcelocation = new ResourceLocation("shaders/core/" + p_173337_ + ".json");
+      ResourceLocation resourcelocation = new ResourceLocation(shaderLocation.getNamespace(), "shaders/core/" + shaderLocation.getPath() + ".json");
 
       try (Reader reader = p_173336_.openAsReader(resourcelocation)) {
          JsonObject jsonobject = GsonHelper.parse(reader);
@@ -208,8 +_,10 @@
       Program program1 = p_173342_.getPrograms().get(p_173343_);
       Program program;
       if (program1 == null) {
-         String s = "shaders/core/" + p_173343_ + p_173342_.getExtension();
-         Resource resource = p_173341_.getResourceOrThrow(new ResourceLocation(s));
+         ResourceLocation loc = new ResourceLocation(p_173343_);
+         String s = "shaders/core/" + loc.getPath() + p_173342_.getExtension();
+         ResourceLocation resourcelocation = new ResourceLocation(loc.getNamespace(), s);
+         Resource resource = p_173341_.getResourceOrThrow(resourcelocation);
 
          try (InputStream inputstream = resource.open()) {
             final String s1 = FileUtil.getFullResourcePath(s);
@@ -217,16 +_,17 @@
                private final Set<String> importedPaths = Sets.newHashSet();
 
                public String applyImport(boolean p_173374_, String p_173375_) {
-                  p_173375_ = FileUtil.normalizeResourcePath((p_173374_ ? s1 : "shaders/include/") + p_173375_);
-                  if (!this.importedPaths.add(p_173375_)) {
+                  // FORGE: use the mod's namespace to look up resources if specified
+                  ResourceLocation resourcelocation = net.minecraftforge.client.ForgeHooksClient.getShaderImportLocation(s1, p_173374_, p_173375_);
+                  if (!this.importedPaths.add(resourcelocation.toString())) {
                      return null;
                   } else {
-                     ResourceLocation resourcelocation = new ResourceLocation(p_173375_);
 
                      try (Reader reader = p_173341_.openAsReader(resourcelocation)) {
                         return IOUtils.toString(reader);
                      } catch (IOException ioexception) {
-                        ShaderInstance.LOGGER.error("Could not open GLSL import {}: {}", p_173375_, ioexception.getMessage());
+                        // FORGE: specify the namespace of the failed import in case of duplicates from multiple mods
+                        ShaderInstance.LOGGER.error("Could not open GLSL import {}: {}", resourcelocation, ioexception.getMessage());
                         return "#error " + ioexception.getMessage();
                      }
                   }
