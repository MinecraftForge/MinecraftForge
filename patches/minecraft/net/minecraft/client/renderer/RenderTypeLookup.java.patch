--- a/net/minecraft/client/renderer/RenderTypeLookup.java
+++ b/net/minecraft/client/renderer/RenderTypeLookup.java
@@ -19,6 +_,7 @@
 
 @OnlyIn(Dist.CLIENT)
 public class RenderTypeLookup {
+   @Deprecated
    private static final Map<Block, RenderType> TYPE_BY_BLOCK = Util.make(Maps.newHashMap(), (p_228395_0_) -> {
       RenderType rendertype = RenderType.tripwire();
       p_228395_0_.put(Blocks.TRIPWIRE, rendertype);
@@ -263,6 +_,7 @@
       p_228395_0_.put(Blocks.FROSTED_ICE, rendertype3);
       p_228395_0_.put(Blocks.BUBBLE_COLUMN, rendertype3);
    });
+   @Deprecated
    private static final Map<Fluid, RenderType> TYPE_BY_FLUID = Util.make(Maps.newHashMap(), (p_228392_0_) -> {
       RenderType rendertype = RenderType.translucent();
       p_228392_0_.put(Fluids.FLOWING_WATER, rendertype);
@@ -270,6 +_,7 @@
    });
    private static boolean renderCutout;
 
+   @Deprecated // FORGE: Use canRenderInLayer
    public static RenderType getChunkRenderType(BlockState p_228390_0_) {
       Block block = p_228390_0_.getBlock();
       if (block instanceof LeavesBlock) {
@@ -280,6 +_,7 @@
       }
    }
 
+   @Deprecated // FORGE: Use canRenderInLayer
    public static RenderType getMovingBlockRenderType(BlockState p_239221_0_) {
       Block block = p_239221_0_.getBlock();
       if (block instanceof LeavesBlock) {
@@ -295,8 +_,7 @@
    }
 
    public static RenderType getRenderType(BlockState p_239220_0_, boolean p_239220_1_) {
-      RenderType rendertype = getChunkRenderType(p_239220_0_);
-      if (rendertype == RenderType.translucent()) {
+      if (canRenderInLayer(p_239220_0_, RenderType.translucent())) {
          if (!Minecraft.useShaderTransparency()) {
             return Atlases.translucentCullBlockSheet();
          } else {
@@ -317,9 +_,58 @@
       }
    }
 
+   @Deprecated // FORGE: Use canRenderInLayer
    public static RenderType getRenderLayer(FluidState p_228391_0_) {
       RenderType rendertype = TYPE_BY_FLUID.get(p_228391_0_.getType());
       return rendertype != null ? rendertype : RenderType.solid();
+   }
+
+   // FORGE START
+
+   private static final Map<net.minecraftforge.registries.IRegistryDelegate<Block>, java.util.function.Predicate<RenderType>> blockRenderChecks = Maps.newHashMap();
+   private static final Map<net.minecraftforge.registries.IRegistryDelegate<Fluid>, java.util.function.Predicate<RenderType>> fluidRenderChecks = Maps.newHashMap();
+   static {
+      TYPE_BY_BLOCK.forEach(RenderTypeLookup::setRenderLayer);
+      TYPE_BY_FLUID.forEach(RenderTypeLookup::setRenderLayer);
+   }
+
+   public static boolean canRenderInLayer(BlockState state, RenderType type) {
+      Block block = state.getBlock();
+      if (block instanceof LeavesBlock) {
+         return renderCutout ? type == RenderType.cutoutMipped() : type == RenderType.solid();
+      } else {
+         java.util.function.Predicate<RenderType> rendertype;
+         synchronized (RenderTypeLookup.class) {
+            rendertype = blockRenderChecks.get(block.delegate);
+         }
+         return rendertype != null ? rendertype.test(type) : type == RenderType.solid();
+      }
+   }
+
+   public static boolean canRenderInLayer(FluidState fluid, RenderType type) {
+      java.util.function.Predicate<RenderType> rendertype;
+      synchronized (RenderTypeLookup.class) {
+         rendertype = fluidRenderChecks.get(fluid.getType().delegate);
+      }
+      return rendertype != null ? rendertype.test(type) : type == RenderType.solid();
+   }
+
+   public static void setRenderLayer(Block block, RenderType type) {
+      java.util.Objects.requireNonNull(type);
+      setRenderLayer(block, type::equals);
+   }
+
+   public static synchronized void setRenderLayer(Block block, java.util.function.Predicate<RenderType> predicate) {
+      blockRenderChecks.put(block.delegate, predicate);
+   }
+
+   public static void setRenderLayer(Fluid fluid, RenderType type) {
+      java.util.Objects.requireNonNull(type);
+      setRenderLayer(fluid, type::equals);
+   }
+
+   public static synchronized void setRenderLayer(Fluid fluid, java.util.function.Predicate<RenderType> predicate) {
+      fluidRenderChecks.put(fluid.delegate, predicate);
    }
 
    public static void setFancy(boolean p_228393_0_) {
