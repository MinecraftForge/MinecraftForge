--- a/net/minecraft/client/renderer/block/model/BlockElement.java
+++ b/net/minecraft/client/renderer/block/model/BlockElement.java
@@ -28,14 +_,21 @@
    public final Map<Direction, BlockElementFace> f_111310_;
    public final BlockElementRotation f_111311_;
    public final boolean f_111312_;
+   public final net.minecraftforge.client.model.ForgeFaceData faceData;
 
    public BlockElement(Vector3f p_111314_, Vector3f p_111315_, Map<Direction, BlockElementFace> p_111316_, @Nullable BlockElementRotation p_111317_, boolean p_111318_) {
+      this(p_111314_, p_111315_, p_111316_, p_111317_, p_111318_, net.minecraftforge.client.model.ForgeFaceData.DEFAULT);
+   }
+
+   public BlockElement(Vector3f p_111314_, Vector3f p_111315_, Map<Direction, BlockElementFace> p_111316_, @Nullable BlockElementRotation p_111317_, boolean p_111318_, net.minecraftforge.client.model.ForgeFaceData faceData) {
       this.f_111308_ = p_111314_;
       this.f_111309_ = p_111315_;
       this.f_111310_ = p_111316_;
       this.f_111311_ = p_111317_;
       this.f_111312_ = p_111318_;
       this.m_111319_();
+      this.faceData = faceData;
+      this.f_111310_.values().forEach(face -> face.parent = this);
    }
 
    private void m_111319_() {
@@ -78,7 +_,11 @@
             throw new JsonParseException("Expected shade to be a Boolean");
          } else {
             boolean flag = GsonHelper.m_13855_(jsonobject, "shade", true);
-            return new BlockElement(vector3f, vector3f1, map, blockelementrotation, flag);
+            var faceData = jsonobject.has("forge_data") ?
+                net.minecraftforge.client.model.ForgeFaceData.CODEC.parse(com.mojang.serialization.JsonOps.INSTANCE, GsonHelper.m_13930_(jsonobject, "forge_data"))
+                .getOrThrow(false, error -> new JsonParseException(error))
+                : net.minecraftforge.client.model.ForgeFaceData.DEFAULT;
+            return new BlockElement(vector3f, vector3f1, map, blockelementrotation, flag, faceData);
          }
       }
 
