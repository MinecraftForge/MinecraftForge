--- ../src_base/minecraft/net/minecraft/client/renderer/RenderGlobal.java 
+++ ../src_work/minecraft/net/minecraft/client/renderer/RenderGlobal.java 
@@ -65,6 +65,9 @@
 import org.lwjgl.opengl.ARBOcclusionQuery;
 import org.lwjgl.opengl.GL11;
 
+import net.minecraftforge.client.IRenderHandler;
+import net.minecraftforge.client.MinecraftForgeClient;
+
 @SideOnly(Side.CLIENT)
 public class RenderGlobal implements IWorldAccess
 {
@@ -199,6 +202,45 @@
      * resorted)
      */
     double prevSortZ = -9999.0D;
+    
+    /**
+     * Previous X position when the last semi-transparency update occurred. We need to track transparency updates
+     * separately from render sorts, since they happen rather more often (when the player moves every 1 unit).
+     */
+    double prevTransparencyUpdateX = -9999.0D;
+    
+    /**
+     * Previous Y position when the last semi-transparency update occurred. We need to track transparency updates
+     * separately from render sorts, since they happen rather more often (when the player moves every 1 unit).
+     */
+    double prevTransparencyUpdateY = -9999.0D;
+    
+    /**
+     * Previous Z position when the last semi-transparency update occurred. We need to track transparency updates
+     * separately from render sorts, since they happen rather more often (when the player moves every 1 unit).
+     */
+    double prevTransparencyUpdateZ = -9999.0D;
+    
+    /**
+     * Previous viewpoint entity chunk X coordinate.  We track chunk coordinates now, because resorting renderers
+     * is no longer just an optimization- transparency will render incorrectly if the player changes chunks
+     * and we don't resort the renderers.
+     */
+    int prevChunkX = -999;
+    
+    /**
+     * Previous viewpoint entity chunk Y coordinate.  We track chunk coordinates now, because resorting renderers
+     * is no longer just an optimization- transparency will render incorrectly if the player changes chunks
+     * and we don't resort the renderers.
+     */
+    int prevChunkY = -999;
+    
+    /**
+     * Previous viewpoint entity chunk Z coordinate.  We track chunk coordinates now, because resorting renderers
+     * is no longer just an optimization- transparency will render incorrectly if the player changes chunks
+     * and we don't resort the renderers.
+     */
+    int prevChunkZ = -999;
 
     /**
      * The offset used to determine if a renderer is one of the sixteenth that are being updated this frame
@@ -338,6 +380,12 @@
         this.prevSortX = -9999.0D;
         this.prevSortY = -9999.0D;
         this.prevSortZ = -9999.0D;
+        this.prevTransparencyUpdateX = -9999.0D;
+        this.prevTransparencyUpdateY = -9999.0D;
+        this.prevTransparencyUpdateZ = -9999.0D;
+        this.prevChunkX = -999;
+        this.prevChunkY = -999;
+        this.prevChunkZ = -999;
         RenderManager.instance.set(par1WorldClient);
         this.theWorld = par1WorldClient;
         this.globalRenderBlocks = new RenderBlocks(par1WorldClient);
@@ -443,35 +491,47 @@
      */
     public void renderEntities(Vec3 par1Vec3, ICamera par2ICamera, float par3)
     {
+        int pass = MinecraftForgeClient.getRenderPass();
         if (this.renderEntitiesStartupCounter > 0)
         {
+            if (pass > 0)
+            {
+                return;
+            }
             --this.renderEntitiesStartupCounter;
         }
         else
         {
             this.theWorld.theProfiler.startSection("prepare");
-            TileEntityRenderer.instance.cacheActiveRenderInfo(this.theWorld, this.renderEngine, this.mc.fontRenderer, this.mc.renderViewEntity, par3);
-            RenderManager.instance.cacheActiveRenderInfo(this.theWorld, this.renderEngine, this.mc.fontRenderer, this.mc.renderViewEntity, this.mc.pointedEntityLiving, this.mc.gameSettings, par3);
-            this.countEntitiesTotal = 0;
-            this.countEntitiesRendered = 0;
-            this.countEntitiesHidden = 0;
-            EntityLiving entityliving = this.mc.renderViewEntity;
-            RenderManager.renderPosX = entityliving.lastTickPosX + (entityliving.posX - entityliving.lastTickPosX) * (double)par3;
-            RenderManager.renderPosY = entityliving.lastTickPosY + (entityliving.posY - entityliving.lastTickPosY) * (double)par3;
-            RenderManager.renderPosZ = entityliving.lastTickPosZ + (entityliving.posZ - entityliving.lastTickPosZ) * (double)par3;
-            TileEntityRenderer.staticPlayerX = entityliving.lastTickPosX + (entityliving.posX - entityliving.lastTickPosX) * (double)par3;
-            TileEntityRenderer.staticPlayerY = entityliving.lastTickPosY + (entityliving.posY - entityliving.lastTickPosY) * (double)par3;
-            TileEntityRenderer.staticPlayerZ = entityliving.lastTickPosZ + (entityliving.posZ - entityliving.lastTickPosZ) * (double)par3;
+            if (pass == 0)
+            {
+                TileEntityRenderer.instance.cacheActiveRenderInfo(this.theWorld, this.renderEngine, this.mc.fontRenderer, this.mc.renderViewEntity, par3);
+                RenderManager.instance.cacheActiveRenderInfo(this.theWorld, this.renderEngine, this.mc.fontRenderer, this.mc.renderViewEntity, this.mc.pointedEntityLiving, this.mc.gameSettings, par3);
+                this.countEntitiesTotal = 0;
+                this.countEntitiesRendered = 0;
+                this.countEntitiesHidden = 0;
+                EntityLiving entityliving = this.mc.renderViewEntity;
+                RenderManager.renderPosX = entityliving.lastTickPosX + (entityliving.posX - entityliving.lastTickPosX) * (double)par3;
+                RenderManager.renderPosY = entityliving.lastTickPosY + (entityliving.posY - entityliving.lastTickPosY) * (double)par3;
+                RenderManager.renderPosZ = entityliving.lastTickPosZ + (entityliving.posZ - entityliving.lastTickPosZ) * (double)par3;
+                TileEntityRenderer.staticPlayerX = entityliving.lastTickPosX + (entityliving.posX - entityliving.lastTickPosX) * (double)par3;
+                TileEntityRenderer.staticPlayerY = entityliving.lastTickPosY + (entityliving.posY - entityliving.lastTickPosY) * (double)par3;
+                TileEntityRenderer.staticPlayerZ = entityliving.lastTickPosZ + (entityliving.posZ - entityliving.lastTickPosZ) * (double)par3;
+            }
             this.mc.entityRenderer.enableLightmap((double)par3);
             this.theWorld.theProfiler.endStartSection("global");
             List list = this.theWorld.getLoadedEntityList();
-            this.countEntitiesTotal = list.size();
+            if (pass == 0)
+            {
+                this.countEntitiesTotal = list.size();
+            }
             int i;
             Entity entity;
 
             for (i = 0; i < this.theWorld.weatherEffects.size(); ++i)
             {
                 entity = (Entity)this.theWorld.weatherEffects.get(i);
+                if (!entity.shouldRenderInPass(pass)) continue;
                 ++this.countEntitiesRendered;
 
                 if (entity.isInRangeToRenderVec3D(par1Vec3))
@@ -485,6 +545,7 @@
             for (i = 0; i < list.size(); ++i)
             {
                 entity = (Entity)list.get(i);
+                if (!entity.shouldRenderInPass(pass)) continue;
 
                 if (entity.isInRangeToRenderVec3D(par1Vec3) && (entity.ignoreFrustumCheck || par2ICamera.isBoundingBoxInFrustum(entity.boundingBox) || entity.riddenByEntity == this.mc.thePlayer) && (entity != this.mc.renderViewEntity || this.mc.gameSettings.thirdPersonView != 0 || this.mc.renderViewEntity.isPlayerSleeping()) && this.theWorld.blockExists(MathHelper.floor_double(entity.posX), 0, MathHelper.floor_double(entity.posZ)))
                 {
@@ -498,7 +559,11 @@
 
             for (i = 0; i < this.tileEntities.size(); ++i)
             {
-                TileEntityRenderer.instance.renderTileEntity((TileEntity)this.tileEntities.get(i), par3);
+                TileEntity tile = (TileEntity)tileEntities.get(i);
+                if (tile.shouldRenderInPass(pass) && par2ICamera.isBoundingBoxInFrustum(tile.getRenderBoundingBox()))
+                {
+                    TileEntityRenderer.instance.renderTileEntity(tile, par3);
+                }
             }
 
             this.mc.entityRenderer.disableLightmap((double)par3);
@@ -653,14 +718,45 @@
         double d5 = par1EntityLiving.posY - this.prevSortY;
         double d6 = par1EntityLiving.posZ - this.prevSortZ;
 
-        if (d4 * d4 + d5 * d5 + d6 * d6 > 16.0D)
+        //Resort when the viewpoint player changes chunks, not just when they move more than 4 blocks
+        //Reason for this: the subchunk first in the rendering order will render last, on top of everything else.
+        //So if you change chunks without moving 4 units since last reset, stuff from your old chunk
+        //will render on top of closer stuff in your new chunk unless you force a resort.
+        if ((this.prevChunkX != par1EntityLiving.chunkCoordX || this.prevChunkY != par1EntityLiving.chunkCoordY || this.prevChunkZ != par1EntityLiving.chunkCoordZ) || d4 * d4 + d5 * d5 + d6 * d6 > 16.0D)
         {
             this.prevSortX = par1EntityLiving.posX;
             this.prevSortY = par1EntityLiving.posY;
             this.prevSortZ = par1EntityLiving.posZ;
+            this.prevChunkX = par1EntityLiving.chunkCoordX;
+            this.prevChunkY = par1EntityLiving.chunkCoordY;
+            this.prevChunkZ = par1EntityLiving.chunkCoordZ;
+            
             this.markRenderersForNewPosition(MathHelper.floor_double(par1EntityLiving.posX), MathHelper.floor_double(par1EntityLiving.posY), MathHelper.floor_double(par1EntityLiving.posZ));
             Arrays.sort(this.sortedWorldRenderers, new EntitySorter(par1EntityLiving));
-        }
+        } 
+        
+        //We track transparency updates separately, particularly since render resorts don't always force
+        //a rerender of nearby stuff, so it's just better to handle resorting totally separately.
+        double transparencyXDiff = par1EntityLiving.posX - this.prevTransparencyUpdateX;
+        double transparencyYDiff = par1EntityLiving.posY - this.prevTransparencyUpdateY;
+        double transparencyZDiff = par1EntityLiving.posZ - this.prevTransparencyUpdateZ;
+
+        if (transparencyXDiff * transparencyXDiff + transparencyYDiff * transparencyYDiff + transparencyZDiff * transparencyZDiff > 1.0D)
+        {
+            this.prevTransparencyUpdateX = par1EntityLiving.posX;
+            this.prevTransparencyUpdateY = par1EntityLiving.posY;
+            this.prevTransparencyUpdateZ = par1EntityLiving.posZ;
+            
+            //If you've moved a meter since the last time we did this, 
+            //rebuild transparency in your closest 27 subchunks (tends to be a 3x3x3 box of subchunks around the player)
+            for (int i = 0; i < 27; i++)
+            {
+                this.sortedWorldRenderers[i].rebuildTransparencyPass(par1EntityLiving);
+            }
+            
+            //Further away stuff doesn't have to be rebuilt as often and can be handled slowly by ordinary renderer resorts
+        }
+
 
         RenderHelper.disableStandardItemLighting();
         byte b0 = 0;
@@ -818,7 +914,21 @@
         this.glRenderLists.clear();
         int l = 0;
 
-        for (int i1 = par1; i1 < par2; ++i1)
+        //This renders subchunks in sorting order.  Only problem?  Minecraft likes to render in front-to-back order
+        //to cut down on pixel writes.  Well transparency has to be rendered in back-to-front to look right,
+        //so now we reverse this order in pass 1.
+        int start = par1;
+        int end = par2;
+        int step = 1;
+        
+        if (par3 == 1)
+        {
+            start = (this.sortedWorldRenderers.length-1)-par1;
+            end = (this.sortedWorldRenderers.length - 1)-par2;
+            step = -1;
+        }
+
+        for (int i1 = start; i1 != end; i1 += step)
         {
             if (par3 == 0)
             {
@@ -933,6 +1043,12 @@
      */
     public void renderSky(float par1)
     {
+        IRenderHandler skyProvider = null;
+        if ((skyProvider = this.mc.theWorld.provider.getSkyRenderer()) != null)
+        {
+            skyProvider.render(par1, this.theWorld, mc);
+            return;
+        }
         if (this.mc.theWorld.provider.dimensionId == 1)
         {
             GL11.glDisable(GL11.GL_FOG);
@@ -1171,6 +1287,13 @@
 
     public void renderClouds(float par1)
     {
+        IRenderHandler renderer = null;
+        if ((renderer = theWorld.provider.getCloudRenderer()) != null)
+        {
+            renderer.render(par1, theWorld, mc);
+            return;
+        }
+
         if (this.mc.theWorld.provider.isSurfaceWorld())
         {
             if (this.mc.gameSettings.fancyGraphics)
@@ -1599,6 +1722,11 @@
     }
 
     public void drawBlockDamageTexture(Tessellator par1Tessellator, EntityPlayer par2EntityPlayer, float par3)
+    {
+        drawBlockDamageTexture(par1Tessellator, (EntityLiving)par2EntityPlayer, par3);
+    }
+
+    public void drawBlockDamageTexture(Tessellator par1Tessellator, EntityLiving par2EntityPlayer, float par3)
     {
         double d0 = par2EntityPlayer.lastTickPosX + (par2EntityPlayer.posX - par2EntityPlayer.lastTickPosX) * (double)par3;
         double d1 = par2EntityPlayer.lastTickPosY + (par2EntityPlayer.posY - par2EntityPlayer.lastTickPosY) * (double)par3;
