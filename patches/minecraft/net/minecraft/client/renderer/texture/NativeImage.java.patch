--- a/net/minecraft/client/renderer/texture/NativeImage.java
+++ b/net/minecraft/client/renderer/texture/NativeImage.java
@@ -180,7 +_,7 @@
    public int getPixelRGBA(int p_195709_1_, int p_195709_2_) {
       if (this.format != NativeImage.PixelFormat.RGBA) {
          throw new IllegalArgumentException(String.format("getPixelRGBA only works on RGBA images; have %s", this.format));
-      } else if (p_195709_1_ <= this.width && p_195709_2_ <= this.height) {
+      } else if (p_195709_1_ >= 0 && p_195709_2_ >= 0 && p_195709_1_ < this.width && p_195709_2_ < this.height) { //Fix MC-162953 bounds checks in `NativeImage`
          this.checkAllocated();
          long i = (long)((p_195709_1_ + p_195709_2_ * this.width) * 4);
          return MemoryUtil.memGetInt(this.pixels + i);
@@ -192,7 +_,7 @@
    public void setPixelRGBA(int p_195700_1_, int p_195700_2_, int p_195700_3_) {
       if (this.format != NativeImage.PixelFormat.RGBA) {
          throw new IllegalArgumentException(String.format("getPixelRGBA only works on RGBA images; have %s", this.format));
-      } else if (p_195700_1_ <= this.width && p_195700_2_ <= this.height) {
+      } else if (p_195700_1_ >= 0 && p_195700_2_ >= 0 && p_195700_1_ < this.width && p_195700_2_ < this.height) { //Fix MC-162953 bounds checks in `NativeImage`
          this.checkAllocated();
          long i = (long)((p_195700_1_ + p_195700_2_ * this.width) * 4);
          MemoryUtil.memPutInt(this.pixels + i, p_195700_3_);
@@ -204,7 +_,7 @@
    public byte getLuminanceOrAlpha(int p_211675_1_, int p_211675_2_) {
       if (!this.format.hasLuminanceOrAlpha()) {
          throw new IllegalArgumentException(String.format("no luminance or alpha in %s", this.format));
-      } else if (p_211675_1_ <= this.width && p_211675_2_ <= this.height) {
+      } else if (p_211675_1_ >= 0 && p_211675_2_ >= 0 && p_211675_1_ < this.width && p_211675_2_ < this.height) { //Fix MC-162953 bounds checks in `NativeImage`
          int i = (p_211675_1_ + p_211675_2_ * this.width) * this.format.components() + this.format.luminanceOrAlphaOffset() / 8;
          return MemoryUtil.memGetByte(this.pixels + (long)i);
       } else {
