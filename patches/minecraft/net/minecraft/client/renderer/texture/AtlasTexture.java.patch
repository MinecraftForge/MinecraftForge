--- a/net/minecraft/client/renderer/texture/AtlasTexture.java
+++ b/net/minecraft/client/renderer/texture/AtlasTexture.java
@@ -33,7 +33,7 @@
 import org.apache.logging.log4j.Logger;
 
 @OnlyIn(Dist.CLIENT)
-public class AtlasTexture extends Texture implements ITickableTextureObject {
+public class AtlasTexture extends Texture implements ITickableTextureObject, net.minecraftforge.client.extensions.IForgeAtlasTexture {
    private static final Logger field_147635_d = LogManager.getLogger();
    public static final ResourceLocation field_110575_b = new ResourceLocation("textures/atlas/blocks.png");
    public static final ResourceLocation field_215262_g = new ResourceLocation("textures/atlas/particles.png");
@@ -80,6 +80,7 @@
          }
       }
 
+      onTextureStitchedPost();
    }
 
    public AtlasTexture.SheetData func_215254_a(IResourceManager p_215254_1_, Iterable<ResourceLocation> p_215254_2_, IProfiler p_215254_3_) {
@@ -98,7 +99,7 @@
       int k = 1 << this.field_147636_j;
       p_215254_3_.func_219895_b("extracting_frames");
 
-      for(TextureAtlasSprite textureatlassprite : this.func_215256_a(p_215254_1_, set)) {
+      for(TextureAtlasSprite textureatlassprite : collectSprites(p_215254_1_, set, this::func_215256_a)) {
          j = Math.min(j, Math.min(textureatlassprite.func_94211_a(), textureatlassprite.func_94216_b()));
          int l = Math.min(Integer.lowestOneBit(textureatlassprite.func_94211_a()), Integer.lowestOneBit(textureatlassprite.func_94216_b()));
          if (l < k) {
@@ -111,6 +112,7 @@
 
       int i1 = Math.min(j, k);
       int j1 = MathHelper.func_151239_c(i1);
+      if (false) // FORGE: do not lower the mipmap level
       if (j1 < this.field_147636_j) {
          field_147635_d.warn("{}: dropping miplevel from {} to {}, because of minimum power of two: {}", this.field_94254_c, this.field_147636_j, j1, i1);
          this.field_147636_j = j1;
@@ -135,7 +137,7 @@
       }
 
       p_215254_3_.func_219895_b("loading");
-      List<TextureAtlasSprite> list = this.func_215259_a(p_215254_1_, stitcher);
+      List<TextureAtlasSprite> list = processTextures(p_215254_1_, stitcher.func_94309_g());
       p_215254_3_.func_76319_b();
       return new AtlasTexture.SheetData(set, stitcher.func_110935_a(), stitcher.func_110936_b(), list);
    }
@@ -215,10 +217,13 @@
 
          return flag;
       }
+      generateMipmaps(p_195422_2_);
+      return true;
+   }
 
+   public void generateMipmaps(TextureAtlasSprite p_195422_2_) {
       try {
          p_195422_2_.func_147963_d(this.field_147636_j);
-         return true;
       } catch (Throwable throwable) {
          CrashReport crashreport = CrashReport.func_85055_a(throwable, "Applying mipmap");
          CrashReportCategory crashreportcategory = crashreport.func_85058_a("Sprite being mipmapped");
@@ -289,4 +294,24 @@
          this.field_217808_d = p_i49874_4_;
       }
    }
+   //===================================================================================================
+   //                                           Forge Start
+   //===================================================================================================
+
+   public String getBasePath()
+   {
+       return field_94254_c;
+   }
+
+   public int getMipmapLevels()
+   {
+       return field_147636_j;
+   }
+
+   @Override
+   public TextureAtlasSprite getMissingTexture()
+   {
+      return field_94249_f;
+   }
+
 }
