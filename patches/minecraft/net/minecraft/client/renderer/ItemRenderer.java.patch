--- ../src_base/minecraft/net/minecraft/client/renderer/ItemRenderer.java
+++ ../src_work/minecraft/net/minecraft/client/renderer/ItemRenderer.java
@@ -1,7 +1,7 @@
 package net.minecraft.client.renderer;
 
-import cpw.mods.fml.relauncher.Side;
-import cpw.mods.fml.relauncher.SideOnly;
+import static net.minecraftforge.client.IItemRenderer.ItemRenderType.EQUIPPED_FIRST_PERSON;
+import static net.minecraftforge.client.IItemRenderer.ItemRenderType.FIRST_PERSON_MAP;
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.client.Minecraft;
@@ -14,12 +14,22 @@
 import net.minecraft.entity.EntityLiving;
 import net.minecraft.item.EnumAction;
 import net.minecraft.item.Item;
+import net.minecraft.item.ItemBlock;
+import net.minecraft.item.ItemMap;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.Icon;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.storage.MapData;
+import net.minecraftforge.client.ForgeHooksClient;
+import net.minecraftforge.client.IItemRenderer;
+import net.minecraftforge.client.IItemRenderer.ItemRenderType;
+import net.minecraftforge.client.MinecraftForgeClient;
+
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
+
+import cpw.mods.fml.relauncher.Side;
+import cpw.mods.fml.relauncher.SideOnly;
 
 @SideOnly(Side.CLIENT)
 public class ItemRenderer
@@ -47,6 +57,29 @@
         this.mapItemRenderer = new MapItemRenderer(par1Minecraft.fontRenderer, par1Minecraft.gameSettings, par1Minecraft.renderEngine);
     }
 
+    public void renderItem(EntityLiving par1EntityLiving, ItemStack par2ItemStack, int par3, IItemRenderer customRenderer, ItemRenderType type)
+    {
+        GL11.glPushMatrix();
+
+        Block block = null;
+        if (par2ItemStack.getItem() instanceof ItemBlock && par2ItemStack.itemID < Block.blocksList.length)
+        {
+            block = Block.blocksList[par2ItemStack.itemID];
+        }
+
+        if (customRenderer != null)
+        {
+            this.mc.renderEngine.bindTexture(par2ItemStack.getItemSpriteNumber() == 0 ? "/terrain.png" : "/gui/items.png");
+            ForgeHooksClient.renderEquippedItem(type, customRenderer, renderBlocksInstance, par1EntityLiving, par2ItemStack);
+        }
+        else
+        {
+        	this.renderItem(par1EntityLiving, par2ItemStack, par3);
+        }
+        
+        GL11.glPopMatrix();
+    }
+    
     /**
      * Renders the item stack for being in an entity's hand Args: itemStack
      */
@@ -54,7 +87,13 @@
     {
         GL11.glPushMatrix();
 
-        if (par2ItemStack.getItemSpriteNumber() == 0 && Block.blocksList[par2ItemStack.itemID] != null && RenderBlocks.renderItemIn3d(Block.blocksList[par2ItemStack.itemID].getRenderType()))
+        Block block = null;
+        if (par2ItemStack.getItem() instanceof ItemBlock && par2ItemStack.itemID < Block.blocksList.length)
+        {
+            block = Block.blocksList[par2ItemStack.itemID];
+        }
+        
+        if (block != null && par2ItemStack.getItemSpriteNumber() == 0 && RenderBlocks.renderItemIn3d(Block.blocksList[par2ItemStack.itemID].getRenderType()))
         {
             this.mc.renderEngine.bindTexture("/terrain.png");
             this.renderBlocksInstance.renderBlockAsItem(Block.blocksList[par2ItemStack.itemID], par2ItemStack.getItemDamage(), 1.0F);
@@ -272,7 +311,7 @@
         Render render;
         RenderPlayer renderplayer;
 
-        if (itemstack != null && itemstack.itemID == Item.map.itemID)
+        if (itemstack != null && itemstack.getItem() instanceof ItemMap)
         {
             GL11.glPushMatrix();
             f4 = 0.8F;
@@ -340,11 +379,20 @@
             tessellator.addVertexWithUV((double)(128 + b0), (double)(0 - b0), 0.0D, 1.0D, 0.0D);
             tessellator.addVertexWithUV((double)(0 - b0), (double)(0 - b0), 0.0D, 0.0D, 0.0D);
             tessellator.draw();
-            MapData mapdata = Item.map.getMapData(itemstack, this.mc.theWorld);
-
-            if (mapdata != null)
-            {
-                this.mapItemRenderer.renderMap(this.mc.thePlayer, this.mc.renderEngine, mapdata);
+
+            IItemRenderer custom = MinecraftForgeClient.getItemRenderer(itemstack, FIRST_PERSON_MAP);
+            MapData mapdata = ((ItemMap)itemstack.getItem()).getMapData(itemstack, this.mc.theWorld);
+
+            if (custom == null)
+            {
+                if (mapdata != null)
+                {
+                    this.mapItemRenderer.renderMap(this.mc.thePlayer, this.mc.renderEngine, mapdata);
+                }
+            }
+            else
+            {
+                custom.renderItem(FIRST_PERSON_MAP, itemstack, mc.thePlayer, mc.renderEngine, mapdata);
             }
 
             GL11.glPopMatrix();
@@ -444,19 +492,24 @@
                 GL11.glRotatef(180.0F, 0.0F, 1.0F, 0.0F);
             }
 
+            IItemRenderer customRenderer = MinecraftForgeClient.getItemRenderer(itemstack, EQUIPPED_FIRST_PERSON);
+            
             if (itemstack.getItem().requiresMultipleRenderPasses())
             {
-                this.renderItem(entityclientplayermp, itemstack, 0);
-                int i1 = Item.itemsList[itemstack.itemID].getColorFromItemStack(itemstack, 1);
-                f10 = (float)(i1 >> 16 & 255) / 255.0F;
-                f11 = (float)(i1 >> 8 & 255) / 255.0F;
-                f12 = (float)(i1 & 255) / 255.0F;
-                GL11.glColor4f(f3 * f10, f3 * f11, f3 * f12, 1.0F);
-                this.renderItem(entityclientplayermp, itemstack, 1);
+                this.renderItem(entityclientplayermp, itemstack, 0, customRenderer, EQUIPPED_FIRST_PERSON);
+                for (int x = 1; x < itemstack.getItem().getRenderPasses(itemstack.getItemDamage()); x++)
+                {
+                    int i1 = Item.itemsList[itemstack.itemID].getColorFromItemStack(itemstack, x);
+                    f10 = (float)(i1 >> 16 & 255) / 255.0F;
+                    f11 = (float)(i1 >> 8 & 255) / 255.0F;
+                    f12 = (float)(i1 & 255) / 255.0F;
+                    GL11.glColor4f(f3 * f10, f3 * f11, f3 * f12, 1.0F);
+                    this.renderItem(entityclientplayermp, itemstack, x, customRenderer, EQUIPPED_FIRST_PERSON);
+                }
             }
             else
             {
-                this.renderItem(entityclientplayermp, itemstack, 0);
+                this.renderItem(entityclientplayermp, itemstack, 0, customRenderer, EQUIPPED_FIRST_PERSON);
             }
 
             GL11.glPopMatrix();
