--- a/net/minecraft/client/renderer/ItemBlockRenderTypes.java
+++ b/net/minecraft/client/renderer/ItemBlockRenderTypes.java
@@ -18,7 +_,8 @@
 import net.minecraftforge.api.distmarker.OnlyIn;
 
 @OnlyIn(Dist.CLIENT)
-public class ItemBlockRenderTypes {
+public class ItemBlockRenderTypes extends net.minecraftforge.client.extensions.ForgeItemBlockRenderTypes {
+   @Deprecated
    private static final Map<Block, RenderType> f_109275_ = Util.m_137469_(Maps.newHashMap(), (p_109296_) -> {
       RenderType rendertype = RenderType.m_110503_();
       p_109296_.put(Blocks.f_50267_, rendertype);
@@ -296,6 +_,7 @@
       p_109296_.put(Blocks.f_152498_, rendertype3);
       p_109296_.put(Blocks.f_220862_, rendertype3);
    });
+   @Deprecated
    private static final Map<Fluid, RenderType> f_109276_ = Util.m_137469_(Maps.newHashMap(), (p_109290_) -> {
       RenderType rendertype = RenderType.m_110466_();
       p_109290_.put(Fluids.f_76192_, rendertype);
@@ -303,6 +_,7 @@
    });
    private static boolean f_109277_;
 
+   @Deprecated // FORGE: Use canRenderInLayer
    public static RenderType m_109282_(BlockState p_109283_) {
       Block block = p_109283_.m_60734_();
       if (block instanceof LeavesBlock) {
@@ -313,6 +_,7 @@
       }
    }
 
+   @Deprecated // FORGE: Use canRenderInLayer
    public static RenderType m_109293_(BlockState p_109294_) {
       Block block = p_109294_.m_60734_();
       if (block instanceof LeavesBlock) {
@@ -328,8 +_,7 @@
    }
 
    public static RenderType m_109284_(BlockState p_109285_, boolean p_109286_) {
-      RenderType rendertype = m_109282_(p_109285_);
-      if (rendertype == RenderType.m_110466_()) {
+      if (canRenderInLayer(p_109285_, RenderType.m_110466_())) {
          if (!Minecraft.m_91085_()) {
             return Sheets.m_110792_();
          } else {
@@ -350,10 +_,68 @@
       }
    }
 
+   @Deprecated // FORGE: Use canRenderInLayer
    public static RenderType m_109287_(FluidState p_109288_) {
       RenderType rendertype = f_109276_.get(p_109288_.m_76152_());
       return rendertype != null ? rendertype : RenderType.m_110451_();
    }
+
+   // FORGE START
+
+   public static boolean canRenderInLayer(BlockState state, RenderType type) {
+      Block block = state.m_60734_();
+      if (block instanceof LeavesBlock) {
+         return f_109277_ ? type == RenderType.m_110457_() : type == RenderType.m_110451_();
+      } else {
+         return getBlockLayerPredicates().get(net.minecraftforge.registries.ForgeRegistries.BLOCKS.getDelegateOrThrow(block)).test(type);
+      }
+   }
+
+   public static boolean canRenderInLayer(FluidState fluid, RenderType type) {
+      return getFluidLayerPredicates().get(net.minecraftforge.registries.ForgeRegistries.FLUIDS.getDelegateOrThrow(fluid.m_76152_())).test(type);
+   }
+
+   public static void setRenderLayer(Block block, RenderType type) {
+      java.util.Objects.requireNonNull(type);
+      setRenderLayer(block, t -> t == type);
+   }
+
+   public static void setRenderLayer(Block block, java.util.function.Predicate<RenderType> predicate) {
+      net.minecraftforge.client.extensions.ForgeItemBlockRenderTypes.setRenderLayer(block, predicate);
+   }
+
+   public static void setRenderLayer(Fluid fluid, RenderType type) {
+      java.util.Objects.requireNonNull(type);
+      setRenderLayer(fluid, t -> t == type);
+   }
+
+   public static void setRenderLayer(Fluid fluid, java.util.function.Predicate<RenderType> predicate) {
+      net.minecraftforge.client.extensions.ForgeItemBlockRenderTypes.setRenderLayer(fluid, predicate);
+   }
+
+   /**
+    * Returns an unmodifiable view of the current block -> render type predicate map.
+    * The returned view should not be cached, as its backing map will become outdated as soon as
+    * something registers a new render type predicate
+    */
+   public static Map<net.minecraft.core.Holder.Reference<Block>, java.util.function.Predicate<RenderType>> getBlockLayerPredicatesView() {
+      return java.util.Collections.unmodifiableMap(getBlockLayerPredicates());
+   }
+
+   /**
+    * Returns an unmodifiable view of the current fluid -> render type predicate map.
+    * The returned view should not be cached, as its backing map will become outdated as soon as
+    * something registers a new render type predicate
+    */
+   public static Map<net.minecraft.core.Holder.Reference<Fluid>, java.util.function.Predicate<RenderType>> getFluidLayerPredicatesView() {
+      return java.util.Collections.unmodifiableMap(getFluidLayerPredicates());
+   }
+
+   static {
+      net.minecraftforge.client.extensions.ForgeItemBlockRenderTypes.initFromVanillaMaps(f_109275_, f_109276_);
+   }
+
+   // FORGE END
 
    public static void m_109291_(boolean p_109292_) {
       f_109277_ = p_109292_;
