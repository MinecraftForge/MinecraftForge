--- a/net/minecraft/client/renderer/ItemBlockRenderTypes.java
+++ b/net/minecraft/client/renderer/ItemBlockRenderTypes.java
@@ -19,6 +_,7 @@
 
 @OnlyIn(Dist.CLIENT)
 public class ItemBlockRenderTypes {
+   @Deprecated
    private static final Map<Block, RenderType> f_109275_ = Util.m_137469_(Maps.newHashMap(), (p_109296_) -> {
       RenderType rendertype = RenderType.m_110503_();
       p_109296_.put(Blocks.f_50267_, rendertype);
@@ -296,6 +_,7 @@
       p_109296_.put(Blocks.f_152498_, rendertype3);
       p_109296_.put(Blocks.f_220862_, rendertype3);
    });
+   @Deprecated
    private static final Map<Fluid, RenderType> f_109276_ = Util.m_137469_(Maps.newHashMap(), (p_109290_) -> {
       RenderType rendertype = RenderType.m_110466_();
       p_109290_.put(Fluids.f_76192_, rendertype);
@@ -303,6 +_,7 @@
    });
    private static boolean f_109277_;
 
+   @Deprecated // FORGE: Use canRenderInLayer
    public static RenderType m_109282_(BlockState p_109283_) {
       Block block = p_109283_.m_60734_();
       if (block instanceof LeavesBlock) {
@@ -313,6 +_,7 @@
       }
    }
 
+   @Deprecated // FORGE: Use canRenderInLayer
    public static RenderType m_109293_(BlockState p_109294_) {
       Block block = p_109294_.m_60734_();
       if (block instanceof LeavesBlock) {
@@ -328,8 +_,7 @@
    }
 
    public static RenderType m_109284_(BlockState p_109285_, boolean p_109286_) {
-      RenderType rendertype = m_109282_(p_109285_);
-      if (rendertype == RenderType.m_110466_()) {
+      if (canRenderInLayer(p_109285_, RenderType.m_110466_())) {
          if (!Minecraft.m_91085_()) {
             return Sheets.m_110792_();
          } else {
@@ -350,9 +_,68 @@
       }
    }
 
+   @Deprecated // FORGE: Use canRenderInLayer
    public static RenderType m_109287_(FluidState p_109288_) {
       RenderType rendertype = f_109276_.get(p_109288_.m_76152_());
       return rendertype != null ? rendertype : RenderType.m_110451_();
+   }
+
+   // FORGE START
+
+   private static final java.util.function.Predicate<RenderType> SOLID_PREDICATE = type -> type == RenderType.m_110451_();
+   private static final Map<net.minecraft.core.Holder.Reference<Block>, java.util.function.Predicate<RenderType>> blockRenderChecks = createRenderCheckMap(net.minecraftforge.registries.ForgeRegistries.BLOCKS, f_109275_);
+   private static final Map<net.minecraft.core.Holder.Reference<Fluid>, java.util.function.Predicate<RenderType>> fluidRenderChecks = createRenderCheckMap(net.minecraftforge.registries.ForgeRegistries.FLUIDS, f_109276_);
+
+   private static <T> Map<net.minecraft.core.Holder.Reference<T>, java.util.function.Predicate<RenderType>> createRenderCheckMap(net.minecraftforge.registries.IForgeRegistry<T> registry, Map<T, RenderType> vanillaMap) {
+      return Util.m_137469_(new it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<>(vanillaMap.size(), 0.5F), map -> {
+         map.defaultReturnValue(SOLID_PREDICATE);
+         for(Map.Entry<T, RenderType> entry : vanillaMap.entrySet()) {
+            map.put(registry.getDelegateOrThrow(entry.getKey()), createMatchingLayerPredicate(entry.getValue()));
+         }
+      });
+   }
+
+   public static boolean canRenderInLayer(BlockState state, RenderType type) {
+      Block block = state.m_60734_();
+      if (block instanceof LeavesBlock) {
+         return f_109277_ ? type == RenderType.m_110457_() : type == RenderType.m_110451_();
+      } else {
+         return blockRenderChecks.get(net.minecraftforge.registries.ForgeRegistries.BLOCKS.getDelegateOrThrow(block)).test(type);
+      }
+   }
+
+   public static boolean canRenderInLayer(FluidState fluid, RenderType type) {
+      return fluidRenderChecks.get(net.minecraftforge.registries.ForgeRegistries.FLUIDS.getDelegateOrThrow(fluid.m_76152_())).test(type);
+   }
+
+   public static void setRenderLayer(Block block, RenderType type) {
+      setRenderLayer(block, createMatchingLayerPredicate(type));
+   }
+
+   public static synchronized void setRenderLayer(Block block, java.util.function.Predicate<RenderType> predicate) {
+      checkClientLoading();
+      blockRenderChecks.put(net.minecraftforge.registries.ForgeRegistries.BLOCKS.getDelegateOrThrow(block), predicate);
+   }
+
+   public static void setRenderLayer(Fluid fluid, RenderType type) {
+      setRenderLayer(fluid, createMatchingLayerPredicate(type));
+   }
+
+   public static synchronized void setRenderLayer(Fluid fluid, java.util.function.Predicate<RenderType> predicate) {
+      checkClientLoading();
+      fluidRenderChecks.put(net.minecraftforge.registries.ForgeRegistries.FLUIDS.getDelegateOrThrow(fluid), predicate);
+   }
+
+   private static void checkClientLoading() {
+      com.google.common.base.Preconditions.checkState(net.minecraftforge.client.loading.ClientModLoader.isLoading(),
+              "Render layers can only be set during client loading! " +
+                      "This might ideally be done from `FMLClientSetupEvent`."
+      );
+   }
+
+   private static java.util.function.Predicate<RenderType> createMatchingLayerPredicate(RenderType type) {
+      java.util.Objects.requireNonNull(type);
+      return type::equals;
    }
 
    public static void m_109291_(boolean p_109292_) {
