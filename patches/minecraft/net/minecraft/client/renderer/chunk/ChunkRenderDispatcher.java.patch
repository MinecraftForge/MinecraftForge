--- a/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
+++ b/net/minecraft/client/renderer/chunk/ChunkRenderDispatcher.java
@@ -70,12 +_,15 @@
    private Vec3 f_112683_ = Vec3.f_82478_;
 
    public ChunkRenderDispatcher(Level p_112686_, LevelRenderer p_112687_, Executor p_112688_, boolean p_112689_, ChunkBufferBuilderPack p_112690_) {
+      this(p_112686_, p_112687_, p_112688_, p_112689_, p_112690_, -1);
+   }
+   public ChunkRenderDispatcher(Level p_112686_, LevelRenderer p_112687_, Executor p_112688_, boolean p_112689_, ChunkBufferBuilderPack p_112690_, int countRenderBuilders) {
       this.f_112681_ = p_112686_;
       this.f_112682_ = p_112687_;
       int i = Math.max(1, (int)((double)Runtime.getRuntime().maxMemory() * 0.3D) / (RenderType.m_110506_().stream().mapToInt(RenderType::m_110507_).sum() * 4) - 1);
       int j = Runtime.getRuntime().availableProcessors();
       int k = p_112689_ ? j : Math.min(j, 4);
-      int l = Math.max(1, Math.min(k, i));
+      int l = countRenderBuilders < 0 ? Math.max(1, Math.min(k, i)) : countRenderBuilders;
       this.f_112678_ = p_112690_;
       List<ChunkBufferBuilderPack> list = Lists.newArrayListWithExpectedSize(l);
 
@@ -258,7 +_,7 @@
    }
 
    @OnlyIn(Dist.CLIENT)
-   public class RenderChunk {
+   public class RenderChunk implements net.minecraftforge.client.extensions.IForgeRenderChunk {
       public static final int f_173716_ = 16;
       public final int f_173717_;
       public final AtomicReference<ChunkRenderDispatcher.CompiledChunk> f_112784_ = new AtomicReference<>(ChunkRenderDispatcher.CompiledChunk.f_112748_);
@@ -390,7 +_,7 @@
          if (!chunkrenderdispatcher$compiledchunk.f_112750_.contains(p_112810_)) {
             return false;
          } else {
-            this.f_112788_ = new ChunkRenderDispatcher.RenderChunk.ResortTransparencyTask(this.m_112832_(), chunkrenderdispatcher$compiledchunk);
+            this.f_112788_ = new ChunkRenderDispatcher.RenderChunk.ResortTransparencyTask(new net.minecraft.world.level.ChunkPos(m_112839_()), this.m_112832_(), chunkrenderdispatcher$compiledchunk);
             p_112811_.m_112709_(this.f_112788_);
             return true;
          }
@@ -413,8 +_,8 @@
          this.m_112843_();
          BlockPos blockpos = this.f_112793_.m_7949_();
          int i = 1;
-         RenderChunkRegion renderchunkregion = RenderChunkRegion.m_112920_(ChunkRenderDispatcher.this.f_112681_, blockpos.m_142082_(-1, -1, -1), blockpos.m_142082_(16, 16, 16), 1);
-         this.f_112787_ = new ChunkRenderDispatcher.RenderChunk.RebuildTask(this.m_112832_(), renderchunkregion);
+         RenderChunkRegion renderchunkregion = createRegionRenderCache(ChunkRenderDispatcher.this.f_112681_, blockpos.m_142082_(-1, -1, -1), blockpos.m_142082_(16, 16, 16), 1);
+         this.f_112787_ = new ChunkRenderDispatcher.RenderChunk.RebuildTask(new net.minecraft.world.level.ChunkPos(m_112839_()), this.m_112832_(), renderchunkregion);
          return this.f_112787_;
       }
 
@@ -442,9 +_,19 @@
       abstract class ChunkCompileTask implements Comparable<ChunkRenderDispatcher.RenderChunk.ChunkCompileTask> {
          protected final double f_112847_;
          protected final AtomicBoolean f_112848_ = new AtomicBoolean(false);
+         protected java.util.Map<net.minecraft.core.BlockPos, net.minecraftforge.client.model.data.IModelData> modelData;
 
          public ChunkCompileTask(double p_112852_) {
+            this(null, p_112852_);
+         }
+
+         public ChunkCompileTask(@Nullable net.minecraft.world.level.ChunkPos pos, double p_112852_) {
             this.f_112847_ = p_112852_;
+            if (pos == null) {
+               this.modelData = java.util.Collections.emptyMap();
+            } else {
+               this.modelData = net.minecraftforge.client.model.ModelDataManager.getModelData(net.minecraft.client.Minecraft.m_91087_().f_91073_, pos);
+            }
          }
 
          public abstract CompletableFuture<ChunkRenderDispatcher.ChunkTaskResult> m_5869_(ChunkBufferBuilderPack p_112853_);
@@ -454,6 +_,10 @@
          public int compareTo(ChunkRenderDispatcher.RenderChunk.ChunkCompileTask p_112855_) {
             return Doubles.compare(this.f_112847_, p_112855_.f_112847_);
          }
+
+         public net.minecraftforge.client.model.data.IModelData getModelData(net.minecraft.core.BlockPos pos) {
+            return modelData.getOrDefault(pos, net.minecraftforge.client.model.data.EmptyModelData.INSTANCE);
+         }
       }
 
       @OnlyIn(Dist.CLIENT)
@@ -461,8 +_,13 @@
          @Nullable
          protected RenderChunkRegion f_112858_;
 
+         @Deprecated
          public RebuildTask(@Nullable double p_112862_, RenderChunkRegion p_112863_) {
-            super(p_112862_);
+            this(null, p_112862_, p_112863_);
+         }
+
+         public RebuildTask(@Nullable net.minecraft.world.level.ChunkPos pos, double p_112862_, @Nullable RenderChunkRegion p_112863_) {
+            super(pos, p_112862_);
             this.f_112858_ = p_112863_;
          }
 
@@ -535,8 +_,10 @@
                   }
 
                   FluidState fluidstate = renderchunkregion.m_6425_(blockpos2);
-                  if (!fluidstate.m_76178_()) {
-                     RenderType rendertype = ItemBlockRenderTypes.m_109287_(fluidstate);
+                  net.minecraftforge.client.model.data.IModelData modelData = getModelData(blockpos2);
+                  for (RenderType rendertype : RenderType.m_110506_()) {
+                     net.minecraftforge.client.ForgeHooksClient.setRenderLayer(rendertype);
+                  if (!fluidstate.m_76178_() && ItemBlockRenderTypes.canRenderInLayer(fluidstate, rendertype)) {
                      BufferBuilder bufferbuilder = p_112870_.m_108839_(rendertype);
                      if (p_112869_.f_112750_.add(rendertype)) {
                         RenderChunk.this.m_112805_(bufferbuilder);
@@ -548,8 +_,8 @@
                      }
                   }
 
-                  if (blockstate.m_60799_() != RenderShape.INVISIBLE) {
-                     RenderType rendertype1 = ItemBlockRenderTypes.m_109282_(blockstate);
+                  if (blockstate.m_60799_() != RenderShape.INVISIBLE && ItemBlockRenderTypes.canRenderInLayer(blockstate, rendertype)) {
+                     RenderType rendertype1 = rendertype;
                      BufferBuilder bufferbuilder2 = p_112870_.m_108839_(rendertype1);
                      if (p_112869_.f_112750_.add(rendertype1)) {
                         RenderChunk.this.m_112805_(bufferbuilder2);
@@ -557,14 +_,16 @@
 
                      posestack.m_85836_();
                      posestack.m_85837_((double)(blockpos2.m_123341_() & 15), (double)(blockpos2.m_123342_() & 15), (double)(blockpos2.m_123343_() & 15));
-                     if (blockrenderdispatcher.m_110924_(blockstate, blockpos2, renderchunkregion, posestack, bufferbuilder2, true, random)) {
+                     if (blockrenderdispatcher.renderBatched(blockstate, blockpos2, renderchunkregion, posestack, bufferbuilder2, true, random, modelData)) {
                         p_112869_.f_112751_ = false;
                         p_112869_.f_112749_.add(rendertype1);
                      }
 
                      posestack.m_85849_();
                   }
+                  }
                }
+               net.minecraftforge.client.ForgeHooksClient.setRenderLayer(null);
 
                if (p_112869_.f_112749_.contains(RenderType.m_110466_())) {
                   BufferBuilder bufferbuilder1 = p_112870_.m_108839_(RenderType.m_110466_());
@@ -583,10 +_,10 @@
          private <E extends BlockEntity> void m_112877_(ChunkRenderDispatcher.CompiledChunk p_112878_, Set<BlockEntity> p_112879_, E p_112880_) {
             BlockEntityRenderer<E> blockentityrenderer = Minecraft.m_91087_().m_167982_().m_112265_(p_112880_);
             if (blockentityrenderer != null) {
-               p_112878_.f_112752_.add(p_112880_);
                if (blockentityrenderer.m_5932_(p_112880_)) {
                   p_112879_.add(p_112880_);
                }
+               else p_112878_.f_112752_.add(p_112880_); //FORGE: Fix MC-112730
             }
 
          }
@@ -604,8 +_,13 @@
       class ResortTransparencyTask extends ChunkRenderDispatcher.RenderChunk.ChunkCompileTask {
          private final ChunkRenderDispatcher.CompiledChunk f_112886_;
 
+         @Deprecated
          public ResortTransparencyTask(double p_112889_, ChunkRenderDispatcher.CompiledChunk p_112890_) {
-            super(p_112889_);
+            this(null, p_112889_, p_112890_);
+         }
+
+         public ResortTransparencyTask(@Nullable net.minecraft.world.level.ChunkPos pos, double p_112889_, ChunkRenderDispatcher.CompiledChunk p_112890_) {
+            super(pos, p_112889_);
             this.f_112886_ = p_112890_;
          }
 
