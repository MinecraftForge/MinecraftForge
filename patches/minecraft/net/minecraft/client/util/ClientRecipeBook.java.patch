--- a/net/minecraft/client/util/ClientRecipeBook.java
+++ b/net/minecraft/client/util/ClientRecipeBook.java
@@ -27,7 +27,7 @@
 @OnlyIn(Dist.CLIENT)
 public class ClientRecipeBook extends RecipeBook {
    private final RecipeManager field_199645_e;
-   private final Map<RecipeBookCategories, List<RecipeList>> field_197931_e = Maps.newHashMap();
+   @Deprecated private final Map<RecipeBookCategories, List<RecipeList>> field_197931_e = Maps.newHashMap(); // use forgeRecipeBookCategories instead
    private final List<RecipeList> field_197932_f = Lists.newArrayList();
 
    public ClientRecipeBook(RecipeManager p_i48186_1_) {
@@ -36,7 +36,7 @@
 
    public void func_199644_c() {
       this.field_197932_f.clear();
-      this.field_197931_e.clear();
+      this.forgeRecipeBookCategories.clear();
       Table<RecipeBookCategories, String, RecipeList> table = HashBasedTable.create();
 
       for(IRecipe<?> irecipe : this.field_199645_e.func_199510_b()) {
@@ -45,11 +45,11 @@
             String s = irecipe.func_193358_e();
             RecipeList recipelist;
             if (s.isEmpty()) {
-               recipelist = this.func_202889_b(recipebookcategories);
+               recipelist = this.newRecipeList(irecipe);
             } else {
                recipelist = table.get(recipebookcategories, s);
                if (recipelist == null) {
-                  recipelist = this.func_202889_b(recipebookcategories);
+                  recipelist = this.newRecipeList(irecipe);
                   table.put(recipebookcategories, s, recipelist);
                }
             }
@@ -60,6 +60,7 @@
 
    }
 
+   @Deprecated // use newRecipeList(IForgeRecipeBookCategory) instead
    private RecipeList func_202889_b(RecipeBookCategories p_202889_1_) {
       RecipeList recipelist = new RecipeList();
       this.field_197932_f.add(recipelist);
@@ -88,7 +89,7 @@
    }
 
    private void func_216767_a(RecipeBookCategories p_216767_1_, RecipeList p_216767_2_) {
-      this.field_197931_e.computeIfAbsent(p_216767_1_, (p_216768_0_) -> {
+      this.forgeRecipeBookCategories.computeIfAbsent(p_216767_1_, (p_216768_0_) -> {
          return Lists.newArrayList();
       }).add(p_216767_2_);
    }
@@ -122,6 +123,7 @@
       }
    }
 
+   @Deprecated // use RecipeBookContainer.getRecipeBookCategories() instead
    public static List<RecipeBookCategories> func_216769_b(RecipeBookContainer<?> p_216769_0_) {
       if (!(p_216769_0_ instanceof WorkbenchContainer) && !(p_216769_0_ instanceof PlayerContainer)) {
          if (p_216769_0_ instanceof FurnaceContainer) {
@@ -140,7 +142,29 @@
       return this.field_197932_f;
    }
 
+   @Deprecated
    public List<RecipeList> func_202891_a(RecipeBookCategories p_202891_1_) {
       return this.field_197931_e.getOrDefault(p_202891_1_, Collections.emptyList());
    }
+
+   /*================================ FORGE START ================================================*/
+   private final Map<net.minecraftforge.common.extensions.IForgeRecipeBookCategory<?>, List<RecipeList>> forgeRecipeBookCategories = Maps.newHashMap();
+
+   private RecipeList newRecipeList(IRecipe<?> recipe) {
+      RecipeList recipelist = new RecipeList();
+      this.field_197932_f.add(recipelist);
+      net.minecraftforge.common.ForgeRecipeBookCategory.getValidCategories(recipe).forEach(category -> addToForgeRecipeBookCategories(category, recipelist));
+      return recipelist;
+   }
+
+   private void addToForgeRecipeBookCategories(net.minecraftforge.common.extensions.IForgeRecipeBookCategory<?> forgeRecipeBookCategory, RecipeList recipeList) {
+      this.forgeRecipeBookCategories.computeIfAbsent(forgeRecipeBookCategory, (category) -> {
+         return Lists.newArrayList();
+      }).add(recipeList);
+   }
+
+   public List<RecipeList> getRecipes(net.minecraftforge.common.extensions.IForgeRecipeBookCategory<?> forgeRecipeBookCategory) {
+      return this.forgeRecipeBookCategories.getOrDefault(forgeRecipeBookCategory, Collections.emptyList());
+   }
+   /*================================ FORGE END ================================================*/
 }
