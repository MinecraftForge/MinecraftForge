--- ../src_base/minecraft/net/minecraft/client/Minecraft.java
+++ ../src_work/minecraft/net/minecraft/client/Minecraft.java
@@ -117,6 +117,7 @@
 import net.minecraft.util.Session;
 import net.minecraft.util.Timer;
 import net.minecraft.util.Util;
+import net.minecraft.world.MinecraftException;
 import net.minecraft.world.WorldSettings;
 import net.minecraft.world.chunk.storage.AnvilSaveConverter;
 import net.minecraft.world.storage.ISaveFormat;
@@ -137,17 +138,26 @@
 
 import com.google.common.collect.MapDifference;
 
+import net.minecraftforge.client.ForgeHooksClient;
+import net.minecraftforge.client.GuiIngameForge;
+import net.minecraftforge.client.event.GuiOpenEvent;
+import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.ForgeEventFactory;
+import net.minecraftforge.event.entity.player.PlayerInteractEvent.Action;
+import net.minecraftforge.event.world.WorldEvent;
+
 @SideOnly(Side.CLIENT)
 public class Minecraft implements IPlayerUsage
 {
-    private static final ResourceLocation field_110444_H = new ResourceLocation("textures/gui/title/mojang.png");
-    public static final boolean field_142025_a = Util.func_110647_a() == EnumOS.MACOS;
+    private static final ResourceLocation locationMojangPng = new ResourceLocation("textures/gui/title/mojang.png");
+    public static final boolean isRunningOnMac = Util.getOSType() == EnumOS.MACOS;
 
     /** A 10MiB preallocation to ensure the heap is reasonably sized. */
     public static byte[] memoryReserve = new byte[10485760];
-    private static final List field_110445_I = Lists.newArrayList(new DisplayMode[] {new DisplayMode(2560, 1600), new DisplayMode(2880, 1800)});
-    private final ILogAgent field_94139_O;
-    private final File field_130070_K;
+    private static final List macDisplayModes = Lists.newArrayList(new DisplayMode[] {new DisplayMode(2560, 1600), new DisplayMode(2880, 1800)});
+    private final ILogAgent mcLogAgent;
+    private final File fileResourcepacks;
     private ServerData currentServerData;
 
     /** The RenderEngine instance used by Minecraft */
@@ -168,7 +178,7 @@
     private Timer timer = new Timer(20.0F);
 
     /** Instance of PlayerUsageSnooper. */
-    private PlayerUsageSnooper usageSnooper = new PlayerUsageSnooper("client", this, MinecraftServer.func_130071_aq());
+    private PlayerUsageSnooper usageSnooper = new PlayerUsageSnooper("client", this, MinecraftServer.getSystemTimeMillis());
     public WorldClient theWorld;
     public RenderGlobal renderGlobal;
     public EntityClientPlayerMP thePlayer;
@@ -223,9 +233,9 @@
     /** Mouse helper instance. */
     public MouseHelper mouseHelper;
     public final File mcDataDir;
-    private final File field_110446_Y;
-    private final String field_110447_Z;
-    private final Proxy field_110453_aa;
+    private final File fileAssets;
+    private final String launchedVersion;
+    private final Proxy proxy;
     private ISaveFormat saveLoader;
 
     /**
@@ -269,12 +279,12 @@
     /** The profiler instance */
     public final Profiler mcProfiler = new Profiler();
     private long field_83002_am = -1L;
-    private ReloadableResourceManager field_110451_am;
-    private final MetadataSerializer field_110452_an = new MetadataSerializer();
-    private List field_110449_ao = Lists.newArrayList();
-    private DefaultResourcePack field_110450_ap;
-    private ResourcePackRepository field_110448_aq;
-    private LanguageManager field_135017_as;
+    private ReloadableResourceManager mcResourceManager;
+    private final MetadataSerializer metadataSerializer_ = new MetadataSerializer();
+    private List defaultResourcePacks = Lists.newArrayList();
+    private DefaultResourcePack mcDefaultResourcePack;
+    private ResourcePackRepository mcResourcePackRepository;
+    private LanguageManager mcLanguageManager;
 
     /**
      * Set to true to keep the game loop running. Set to false by shutdown() to allow the game loop to exit cleanly.
@@ -297,18 +307,18 @@
     public Minecraft(Session par1Session, int par2, int par3, boolean par4, boolean par5, File par6File, File par7File, File par8File, Proxy par9Proxy, String par10Str)
     {
         theMinecraft = this;
-        this.field_94139_O = new LogAgent("Minecraft-Client", " [CLIENT]", (new File(par6File, "output-client.log")).getAbsolutePath());
+        this.mcLogAgent = new LogAgent("Minecraft-Client", " [CLIENT]", (new File(par6File, "output-client.log")).getAbsolutePath());
         this.mcDataDir = par6File;
-        this.field_110446_Y = par7File;
-        this.field_130070_K = par8File;
-        this.field_110447_Z = par10Str;
-        this.field_110450_ap = new DefaultResourcePack(this.field_110446_Y);
-        this.func_110435_P();
-        this.field_110453_aa = par9Proxy;
+        this.fileAssets = par7File;
+        this.fileResourcepacks = par8File;
+        this.launchedVersion = par10Str;
+        this.mcDefaultResourcePack = new DefaultResourcePack(this.fileAssets);
+        this.addDefaultResourcePack();
+        this.proxy = par9Proxy;
         this.startTimerHackThread();
         this.session = par1Session;
-        this.field_94139_O.logInfo("Setting user: " + par1Session.func_111285_a());
-        this.field_94139_O.logInfo("(Session ID is " + par1Session.func_111286_b() + ")");
+        this.mcLogAgent.logInfo("Setting user: " + par1Session.getUsername());
+        this.mcLogAgent.logInfo("(Session ID is " + par1Session.getSessionID() + ")");
         this.isDemo = par5;
         this.displayWidth = par2;
         this.displayHeight = par3;
@@ -402,11 +412,11 @@
         Display.setTitle("Minecraft 1.6.2");
         this.getLogAgent().logInfo("LWJGL Version: " + Sys.getVersion());
 
-        if (Util.func_110647_a() != EnumOS.MACOS)
+        if (Util.getOSType() != EnumOS.MACOS)
         {
             try
             {
-                Display.setIcon(new ByteBuffer[] {this.func_110439_b(new File(this.field_110446_Y, "/icons/icon_16x16.png")), this.func_110439_b(new File(this.field_110446_Y, "/icons/icon_32x32.png"))});
+                Display.setIcon(new ByteBuffer[] {this.readImage(new File(this.fileAssets, "/icons/icon_16x16.png")), this.readImage(new File(this.fileAssets, "/icons/icon_32x32.png"))});
             }
             catch (IOException ioexception)
             {
@@ -416,7 +426,7 @@
 
         try
         {
-            Display.create((new PixelFormat()).withDepthBits(24));
+            ForgeHooksClient.createDisplay();
         }
         catch (LWJGLException lwjglexception)
         {
@@ -433,7 +443,7 @@
 
             if (this.fullscreen)
             {
-                this.func_110441_Q();
+                this.updateDisplayMode();
             }
 
             Display.create();
@@ -441,37 +451,37 @@
 
         OpenGlHelper.initializeTextures();
         this.guiAchievement = new GuiAchievement(this);
-        this.field_110452_an.func_110504_a(new TextureMetadataSectionSerializer(), TextureMetadataSection.class);
-        this.field_110452_an.func_110504_a(new FontMetadataSectionSerializer(), FontMetadataSection.class);
-        this.field_110452_an.func_110504_a(new AnimationMetadataSectionSerializer(), AnimationMetadataSection.class);
-        this.field_110452_an.func_110504_a(new PackMetadataSectionSerializer(), PackMetadataSection.class);
-        this.field_110452_an.func_110504_a(new LanguageMetadataSectionSerializer(), LanguageMetadataSection.class);
+        this.metadataSerializer_.registerMetadataSectionType(new TextureMetadataSectionSerializer(), TextureMetadataSection.class);
+        this.metadataSerializer_.registerMetadataSectionType(new FontMetadataSectionSerializer(), FontMetadataSection.class);
+        this.metadataSerializer_.registerMetadataSectionType(new AnimationMetadataSectionSerializer(), AnimationMetadataSection.class);
+        this.metadataSerializer_.registerMetadataSectionType(new PackMetadataSectionSerializer(), PackMetadataSection.class);
+        this.metadataSerializer_.registerMetadataSectionType(new LanguageMetadataSectionSerializer(), LanguageMetadataSection.class);
         this.saveLoader = new AnvilSaveConverter(new File(this.mcDataDir, "saves"));
-        this.field_110448_aq = new ResourcePackRepository(this.field_130070_K, this.field_110450_ap, this.field_110452_an, this.gameSettings);
-        this.field_110451_am = new SimpleReloadableResourceManager(this.field_110452_an);
-        this.field_135017_as = new LanguageManager(this.field_110452_an, this.gameSettings.language);
-        this.field_110451_am.func_110542_a(this.field_135017_as);
-        this.func_110436_a();
-        this.renderEngine = new TextureManager(this.field_110451_am);
-        this.field_110451_am.func_110542_a(this.renderEngine);
-        this.sndManager = new SoundManager(this.field_110451_am, this.gameSettings, this.field_110446_Y);
-        this.field_110451_am.func_110542_a(this.sndManager);
+        this.mcResourcePackRepository = new ResourcePackRepository(this.fileResourcepacks, this.mcDefaultResourcePack, this.metadataSerializer_, this.gameSettings);
+        this.mcResourceManager = new SimpleReloadableResourceManager(this.metadataSerializer_);
+        this.mcLanguageManager = new LanguageManager(this.metadataSerializer_, this.gameSettings.language);
+        this.mcResourceManager.registerReloadListener(this.mcLanguageManager);
+        this.refreshResources();
+        this.renderEngine = new TextureManager(this.mcResourceManager);
+        this.mcResourceManager.registerReloadListener(this.renderEngine);
+        this.sndManager = new SoundManager(this.mcResourceManager, this.gameSettings, this.fileAssets);
+        this.mcResourceManager.registerReloadListener(this.sndManager);
         this.loadScreen();
         this.fontRenderer = new FontRenderer(this.gameSettings, new ResourceLocation("textures/font/ascii.png"), this.renderEngine, false);
 
-        FMLClientHandler.instance().beginMinecraftLoading(this, this.field_110449_ao, this.field_110451_am);
+        FMLClientHandler.instance().beginMinecraftLoading(this, this.defaultResourcePacks, this.mcResourceManager);
 
         if (this.gameSettings.language != null)
         {
-            this.fontRenderer.setUnicodeFlag(this.field_135017_as.func_135042_a());
-            this.fontRenderer.setBidiFlag(this.field_135017_as.func_135044_b());
+            this.fontRenderer.setUnicodeFlag(this.mcLanguageManager.isCurrentLocaleUnicode());
+            this.fontRenderer.setBidiFlag(this.mcLanguageManager.isCurrentLanguageBidirectional());
         }
 
         this.standardGalacticFontRenderer = new FontRenderer(this.gameSettings, new ResourceLocation("textures/font/ascii_sga.png"), this.renderEngine, false);
-        this.field_110451_am.func_110542_a(this.fontRenderer);
-        this.field_110451_am.func_110542_a(this.standardGalacticFontRenderer);
-        this.field_110451_am.func_110542_a(new GrassColorReloadListener());
-        this.field_110451_am.func_110542_a(new FoliageColorReloadListener());
+        this.mcResourceManager.registerReloadListener(this.fontRenderer);
+        this.mcResourceManager.registerReloadListener(this.standardGalacticFontRenderer);
+        this.mcResourceManager.registerReloadListener(new GrassColorReloadListener());
+        this.mcResourceManager.registerReloadListener(new FoliageColorReloadListener());
         RenderManager.instance.itemRenderer = new ItemRenderer(this);
         this.entityRenderer = new EntityRenderer(this);
         this.statFileWriter = new StatFileWriter(this.session, this.mcDataDir);
@@ -491,13 +501,13 @@
         GL11.glMatrixMode(GL11.GL_MODELVIEW);
         this.checkGLError("Startup");
         this.renderGlobal = new RenderGlobal(this);
-        this.renderEngine.func_130088_a(TextureMap.field_110575_b, new TextureMap(0, "textures/blocks"));
-        this.renderEngine.func_130088_a(TextureMap.field_110576_c, new TextureMap(1, "textures/items"));
+        this.renderEngine.loadTextureMap(TextureMap.locationBlocksTexture, new TextureMap(0, "textures/blocks"));
+        this.renderEngine.loadTextureMap(TextureMap.locationItemsTexture, new TextureMap(1, "textures/items"));
         GL11.glViewport(0, 0, this.displayWidth, this.displayHeight);
         this.effectRenderer = new EffectRenderer(this.theWorld, this.renderEngine);
         FMLClientHandler.instance().finishMinecraftLoading();
         this.checkGLError("Post startup");
-        this.ingameGUI = new GuiIngame(this);
+        this.ingameGUI = new GuiIngameForge(this);
 
         if (this.serverName != null)
         {
@@ -517,19 +527,19 @@
         FMLClientHandler.instance().onInitializationComplete();
     }
 
-    public void func_110436_a()
-    {
-        ArrayList arraylist = Lists.newArrayList(this.field_110449_ao);
-        Iterator iterator = this.field_110448_aq.func_110613_c().iterator();
+    public void refreshResources()
+    {
+        ArrayList arraylist = Lists.newArrayList(this.defaultResourcePacks);
+        Iterator iterator = this.mcResourcePackRepository.getRepositoryEntries().iterator();
 
         while (iterator.hasNext())
         {
             ResourcePackRepositoryEntry resourcepackrepositoryentry = (ResourcePackRepositoryEntry)iterator.next();
-            arraylist.add(resourcepackrepositoryentry.func_110514_c());
-        }
-
-        this.field_135017_as.func_135043_a(arraylist);
-        this.field_110451_am.func_110541_a(arraylist);
+            arraylist.add(resourcepackrepositoryentry.getResourcePack());
+        }
+
+        this.mcLanguageManager.parseLanguageMetadata(arraylist);
+        this.mcResourceManager.reloadResources(arraylist);
 
         if (this.renderGlobal != null)
         {
@@ -537,12 +547,12 @@
         }
     }
 
-    private void func_110435_P()
-    {
-        this.field_110449_ao.add(this.field_110450_ap);
-    }
-
-    private ByteBuffer func_110439_b(File par1File) throws IOException
+    private void addDefaultResourcePack()
+    {
+        this.defaultResourcePacks.add(this.mcDefaultResourcePack);
+    }
+
+    private ByteBuffer readImage(File par1File) throws IOException
     {
         BufferedImage bufferedimage = ImageIO.read(par1File);
         int[] aint = bufferedimage.getRGB(0, 0, bufferedimage.getWidth(), bufferedimage.getHeight(), (int[])null, 0, bufferedimage.getWidth());
@@ -560,15 +570,15 @@
         return bytebuffer;
     }
 
-    private void func_110441_Q() throws LWJGLException
+    private void updateDisplayMode() throws LWJGLException
     {
         HashSet hashset = new HashSet();
         Collections.addAll(hashset, Display.getAvailableDisplayModes());
         DisplayMode displaymode = Display.getDesktopDisplayMode();
 
-        if (!hashset.contains(displaymode) && Util.func_110647_a() == EnumOS.MACOS)
-        {
-            Iterator iterator = field_110445_I.iterator();
+        if (!hashset.contains(displaymode) && Util.getOSType() == EnumOS.MACOS)
+        {
+            Iterator iterator = macDisplayModes.iterator();
 
             while (iterator.hasNext())
             {
@@ -629,7 +639,7 @@
         GL11.glDisable(GL11.GL_LIGHTING);
         GL11.glEnable(GL11.GL_TEXTURE_2D);
         GL11.glDisable(GL11.GL_FOG);
-        this.renderEngine.func_110577_a(field_110444_H);
+        this.renderEngine.bindTexture(locationMojangPng);
         Tessellator tessellator = Tessellator.instance;
         tessellator.startDrawingQuads();
         tessellator.setColorOpaque_I(16777215);
@@ -679,20 +689,29 @@
      */
     public void displayGuiScreen(GuiScreen par1GuiScreen)
     {
-        if (this.currentScreen != null)
-        {
-            this.currentScreen.onGuiClosed();
-        }
-
         this.statFileWriter.syncStats();
 
         if (par1GuiScreen == null && this.theWorld == null)
         {
             par1GuiScreen = new GuiMainMenu();
         }
-        else if (par1GuiScreen == null && this.thePlayer.func_110143_aJ() <= 0.0F)
+        else if (par1GuiScreen == null && this.thePlayer.getHealth() <= 0.0F)
         {
             par1GuiScreen = new GuiGameOver();
+        }
+
+        GuiScreen old = this.currentScreen;
+        GuiOpenEvent event = new GuiOpenEvent(par1GuiScreen);
+        
+        if (MinecraftForge.EVENT_BUS.post(event))
+        {
+            return;
+        }
+
+        par1GuiScreen = event.gui;
+        if (old != null && par1GuiScreen != old)
+        {
+            old.onGuiClosed();
         }
 
         if (par1GuiScreen instanceof GuiMainMenu)
@@ -763,7 +782,7 @@
                 ;
             }
 
-            this.sndManager.closeMinecraft();
+            this.sndManager.cleanup();
         }
         finally
         {
@@ -778,7 +797,7 @@
         System.gc();
     }
 
-    public void func_99999_d()
+    public void run()
     {
         this.running = true;
         CrashReport crashreport;
@@ -810,7 +829,7 @@
                     if (this.refreshTexturePacksScheduled)
                     {
                         this.refreshTexturePacksScheduled = false;
-                        this.func_110436_a();
+                        this.refreshResources();
                     }
 
                     try
@@ -1008,13 +1027,13 @@
 
         this.mcProfiler.endSection();
 
-        if (this.func_90020_K() > 0)
-        {
-            Display.sync(EntityRenderer.performanceToFps(this.func_90020_K()));
-        }
-    }
-
-    private int func_90020_K()
+        if (this.getLimitFramerate() > 0)
+        {
+            Display.sync(EntityRenderer.performanceToFps(this.getLimitFramerate()));
+        }
+    }
+
+    private int getLimitFramerate()
     {
         return this.currentScreen != null && this.currentScreen instanceof GuiMainMenu ? 2 : this.gameSettings.limitFramerate;
     }
@@ -1300,7 +1319,7 @@
 
                 if (this.thePlayer.isCurrentToolAdventureModeExempt(j, k, l))
                 {
-                    this.effectRenderer.addBlockHitEffects(j, k, l, this.objectMouseOver.sideHit);
+                    this.effectRenderer.addBlockHitEffects(j, k, l, this.objectMouseOver);
                     this.thePlayer.swingItem();
                 }
             }
@@ -1366,7 +1385,8 @@
                 {
                     int j1 = itemstack != null ? itemstack.stackSize : 0;
 
-                    if (this.playerController.onPlayerRightClick(this.thePlayer, this.theWorld, itemstack, j, k, l, i1, this.objectMouseOver.hitVec))
+                    boolean result = !ForgeEventFactory.onPlayerInteract(thePlayer, Action.RIGHT_CLICK_BLOCK, j, k, l, i1).isCanceled();
+                    if (result && this.playerController.onPlayerRightClick(this.thePlayer, this.theWorld, itemstack, j, k, l, i1, this.objectMouseOver.hitVec))
                     {
                         flag = false;
                         this.thePlayer.swingItem();
@@ -1392,7 +1412,8 @@
             {
                 ItemStack itemstack1 = this.thePlayer.inventory.getCurrentItem();
 
-                if (itemstack1 != null && this.playerController.sendUseItem(this.thePlayer, this.theWorld, itemstack1))
+                boolean result = !ForgeEventFactory.onPlayerInteract(thePlayer, Action.RIGHT_CLICK_AIR, 0, 0, 0, -1).isCanceled();
+                if (result && itemstack1 != null && this.playerController.sendUseItem(this.thePlayer, this.theWorld, itemstack1))
                 {
                     this.entityRenderer.itemRenderer.resetEquippedProgress2();
                 }
@@ -1411,7 +1432,7 @@
 
             if (this.fullscreen)
             {
-                this.func_110441_Q();
+                this.updateDisplayMode();
                 this.displayWidth = Display.getDisplayMode().getWidth();
                 this.displayHeight = Display.getDisplayMode().getHeight();
 
@@ -1510,12 +1531,12 @@
 
         if (!this.isGamePaused)
         {
-            this.renderEngine.func_110550_d();
+            this.renderEngine.tick();
         }
 
         if (this.currentScreen == null && this.thePlayer != null)
         {
-            if (this.thePlayer.func_110143_aJ() <= 0.0F)
+            if (this.thePlayer.getHealth() <= 0.0F)
             {
                 this.displayGuiScreen((GuiScreen)null);
             }
@@ -1574,9 +1595,11 @@
 
             while (Mouse.next())
             {
+                if (ForgeHooksClient.postMouseEvent()) continue;
+
                 i = Mouse.getEventButton();
 
-                if (field_142025_a && i == 0 && (Keyboard.isKeyDown(29) || Keyboard.isKeyDown(157)))
+                if (isRunningOnMac && i == 0 && (Keyboard.isKeyDown(29) || Keyboard.isKeyDown(157)))
                 {
                     i = 1;
                 }
@@ -1683,12 +1706,12 @@
 
                             if (Keyboard.getEventKey() == 31 && Keyboard.isKeyDown(61))
                             {
-                                this.func_110436_a();
+                                this.refreshResources();
                             }
 
                             if (Keyboard.getEventKey() == 20 && Keyboard.isKeyDown(61))
                             {
-                                this.func_110436_a();
+                                this.refreshResources();
                             }
 
                             if (Keyboard.getEventKey() == 33 && Keyboard.isKeyDown(61))
@@ -1993,7 +2016,7 @@
     public void continueWorldLoading()
     {
         this.integratedServerIsRunning = true;
-        this.loadingScreen.displayProgressMessage(I18n.func_135053_a("menu.loadingLevel"));
+        this.loadingScreen.displayProgressMessage(I18n.getString("menu.loadingLevel"));
 
         while (!this.theIntegratedServer.serverIsInRunLoop())
         {
@@ -2001,7 +2024,7 @@
 
             if (s2 != null)
             {
-                this.loadingScreen.resetProgresAndWorkingMessage(I18n.func_135053_a(s2));
+                this.loadingScreen.resetProgresAndWorkingMessage(I18n.getString(s2));
             }
             else
             {
@@ -2046,6 +2069,11 @@
     {
         this.statFileWriter.syncStats();
 
+        if (theWorld != null)
+        {
+            MinecraftForge.EVENT_BUS.post(new WorldEvent.Unload(theWorld));
+        }
+
         if (par1WorldClient == null)
         {
             NetClientHandler netclienthandler = this.getNetHandler();
@@ -2063,6 +2091,18 @@
             if (this.theIntegratedServer != null)
             {
                 this.theIntegratedServer.initiateShutdown();
+                if (loadingScreen!=null)
+                {
+                    this.loadingScreen.resetProgresAndWorkingMessage("Shutting down internal server...");
+                }
+                while (!theIntegratedServer.isServerStopped())
+                {
+                    try
+                    {
+                        Thread.sleep(10);
+                    }
+                    catch (InterruptedException ie) {}
+                }
             }
 
             this.theIntegratedServer = null;
@@ -2236,107 +2276,12 @@
         if (this.objectMouseOver != null)
         {
             boolean flag = this.thePlayer.capabilities.isCreativeMode;
-            int i = 0;
-            boolean flag1 = false;
-            int j;
             int k;
 
-            if (this.objectMouseOver.typeOfHit == EnumMovingObjectType.TILE)
-            {
-                k = this.objectMouseOver.blockX;
-                int l = this.objectMouseOver.blockY;
-                int i1 = this.objectMouseOver.blockZ;
-                Block block = Block.blocksList[this.theWorld.getBlockId(k, l, i1)];
-
-                if (block == null)
-                {
-                    return;
-                }
-
-                j = block.idPicked(this.theWorld, k, l, i1);
-
-                if (j == 0)
-                {
-                    return;
-                }
-
-                flag1 = Item.itemsList[j].getHasSubtypes();
-                int j1 = j < 256 && !Block.blocksList[block.blockID].isFlowerPot() ? j : block.blockID;
-                i = Block.blocksList[j1].getDamageValue(this.theWorld, k, l, i1);
-            }
-            else
-            {
-                if (this.objectMouseOver.typeOfHit != EnumMovingObjectType.ENTITY || this.objectMouseOver.entityHit == null || !flag)
-                {
-                    return;
-                }
-
-                if (this.objectMouseOver.entityHit instanceof EntityPainting)
-                {
-                    j = Item.painting.itemID;
-                }
-                else if (this.objectMouseOver.entityHit instanceof EntityLeashKnot)
-                {
-                    j = Item.field_111214_ch.itemID;
-                }
-                else if (this.objectMouseOver.entityHit instanceof EntityItemFrame)
-                {
-                    EntityItemFrame entityitemframe = (EntityItemFrame)this.objectMouseOver.entityHit;
-
-                    if (entityitemframe.getDisplayedItem() == null)
-                    {
-                        j = Item.itemFrame.itemID;
-                    }
-                    else
-                    {
-                        j = entityitemframe.getDisplayedItem().itemID;
-                        i = entityitemframe.getDisplayedItem().getItemDamage();
-                        flag1 = true;
-                    }
-                }
-                else if (this.objectMouseOver.entityHit instanceof EntityMinecart)
-                {
-                    EntityMinecart entityminecart = (EntityMinecart)this.objectMouseOver.entityHit;
-
-                    if (entityminecart.getMinecartType() == 2)
-                    {
-                        j = Item.minecartPowered.itemID;
-                    }
-                    else if (entityminecart.getMinecartType() == 1)
-                    {
-                        j = Item.minecartCrate.itemID;
-                    }
-                    else if (entityminecart.getMinecartType() == 3)
-                    {
-                        j = Item.minecartTnt.itemID;
-                    }
-                    else if (entityminecart.getMinecartType() == 5)
-                    {
-                        j = Item.minecartHopper.itemID;
-                    }
-                    else
-                    {
-                        j = Item.minecartEmpty.itemID;
-                    }
-                }
-                else if (this.objectMouseOver.entityHit instanceof EntityBoat)
-                {
-                    j = Item.boat.itemID;
-                }
-                else
-                {
-                    j = Item.monsterPlacer.itemID;
-                    i = EntityList.getEntityID(this.objectMouseOver.entityHit);
-                    flag1 = true;
-
-                    if (i <= 0 || !EntityList.entityEggs.containsKey(Integer.valueOf(i)))
-                    {
-                        return;
-                    }
-                }
-            }
-
-            this.thePlayer.inventory.setCurrentItem(j, i, flag1, flag);
+            if (!ForgeHooks.onPickBlock(this.objectMouseOver, this.thePlayer, this.theWorld))
+            {
+                return;
+            }
 
             if (flag)
             {
@@ -2351,15 +2296,15 @@
      */
     public CrashReport addGraphicsAndWorldToCrashReport(CrashReport par1CrashReport)
     {
-        par1CrashReport.func_85056_g().addCrashSectionCallable("Launched Version", new CallableLaunchedVersion(this));
-        par1CrashReport.func_85056_g().addCrashSectionCallable("LWJGL", new CallableLWJGLVersion(this));
-        par1CrashReport.func_85056_g().addCrashSectionCallable("OpenGL", new CallableGLInfo(this));
-        par1CrashReport.func_85056_g().addCrashSectionCallable("Is Modded", new CallableModded(this));
-        par1CrashReport.func_85056_g().addCrashSectionCallable("Type", new CallableType2(this));
-        par1CrashReport.func_85056_g().addCrashSectionCallable("Resource Pack", new CallableTexturePack(this));
-        par1CrashReport.func_85056_g().addCrashSectionCallable("Current Language", new CallableClientProfiler(this));
-        par1CrashReport.func_85056_g().addCrashSectionCallable("Profiler Position", new CallableClientMemoryStats(this));
-        par1CrashReport.func_85056_g().addCrashSectionCallable("Vec3 Pool Size", new MinecraftINNER13(this));
+        par1CrashReport.getCategory().addCrashSectionCallable("Launched Version", new CallableLaunchedVersion(this));
+        par1CrashReport.getCategory().addCrashSectionCallable("LWJGL", new CallableLWJGLVersion(this));
+        par1CrashReport.getCategory().addCrashSectionCallable("OpenGL", new CallableGLInfo(this));
+        par1CrashReport.getCategory().addCrashSectionCallable("Is Modded", new CallableModded(this));
+        par1CrashReport.getCategory().addCrashSectionCallable("Type", new CallableType2(this));
+        par1CrashReport.getCategory().addCrashSectionCallable("Resource Pack", new CallableTexturePack(this));
+        par1CrashReport.getCategory().addCrashSectionCallable("Current Language", new CallableClientProfiler(this));
+        par1CrashReport.getCategory().addCrashSectionCallable("Profiler Position", new CallableClientMemoryStats(this));
+        par1CrashReport.getCategory().addCrashSectionCallable("Vec3 Pool Size", new MinecraftINNER13(this));
 
         if (this.theWorld != null)
         {
@@ -2380,11 +2325,11 @@
     public void addServerStatsToSnooper(PlayerUsageSnooper par1PlayerUsageSnooper)
     {
         par1PlayerUsageSnooper.addData("fps", Integer.valueOf(debugFPS));
-        par1PlayerUsageSnooper.addData("texpack_name", this.field_110448_aq.func_110610_d());
+        par1PlayerUsageSnooper.addData("texpack_name", this.mcResourcePackRepository.getResourcePackName());
         par1PlayerUsageSnooper.addData("vsync_enabled", Boolean.valueOf(this.gameSettings.enableVsync));
         par1PlayerUsageSnooper.addData("display_frequency", Integer.valueOf(Display.getDisplayMode().getFrequency()));
         par1PlayerUsageSnooper.addData("display_type", this.fullscreen ? "fullscreen" : "windowed");
-        par1PlayerUsageSnooper.addData("run_time", Long.valueOf((MinecraftServer.func_130071_aq() - par1PlayerUsageSnooper.func_130105_g()) / 60L * 1000L));
+        par1PlayerUsageSnooper.addData("run_time", Long.valueOf((MinecraftServer.getSystemTimeMillis() - par1PlayerUsageSnooper.func_130105_g()) / 60L * 1000L));
 
         if (this.theIntegratedServer != null && this.theIntegratedServer.getPlayerUsageSnooper() != null)
         {
@@ -2397,7 +2342,7 @@
         par1PlayerUsageSnooper.addData("opengl_version", GL11.glGetString(GL11.GL_VERSION));
         par1PlayerUsageSnooper.addData("opengl_vendor", GL11.glGetString(GL11.GL_VENDOR));
         par1PlayerUsageSnooper.addData("client_brand", ClientBrandRetriever.getClientModName());
-        par1PlayerUsageSnooper.addData("launched_version", this.field_110447_Z);
+        par1PlayerUsageSnooper.addData("launched_version", this.launchedVersion);
         ContextCapabilities contextcapabilities = GLContext.getCapabilities();
         par1PlayerUsageSnooper.addData("gl_caps[ARB_multitexture]", Boolean.valueOf(contextcapabilities.GL_ARB_multitexture));
         par1PlayerUsageSnooper.addData("gl_caps[ARB_multisample]", Boolean.valueOf(contextcapabilities.GL_ARB_multisample));
@@ -2419,11 +2364,18 @@
         par1PlayerUsageSnooper.addData("gl_max_texture_size", Integer.valueOf(getGLMaximumTextureSize()));
     }
 
+    //Forge: Adds a optimization to the getGLMaximumTextureSize, only calculate it once.
+    private static int max_texture_size = -1;
     /**
      * Used in the usage snooper.
      */
     public static int getGLMaximumTextureSize()
     {
+        if (max_texture_size != -1)
+        {
+            return max_texture_size;
+        }
+
         for (int i = 16384; i > 0; i >>= 1)
         {
             GL11.glTexImage2D(GL11.GL_PROXY_TEXTURE_2D, 0, GL11.GL_RGBA, i, i, 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)null);
@@ -2431,6 +2383,7 @@
 
             if (j != 0)
             {
+                max_texture_size = i;
                 return i;
             }
         }
@@ -2483,7 +2436,15 @@
 
             if (integratedserver != null)
             {
-                integratedserver.stopServer();
+                try
+                {
+                    integratedserver.stopServer();
+                }
+                catch (MinecraftException e)
+                {
+                    // TODO Auto-generated catch block
+                    e.printStackTrace();
+                }
             }
         }
     }
@@ -2514,46 +2475,46 @@
 
     public ILogAgent getLogAgent()
     {
-        return this.field_94139_O;
-    }
-
-    public Session func_110432_I()
+        return this.mcLogAgent;
+    }
+
+    public Session getSession()
     {
         return this.session;
     }
 
-    public Proxy func_110437_J()
-    {
-        return this.field_110453_aa;
-    }
-
-    public TextureManager func_110434_K()
+    public Proxy getProxy()
+    {
+        return this.proxy;
+    }
+
+    public TextureManager getTextureManager()
     {
         return this.renderEngine;
     }
 
-    public ResourceManager func_110442_L()
-    {
-        return this.field_110451_am;
-    }
-
-    public ResourcePackRepository func_110438_M()
-    {
-        return this.field_110448_aq;
-    }
-
-    public LanguageManager func_135016_M()
-    {
-        return this.field_135017_as;
-    }
-
-    static String func_110431_a(Minecraft par0Minecraft)
-    {
-        return par0Minecraft.field_110447_Z;
+    public ResourceManager getResourceManager()
+    {
+        return this.mcResourceManager;
+    }
+
+    public ResourcePackRepository getResourcePackRepository()
+    {
+        return this.mcResourcePackRepository;
+    }
+
+    public LanguageManager getLanguageManager()
+    {
+        return this.mcLanguageManager;
+    }
+
+    static String getLaunchedVersion(Minecraft par0Minecraft)
+    {
+        return par0Minecraft.launchedVersion;
     }
 
     static LanguageManager func_142024_b(Minecraft par0Minecraft)
     {
-        return par0Minecraft.field_135017_as;
+        return par0Minecraft.mcLanguageManager;
     }
 }
