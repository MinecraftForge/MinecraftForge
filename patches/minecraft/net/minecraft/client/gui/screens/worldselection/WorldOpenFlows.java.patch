--- a/net/minecraft/client/gui/screens/worldselection/WorldOpenFlows.java
+++ b/net/minecraft/client/gui/screens/worldselection/WorldOpenFlows.java
@@ -138,6 +_,7 @@
 
          WorldStem worldstem;
          try {
+            levelstoragesource$levelstorageaccess.readAdditionalLevelSaveData(); // Read extra (e.g. modded) data from the world before creating it
             worldstem = this.m_233122_(levelstoragesource$levelstorageaccess, p_233148_, packrepository);
          } catch (Exception exception) {
             f_233088_.warn("Failed to load datapacks, can't proceed with server load", (Throwable)exception);
@@ -151,7 +_,9 @@
          WorldData worlddata = worldstem.f_206895_();
          boolean flag = worlddata.m_5961_().m_64670_();
          boolean flag1 = worlddata.m_5754_() != Lifecycle.stable();
-         if (!p_233149_ || !flag && !flag1) {
+         // Forge: Skip confirmation if it has been done already for this world
+         boolean skipConfirmation = worlddata instanceof PrimaryLevelData pld && pld.hasConfirmedExperimentalWarning();
+         if (skipConfirmation || !p_233149_ || !flag && !flag1) {
             this.f_233089_.m_91100_().m_235003_(levelstoragesource$levelstorageaccess).thenApply((p_233177_) -> {
                return true;
             }).exceptionallyComposeAsync((p_233183_) -> {
@@ -173,9 +_,11 @@
                return null;
             });
          } else {
+            if (flag) // Forge: For legacy world options, let vanilla handle it.
             this.m_233140_(p_233146_, p_233147_, flag, () -> {
                this.m_233145_(p_233146_, p_233147_, p_233148_, false);
             });
+            else net.minecraftforge.client.ForgeHooksClient.createWorldConfirmationScreen(p_233147_, levelstoragesource$levelstorageaccess, packrepository, worldstem);
             worldstem.close();
             m_233116_(levelstoragesource$levelstorageaccess, p_233147_);
          }
