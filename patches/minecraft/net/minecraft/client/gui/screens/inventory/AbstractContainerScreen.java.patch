--- a/net/minecraft/client/gui/screens/inventory/AbstractContainerScreen.java
+++ b/net/minecraft/client/gui/screens/inventory/AbstractContainerScreen.java
@@ -90,6 +_,7 @@
       int i = this.leftPos;
       int j = this.topPos;
       super.render(p_283479_, p_283661_, p_281248_, p_281886_);
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.ContainerScreenEvent.Render.Background(this, p_283479_, p_283661_, p_281248_));
       RenderSystem.disableDepthTest();
       p_283479_.pose().pushPose();
       p_283479_.pose().translate((float)i, (float)j, 0.0F);
@@ -106,12 +_,13 @@
             int l = slot.x;
             int i1 = slot.y;
             if (this.hoveredSlot.isHighlightable()) {
-               renderSlotHighlight(p_283479_, l, i1, 0);
+               renderSlotHighlight(p_283479_, l, i1, 0, getSlotColor(k));
             }
          }
       }
 
       this.renderLabels(p_283479_, p_283661_, p_281248_);
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.ContainerScreenEvent.Render.Foreground(this, p_283479_, p_283661_, p_281248_));
       ItemStack itemstack = this.draggingItem.isEmpty() ? this.menu.getCarried() : this.draggingItem;
       if (!itemstack.isEmpty()) {
          int l1 = 8;
@@ -153,13 +_,16 @@
    }
 
    public static void renderSlotHighlight(GuiGraphics p_283692_, int p_281453_, int p_281915_, int p_283504_) {
-      p_283692_.fillGradient(RenderType.guiOverlay(), p_281453_, p_281915_, p_281453_ + 16, p_281915_ + 16, -2130706433, -2130706433, p_283504_);
+         renderSlotHighlight(p_283692_, p_281453_, p_281915_, p_283504_, -2130706433);
+   }
+   public static void renderSlotHighlight(GuiGraphics p_283692_, int p_281453_, int p_281915_, int p_283504_, int color) {
+      p_283692_.fillGradient(RenderType.guiOverlay(), p_281453_, p_281915_, p_281453_ + 16, p_281915_ + 16, color, color, p_283504_);
    }
 
    protected void renderTooltip(GuiGraphics p_283594_, int p_282171_, int p_281909_) {
       if (this.menu.getCarried().isEmpty() && this.hoveredSlot != null && this.hoveredSlot.hasItem()) {
          ItemStack itemstack = this.hoveredSlot.getItem();
-         p_283594_.renderTooltip(this.font, this.getTooltipFromContainerItem(itemstack), itemstack.getTooltipImage(), p_282171_, p_281909_);
+         p_283594_.renderTooltip(this.font, this.getTooltipFromContainerItem(itemstack), itemstack.getTooltipImage(), itemstack, p_282171_, p_281909_);
       }
 
    }
@@ -172,7 +_,8 @@
       p_282567_.pose().pushPose();
       p_282567_.pose().translate(0.0F, 0.0F, 232.0F);
       p_282567_.renderItem(p_281330_, p_281772_, p_281689_);
-      p_282567_.renderItemDecorations(this.font, p_281330_, p_281772_, p_281689_ - (this.draggingItem.isEmpty() ? 0 : 8), p_282568_);
+      var font = net.minecraftforge.client.extensions.common.IClientItemExtensions.of(p_281330_).getFont(p_281330_, net.minecraftforge.client.extensions.common.IClientItemExtensions.FontContext.ITEM_COUNT);
+      p_282567_.renderItemDecorations(font == null ? this.font : font, p_281330_, p_281772_, p_281689_ - (this.draggingItem.isEmpty() ? 0 : 8), p_282568_);
       p_282567_.pose().popPose();
    }
 
@@ -274,7 +_,8 @@
       if (super.mouseClicked(p_97748_, p_97749_, p_97750_)) {
          return true;
       } else {
-         boolean flag = this.minecraft.options.keyPickItem.matchesMouse(p_97750_) && this.minecraft.gameMode.hasInfiniteItems();
+         InputConstants.Key mouseKey = InputConstants.Type.MOUSE.getOrCreate(p_97750_);
+         boolean flag = this.minecraft.options.keyPickItem.isActiveAndMatches(mouseKey);
          Slot slot = this.findSlot(p_97748_, p_97749_);
          long i = Util.getMillis();
          this.doubleclick = this.lastClickSlot == slot && i - this.lastClickTime < 250L && this.lastClickButton == p_97750_;
@@ -285,6 +_,7 @@
             int j = this.leftPos;
             int k = this.topPos;
             boolean flag1 = this.hasClickedOutside(p_97748_, p_97749_, j, k, p_97750_);
+            if (slot != null) flag1 = false; // Forge, prevent dropping of items through slots outside of GUI boundaries
             int l = -1;
             if (slot != null) {
                l = slot.index;
@@ -310,7 +_,7 @@
                   }
                } else if (!this.isQuickCrafting) {
                   if (this.menu.getCarried().isEmpty()) {
-                     if (flag) {
+                     if (this.minecraft.options.keyPickItem.isActiveAndMatches(mouseKey)) {
                         this.slotClicked(slot, l, p_97750_, ClickType.CLONE);
                      } else {
                         boolean flag2 = l != -999 && (InputConstants.isKeyDown(Minecraft.getInstance().getWindow().getWindow(), 340) || InputConstants.isKeyDown(Minecraft.getInstance().getWindow().getWindow(), 344));
@@ -334,7 +_,7 @@
                         this.quickCraftingType = 0;
                      } else if (p_97750_ == 1) {
                         this.quickCraftingType = 1;
-                     } else if (flag) {
+                     } else if (this.minecraft.options.keyPickItem.isActiveAndMatches(mouseKey)) {
                         this.quickCraftingType = 2;
                      }
                   }
@@ -403,10 +_,13 @@
    }
 
    public boolean mouseReleased(double p_97812_, double p_97813_, int p_97814_) {
+      super.mouseReleased(p_97812_, p_97813_, p_97814_); //Forge, Call parent to release buttons
       Slot slot = this.findSlot(p_97812_, p_97813_);
       int i = this.leftPos;
       int j = this.topPos;
       boolean flag = this.hasClickedOutside(p_97812_, p_97813_, i, j, p_97814_);
+      if (slot != null) flag = false; // Forge, prevent dropping of items through slots outside of GUI boundaries
+      InputConstants.Key mouseKey = InputConstants.Type.MOUSE.getOrCreate(p_97814_);
       int k = -1;
       if (slot != null) {
          k = slot.index;
@@ -420,7 +_,7 @@
          if (hasShiftDown()) {
             if (!this.lastQuickMoved.isEmpty()) {
                for(Slot slot2 : this.menu.slots) {
-                  if (slot2 != null && slot2.mayPickup(this.minecraft.player) && slot2.hasItem() && slot2.container == slot.container && AbstractContainerMenu.canItemQuickReplace(slot2, this.lastQuickMoved, true)) {
+                  if (slot2 != null && slot2.mayPickup(this.minecraft.player) && slot2.hasItem() && slot2.isSameInventory(slot) && AbstractContainerMenu.canItemQuickReplace(slot2, this.lastQuickMoved, true)) {
                      this.slotClicked(slot2, slot2.index, p_97814_, ClickType.QUICK_MOVE);
                   }
                }
@@ -483,7 +_,7 @@
 
             this.slotClicked((Slot)null, -999, AbstractContainerMenu.getQuickcraftMask(2, this.quickCraftingType), ClickType.QUICK_CRAFT);
          } else if (!this.menu.getCarried().isEmpty()) {
-            if (this.minecraft.options.keyPickItem.matchesMouse(p_97814_)) {
+            if (this.minecraft.options.keyPickItem.isActiveAndMatches(mouseKey)) {
                this.slotClicked(slot, k, p_97814_, ClickType.CLONE);
             } else {
                boolean flag1 = k != -999 && (InputConstants.isKeyDown(Minecraft.getInstance().getWindow().getWindow(), 340) || InputConstants.isKeyDown(Minecraft.getInstance().getWindow().getWindow(), 344));
@@ -530,34 +_,39 @@
    }
 
    public boolean keyPressed(int p_97765_, int p_97766_, int p_97767_) {
+      InputConstants.Key mouseKey = InputConstants.getKey(p_97765_, p_97766_);
       if (super.keyPressed(p_97765_, p_97766_, p_97767_)) {
          return true;
-      } else if (this.minecraft.options.keyInventory.matches(p_97765_, p_97766_)) {
+      } else if (this.minecraft.options.keyInventory.isActiveAndMatches(mouseKey)) {
          this.onClose();
          return true;
       } else {
-         this.checkHotbarKeyPressed(p_97765_, p_97766_);
+         boolean handled = this.checkHotbarKeyPressed(p_97765_, p_97766_);// Forge MC-146650: Needs to return true when the key is handled
          if (this.hoveredSlot != null && this.hoveredSlot.hasItem()) {
-            if (this.minecraft.options.keyPickItem.matches(p_97765_, p_97766_)) {
+            if (this.minecraft.options.keyPickItem.isActiveAndMatches(mouseKey)) {
                this.slotClicked(this.hoveredSlot, this.hoveredSlot.index, 0, ClickType.CLONE);
-            } else if (this.minecraft.options.keyDrop.matches(p_97765_, p_97766_)) {
+               handled = true;
+            } else if (this.minecraft.options.keyDrop.isActiveAndMatches(mouseKey)) {
                this.slotClicked(this.hoveredSlot, this.hoveredSlot.index, hasControlDown() ? 1 : 0, ClickType.THROW);
+               handled = true;
             }
+         } else if (this.minecraft.options.keyDrop.isActiveAndMatches(mouseKey)) {
+             handled = true; // Forge MC-146650: Emulate MC bug, so we don't drop from hotbar when pressing drop without hovering over a item.
          }
 
-         return true;
+         return handled;
       }
    }
 
    protected boolean checkHotbarKeyPressed(int p_97806_, int p_97807_) {
       if (this.menu.getCarried().isEmpty() && this.hoveredSlot != null) {
-         if (this.minecraft.options.keySwapOffhand.matches(p_97806_, p_97807_)) {
+         if (this.minecraft.options.keySwapOffhand.isActiveAndMatches(InputConstants.getKey(p_97806_, p_97807_))) {
             this.slotClicked(this.hoveredSlot, this.hoveredSlot.index, 40, ClickType.SWAP);
             return true;
          }
 
          for(int i = 0; i < 9; ++i) {
-            if (this.minecraft.options.keyHotbarSlots[i].matches(p_97806_, p_97807_)) {
+            if (this.minecraft.options.keyHotbarSlots[i].isActiveAndMatches(InputConstants.getKey(p_97806_, p_97807_))) {
                this.slotClicked(this.hoveredSlot, this.hoveredSlot.index, i, ClickType.SWAP);
                return true;
             }
@@ -592,6 +_,18 @@
 
    public T getMenu() {
       return this.menu;
+   }
+
+   @org.jetbrains.annotations.Nullable
+   public Slot getSlotUnderMouse() { return this.hoveredSlot; }
+   public int getGuiLeft() { return leftPos; }
+   public int getGuiTop() { return topPos; }
+   public int getXSize() { return imageWidth; }
+   public int getYSize() { return imageHeight; }
+
+   protected int slotColor = -2130706433;
+   public int getSlotColor(int index) {
+      return slotColor;
    }
 
    public void onClose() {
