--- a/net/minecraft/client/gui/ScreenManager.java
+++ b/net/minecraft/client/gui/ScreenManager.java
@@ -40,6 +_,10 @@
    private static final Map<ContainerType<?>, ScreenManager.IScreenFactory<?, ?>> SCREENS = Maps.newHashMap();
 
    public static <T extends Container> void create(@Nullable ContainerType<T> p_216909_0_, Minecraft p_216909_1_, int p_216909_2_, ITextComponent p_216909_3_) {
+      getScreenFactory(p_216909_0_, p_216909_1_, p_216909_2_, p_216909_3_).ifPresent(f -> f.fromPacket(p_216909_3_, p_216909_0_, p_216909_1_, p_216909_2_));
+   }
+
+   public static <T extends Container> java.util.Optional<IScreenFactory<T, ?>> getScreenFactory(@Nullable ContainerType<T> p_216909_0_, Minecraft p_216909_1_, int p_216909_2_, ITextComponent p_216909_3_) {
       if (p_216909_0_ == null) {
          LOGGER.warn("Trying to open invalid screen with name: {}", (Object)p_216909_3_.getString());
       } else {
@@ -47,9 +_,10 @@
          if (iscreenfactory == null) {
             LOGGER.warn("Failed to create screen for menu type: {}", (Object)Registry.MENU.getKey(p_216909_0_));
          } else {
-            iscreenfactory.fromPacket(p_216909_3_, p_216909_0_, p_216909_1_, p_216909_2_);
+            return java.util.Optional.of(iscreenfactory);
          }
       }
+      return java.util.Optional.empty();
    }
 
    @Nullable
