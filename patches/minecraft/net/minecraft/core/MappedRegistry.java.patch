--- a/net/minecraft/core/MappedRegistry.java
+++ b/net/minecraft/core/MappedRegistry.java
@@ -121,7 +_,16 @@
       }
    }
 
+   private static final Set<ResourceLocation> KNOWN = new java.util.LinkedHashSet<>();
+   public static Set<ResourceLocation> getKnownRegistries() {
+      return java.util.Collections.unmodifiableSet(KNOWN);
+   }
+   protected final void markKnown() {
+      KNOWN.add(m_123023_().m_135782_());
+   }
+
    public Holder.Reference<T> m_203704_(int p_256563_, ResourceKey<T> p_256594_, T p_256374_, Lifecycle p_256469_) {
+      markKnown();
       this.m_205921_(p_256594_);
       Validate.notNull(p_256594_);
       Validate.notNull(p_256374_);
@@ -145,6 +_,8 @@
          reference = this.f_205842_.computeIfAbsent(p_256594_, (p_258168_) -> {
             return Holder.Reference.m_254896_(this.m_255331_(), p_258168_);
          });
+         // Forge: Bind the value immediately so it can be queried while the registry is not frozen
+         reference.m_247654_(p_256374_);
       }
 
       this.f_205842_.put(p_256594_, reference);
@@ -300,14 +_,17 @@
       return this.f_205842_.containsKey(p_175392_);
    }
 
+   /** @deprecated Forge: For internal use only. Use the Register events when registering values. */
+   @Deprecated
+   public void unfreeze() {
+      this.f_205845_ = false;
+   }
+
    public Registry<T> m_203521_() {
       if (this.f_205845_) {
          return this;
       } else {
          this.f_205845_ = true;
-         this.f_205843_.forEach((p_247989_, p_247990_) -> {
-            p_247990_.m_247654_(p_247989_);
-         });
          List<ResourceLocation> list = this.f_205842_.entrySet().stream().filter((p_211055_) -> {
             return !p_211055_.getValue().m_203633_();
          }).map((p_211794_) -> {
@@ -321,7 +_,8 @@
                   throw new IllegalStateException("Some intrusive holders were not registered: " + this.f_244282_.values());
                }
 
-               this.f_244282_ = null;
+               // Forge: We freeze/unfreeze vanilla registries more than once, so we need to keep the unregistered intrusive holders map around.
+               // this.unregisteredIntrusiveHolders = null;
             }
 
             return this;
@@ -415,5 +_,27 @@
 
    public HolderLookup.RegistryLookup<T> m_255303_() {
       return this.f_256971_;
+   }
+
+   private boolean duringAttachmentLoading = false;
+   private final Map<ResourceKey<net.minecraftforge.registries.attachment.IRegistryAttachmentType<?>>, net.minecraftforge.registries.attachment.IRegistryAttachmentHolder<T, ?>> attachments = new HashMap<>();
+   @Override
+   @javax.annotation.Nullable
+   public <A> net.minecraftforge.registries.attachment.IRegistryAttachmentHolder<T, A> attachment(ResourceKey<net.minecraftforge.registries.attachment.IRegistryAttachmentType<A>> attachType) {
+      return attachments.computeIfAbsent((ResourceKey)attachType, it -> {
+         final var type = (net.minecraftforge.registries.attachment.IRegistryAttachmentType<A>)net.minecraftforge.registries.ForgeRegistries.REGISTRY_ATTACHMENT_TYPES.get().getValue(attachType.m_135782_());
+         if (!type.isValidFor(this.f_256817_)) return null;
+         final var impl = new net.minecraftforge.registries.attachment.RegistryAttachmentHolderImpl<>(type, this);
+         if (duringAttachmentLoading) impl.unfreeze(); // Start unfrozen if the method is called during attachment loading
+         return impl;
+      });
+   }
+   @Override
+   public Map<ResourceKey<net.minecraftforge.registries.attachment.IRegistryAttachmentType<?>>, net.minecraftforge.registries.attachment.IRegistryAttachmentHolder<T, ?>> attachments() {
+      return java.util.Collections.unmodifiableMap(attachments);
+   }
+   @Override
+   public void setDuringAttachmentLoading(boolean duringAttachmentLoading) {
+      this.duringAttachmentLoading = duringAttachmentLoading;
    }
 }
