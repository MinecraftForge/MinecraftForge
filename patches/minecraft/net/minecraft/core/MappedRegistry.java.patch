--- a/net/minecraft/core/MappedRegistry.java
+++ b/net/minecraft/core/MappedRegistry.java
@@ -121,7 +_,16 @@
       }
    }
 
+   private static final Set<ResourceLocation> KNOWN = new java.util.LinkedHashSet<>();
+   public static Set<ResourceLocation> getKnownRegistries() {
+      return java.util.Collections.unmodifiableSet(KNOWN);
+   }
+   protected final void markKnown() {
+      KNOWN.add(m_123023_().m_135782_());
+   }
+
    public Holder.Reference<T> m_203704_(int p_256563_, ResourceKey<T> p_256594_, T p_256374_, Lifecycle p_256469_) {
+      markKnown();
       this.m_205921_(p_256594_);
       Validate.notNull(p_256594_);
       Validate.notNull(p_256374_);
@@ -300,6 +_,12 @@
       return this.f_205842_.containsKey(p_175392_);
    }
 
+   /** @deprecated Forge: For internal use only. Use the Register events when registering values. */
+   @Deprecated
+   public void unfreeze() {
+      this.f_205845_ = false;
+   }
+
    public Registry<T> m_203521_() {
       if (this.f_205845_) {
          return this;
@@ -321,7 +_,8 @@
                   throw new IllegalStateException("Some intrusive holders were not registered: " + this.f_244282_.values());
                }
 
-               this.f_244282_ = null;
+               // Forge: We freeze/unfreeze vanilla registries more than once, so we need to keep the unregistered intrusive holders map around.
+               // this.unregisteredIntrusiveHolders = null;
             }
 
             return this;
