--- a/net/minecraft/core/registries/BuiltInRegistries.java
+++ b/net/minecraft/core/registries/BuiltInRegistries.java
@@ -114,41 +_,89 @@
    public static final DefaultedRegistry<GameEvent> GAME_EVENT = registerDefaultedWithIntrusiveHolders(Registries.GAME_EVENT, "step", (p_260052_) -> {
       return GameEvent.STEP;
    });
-   public static final Registry<SoundEvent> SOUND_EVENT = registerSimple(Registries.SOUND_EVENT, (p_260167_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#SOUND_EVENTS} instead.
+    */
+   @Deprecated
+   public static final Registry<SoundEvent> SOUND_EVENT = forge(Registries.SOUND_EVENT, (p_260167_) -> {
       return SoundEvents.ITEM_PICKUP;
    });
-   public static final DefaultedRegistry<Fluid> FLUID = registerDefaultedWithIntrusiveHolders(Registries.FLUID, "empty", (p_259453_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#FLUIDS} instead.
+    */
+   @Deprecated
+   public static final DefaultedRegistry<Fluid> FLUID = forge(Registries.FLUID, "empty", (p_259453_) -> {
       return Fluids.EMPTY;
    });
-   public static final Registry<MobEffect> MOB_EFFECT = registerSimpleWithIntrusiveHolders(Registries.MOB_EFFECT, (p_259689_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#MOB_EFFECTS} instead.
+    */
+   @Deprecated
+   public static final Registry<MobEffect> MOB_EFFECT = forge(Registries.MOB_EFFECT, (p_259689_) -> {
       return MobEffects.LUCK;
    });
-   public static final DefaultedRegistry<Block> BLOCK = registerDefaultedWithIntrusiveHolders(Registries.BLOCK, "air", (p_259909_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#BLOCKS} instead.
+    */
+   @Deprecated
+   public static final DefaultedRegistry<Block> BLOCK = forge(Registries.BLOCK, "air", (p_259909_) -> {
       return Blocks.AIR;
    });
-   public static final Registry<Enchantment> ENCHANTMENT = registerSimpleWithIntrusiveHolders(Registries.ENCHANTMENT, (p_259104_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#ENCHANTMENTS} instead.
+    */
+   @Deprecated
+   public static final Registry<Enchantment> ENCHANTMENT = forge(Registries.ENCHANTMENT, (p_259104_) -> {
       return Enchantments.BLOCK_FORTUNE;
    });
-   public static final DefaultedRegistry<EntityType<?>> ENTITY_TYPE = registerDefaultedWithIntrusiveHolders(Registries.ENTITY_TYPE, "pig", (p_259175_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#ENTITY_TYPES} instead.
+    */
+   @Deprecated
+   public static final DefaultedRegistry<EntityType<?>> ENTITY_TYPE = forge(Registries.ENTITY_TYPE, "pig", (p_259175_) -> {
       return EntityType.PIG;
    });
-   public static final DefaultedRegistry<Item> ITEM = registerDefaultedWithIntrusiveHolders(Registries.ITEM, "air", (p_260227_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#ITEMS} instead.
+    */
+   @Deprecated
+   public static final DefaultedRegistry<Item> ITEM = forge(Registries.ITEM, "air", (p_260227_) -> {
       return Items.AIR;
    });
-   public static final DefaultedRegistry<Potion> POTION = registerDefaultedWithIntrusiveHolders(Registries.POTION, "empty", (p_259869_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#POTIONS} instead.
+    */
+   @Deprecated
+   public static final DefaultedRegistry<Potion> POTION = forge(Registries.POTION, "empty", (p_259869_) -> {
       return Potions.EMPTY;
    });
-   public static final Registry<ParticleType<?>> PARTICLE_TYPE = registerSimple(Registries.PARTICLE_TYPE, (p_260266_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#PARTICLE_TYPES} instead.
+    */
+   @Deprecated
+   public static final Registry<ParticleType<?>> PARTICLE_TYPE = forge(Registries.PARTICLE_TYPE, (p_260266_) -> {
       return ParticleTypes.BLOCK;
    });
-   public static final Registry<BlockEntityType<?>> BLOCK_ENTITY_TYPE = registerSimpleWithIntrusiveHolders(Registries.BLOCK_ENTITY_TYPE, (p_259434_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#BLOCK_ENTITY_TYPES} instead.
+    */
+   @Deprecated
+   public static final Registry<BlockEntityType<?>> BLOCK_ENTITY_TYPE = forge(Registries.BLOCK_ENTITY_TYPE, (p_259434_) -> {
       return BlockEntityType.FURNACE;
    });
-   public static final DefaultedRegistry<PaintingVariant> PAINTING_VARIANT = registerDefaulted(Registries.PAINTING_VARIANT, "kebab", PaintingVariants::bootstrap);
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#PAINTING_VARIANTS} instead.
+    */
+   @Deprecated
+   public static final DefaultedRegistry<PaintingVariant> PAINTING_VARIANT = forge(Registries.PAINTING_VARIANT, "kebab", PaintingVariants::bootstrap);
    public static final Registry<ResourceLocation> CUSTOM_STAT = registerSimple(Registries.CUSTOM_STAT, (p_259833_) -> {
       return Stats.JUMP;
    });
-   public static final DefaultedRegistry<ChunkStatus> CHUNK_STATUS = registerDefaulted(Registries.CHUNK_STATUS, "empty", (p_259971_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#CHUNK_STATUS} instead.
+    */
+   @Deprecated
+   public static final DefaultedRegistry<ChunkStatus> CHUNK_STATUS = forge(Registries.CHUNK_STATUS, "empty", (p_259971_) -> {
       return ChunkStatus.EMPTY;
    });
    public static final Registry<RuleTestType<?>> RULE_TEST = registerSimple(Registries.RULE_TEST, (p_259641_) -> {
@@ -160,42 +_,90 @@
    public static final Registry<PosRuleTestType<?>> POS_RULE_TEST = registerSimple(Registries.POS_RULE_TEST, (p_259262_) -> {
       return PosRuleTestType.ALWAYS_TRUE_TEST;
    });
-   public static final Registry<MenuType<?>> MENU = registerSimple(Registries.MENU, (p_259341_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#MENU_TYPES} instead.
+    */
+   @Deprecated
+   public static final Registry<MenuType<?>> MENU = forge(Registries.MENU, (p_259341_) -> {
       return MenuType.ANVIL;
    });
-   public static final Registry<RecipeType<?>> RECIPE_TYPE = registerSimple(Registries.RECIPE_TYPE, (p_259086_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#RECIPE_TYPES} instead.
+    */
+   @Deprecated
+   public static final Registry<RecipeType<?>> RECIPE_TYPE = forge(Registries.RECIPE_TYPE, (p_259086_) -> {
       return RecipeType.CRAFTING;
    });
-   public static final Registry<RecipeSerializer<?>> RECIPE_SERIALIZER = registerSimple(Registries.RECIPE_SERIALIZER, (p_260230_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#RECIPE_SERIALIZERS} instead.
+    */
+   @Deprecated
+   public static final Registry<RecipeSerializer<?>> RECIPE_SERIALIZER = forge(Registries.RECIPE_SERIALIZER, (p_260230_) -> {
       return RecipeSerializer.SHAPELESS_RECIPE;
    });
-   public static final Registry<Attribute> ATTRIBUTE = registerSimple(Registries.ATTRIBUTE, (p_260300_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#ATTRIBUTES} instead.
+    */
+   @Deprecated
+   public static final Registry<Attribute> ATTRIBUTE = forge(Registries.ATTRIBUTE, (p_260300_) -> {
       return Attributes.LUCK;
    });
    public static final Registry<PositionSourceType<?>> POSITION_SOURCE_TYPE = registerSimple(Registries.POSITION_SOURCE_TYPE, (p_259113_) -> {
       return PositionSourceType.BLOCK;
    });
-   public static final Registry<ArgumentTypeInfo<?, ?>> COMMAND_ARGUMENT_TYPE = registerSimple(Registries.COMMAND_ARGUMENT_TYPE, (RegistryBootstrap)ArgumentTypeInfos::bootstrap);
-   public static final Registry<StatType<?>> STAT_TYPE = registerSimple(Registries.STAT_TYPE, (p_259967_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#COMMAND_ARGUMENT_TYPES} instead.
+    */
+   @Deprecated
+   public static final Registry<ArgumentTypeInfo<?, ?>> COMMAND_ARGUMENT_TYPE = forge(Registries.COMMAND_ARGUMENT_TYPE, (RegistryBootstrap)ArgumentTypeInfos::bootstrap);
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#STAT_TYPES} instead.
+    */
+   @Deprecated
+   public static final Registry<StatType<?>> STAT_TYPE = forge(Registries.STAT_TYPE, (p_259967_) -> {
       return Stats.ITEM_USED;
    });
    public static final DefaultedRegistry<VillagerType> VILLAGER_TYPE = registerDefaulted(Registries.VILLAGER_TYPE, "plains", (p_259473_) -> {
       return VillagerType.PLAINS;
    });
-   public static final DefaultedRegistry<VillagerProfession> VILLAGER_PROFESSION = registerDefaulted(Registries.VILLAGER_PROFESSION, "none", (p_259037_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#VILLAGER_PROFESSIONS} instead.
+    */
+   @Deprecated
+   public static final DefaultedRegistry<VillagerProfession> VILLAGER_PROFESSION = forge(Registries.VILLAGER_PROFESSION, "none", (p_259037_) -> {
       return VillagerProfession.NONE;
    });
-   public static final Registry<PoiType> POINT_OF_INTEREST_TYPE = registerSimple(Registries.POINT_OF_INTEREST_TYPE, PoiTypes::bootstrap);
-   public static final DefaultedRegistry<MemoryModuleType<?>> MEMORY_MODULE_TYPE = registerDefaulted(Registries.MEMORY_MODULE_TYPE, "dummy", (p_259248_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#POI_TYPES} instead.
+    */
+   @Deprecated
+   public static final Registry<PoiType> POINT_OF_INTEREST_TYPE = forge(Registries.POINT_OF_INTEREST_TYPE, PoiTypes::bootstrap);
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#MEMORY_MODULE_TYPES} instead.
+    */
+   @Deprecated
+   public static final DefaultedRegistry<MemoryModuleType<?>> MEMORY_MODULE_TYPE = forge(Registries.MEMORY_MODULE_TYPE, "dummy", (p_259248_) -> {
       return MemoryModuleType.DUMMY;
    });
-   public static final DefaultedRegistry<SensorType<?>> SENSOR_TYPE = registerDefaulted(Registries.SENSOR_TYPE, "dummy", (p_259757_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#SENSOR_TYPES} instead.
+    */
+   @Deprecated
+   public static final DefaultedRegistry<SensorType<?>> SENSOR_TYPE = forge(Registries.SENSOR_TYPE, "dummy", (p_259757_) -> {
       return SensorType.DUMMY;
    });
-   public static final Registry<Schedule> SCHEDULE = registerSimple(Registries.SCHEDULE, (p_259540_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#SCHEDULES} instead.
+    */
+   @Deprecated
+   public static final Registry<Schedule> SCHEDULE = forge(Registries.SCHEDULE, (p_259540_) -> {
       return Schedule.EMPTY;
    });
-   public static final Registry<Activity> ACTIVITY = registerSimple(Registries.ACTIVITY, (p_260197_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#ACTIVITIES} instead.
+    */
+   @Deprecated
+   public static final Registry<Activity> ACTIVITY = forge(Registries.ACTIVITY, (p_260197_) -> {
       return Activity.IDLE;
    });
    public static final Registry<LootPoolEntryType> LOOT_POOL_ENTRY_TYPE = registerSimple(Registries.LOOT_POOL_ENTRY_TYPE, (p_260042_) -> {
@@ -228,10 +_,18 @@
    public static final Registry<BlockPredicateType<?>> BLOCK_PREDICATE_TYPE = registerSimple(Registries.BLOCK_PREDICATE_TYPE, (p_260006_) -> {
       return BlockPredicateType.NOT;
    });
-   public static final Registry<WorldCarver<?>> CARVER = registerSimple(Registries.CARVER, (p_260200_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#WORLD_CARVERS} instead.
+    */
+   @Deprecated
+   public static final Registry<WorldCarver<?>> CARVER = forge(Registries.CARVER, (p_260200_) -> {
       return WorldCarver.CAVE;
    });
-   public static final Registry<Feature<?>> FEATURE = registerSimple(Registries.FEATURE, (p_259143_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#FEATURES} instead.
+    */
+   @Deprecated
+   public static final Registry<Feature<?>> FEATURE = forge(Registries.FEATURE, (p_259143_) -> {
       return Feature.ORE;
    });
    public static final Registry<StructurePlacementType<?>> STRUCTURE_PLACEMENT = registerSimple(Registries.STRUCTURE_PLACEMENT, (p_259179_) -> {
@@ -246,10 +_,18 @@
    public static final Registry<PlacementModifierType<?>> PLACEMENT_MODIFIER_TYPE = registerSimple(Registries.PLACEMENT_MODIFIER_TYPE, (p_260335_) -> {
       return PlacementModifierType.COUNT;
    });
-   public static final Registry<BlockStateProviderType<?>> BLOCKSTATE_PROVIDER_TYPE = registerSimple(Registries.BLOCK_STATE_PROVIDER_TYPE, (p_259345_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#BLOCK_STATE_PROVIDER_TYPES} instead.
+    */
+   @Deprecated
+   public static final Registry<BlockStateProviderType<?>> BLOCKSTATE_PROVIDER_TYPE = forge(Registries.BLOCK_STATE_PROVIDER_TYPE, (p_259345_) -> {
       return BlockStateProviderType.SIMPLE_STATE_PROVIDER;
    });
-   public static final Registry<FoliagePlacerType<?>> FOLIAGE_PLACER_TYPE = registerSimple(Registries.FOLIAGE_PLACER_TYPE, (p_260329_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#FOLIAGE_PLACER_TYPES} instead.
+    */
+   @Deprecated
+   public static final Registry<FoliagePlacerType<?>> FOLIAGE_PLACER_TYPE = forge(Registries.FOLIAGE_PLACER_TYPE, (p_260329_) -> {
       return FoliagePlacerType.BLOB_FOLIAGE_PLACER;
    });
    public static final Registry<TrunkPlacerType<?>> TRUNK_PLACER_TYPE = registerSimple(Registries.TRUNK_PLACER_TYPE, (p_259690_) -> {
@@ -258,7 +_,11 @@
    public static final Registry<RootPlacerType<?>> ROOT_PLACER_TYPE = registerSimple(Registries.ROOT_PLACER_TYPE, (p_259493_) -> {
       return RootPlacerType.MANGROVE_ROOT_PLACER;
    });
-   public static final Registry<TreeDecoratorType<?>> TREE_DECORATOR_TYPE = registerSimple(Registries.TREE_DECORATOR_TYPE, (p_259122_) -> {
+   /**
+    * @deprecated Forge: Use {@link net.minecraftforge.registries.ForgeRegistries#TREE_DECORATOR_TYPES} instead.
+    */
+   @Deprecated
+   public static final Registry<TreeDecoratorType<?>> TREE_DECORATOR_TYPE = forge(Registries.TREE_DECORATOR_TYPE, (p_259122_) -> {
       return TreeDecoratorType.LEAVE_VINE;
    });
    public static final Registry<FeatureSizeType<?>> FEATURE_SIZE_TYPE = registerSimple(Registries.FEATURE_SIZE_TYPE, (p_259370_) -> {
@@ -293,10 +_,18 @@
       return internalRegister(p_297531_, new MappedRegistry<>(p_297531_, Lifecycle.stable(), true), p_298446_, Lifecycle.stable());
    }
 
+   private static <T> Registry<T> forge(ResourceKey<? extends Registry<T>> key, BuiltInRegistries.RegistryBootstrap<T> def) {
+      return forge(key, Lifecycle.stable(), def);
+   }
+
    private static <T> DefaultedRegistry<T> registerDefaulted(ResourceKey<? extends Registry<T>> p_259887_, String p_259325_, BuiltInRegistries.RegistryBootstrap<T> p_259759_) {
       return registerDefaulted(p_259887_, p_259325_, Lifecycle.stable(), p_259759_);
    }
 
+   private static <T> DefaultedRegistry<T> forge(ResourceKey<? extends Registry<T>> key, String defKey, BuiltInRegistries.RegistryBootstrap<T> def) {
+      return forge(key, defKey, Lifecycle.stable(), def);
+   }
+
    private static <T> DefaultedRegistry<T> registerDefaultedWithIntrusiveHolders(ResourceKey<? extends Registry<T>> p_259296_, String p_259101_, BuiltInRegistries.RegistryBootstrap<T> p_259485_) {
       return registerDefaultedWithIntrusiveHolders(p_259296_, p_259101_, Lifecycle.stable(), p_259485_);
    }
@@ -305,10 +_,19 @@
       return internalRegister(p_259121_, new MappedRegistry<>(p_259121_, p_259977_, false), p_259874_, p_259977_);
    }
 
+   private static <T> Registry<T> forge(ResourceKey<? extends Registry<T>> key, Lifecycle cycle, BuiltInRegistries.RegistryBootstrap<T> def) {
+      return internalRegister(key, net.minecraftforge.registries.GameData.getWrapper(key, cycle), def, cycle);
+   }
+
    private static <T> DefaultedRegistry<T> registerDefaulted(ResourceKey<? extends Registry<T>> p_259400_, String p_259678_, Lifecycle p_259157_, BuiltInRegistries.RegistryBootstrap<T> p_259806_) {
       return internalRegister(p_259400_, new DefaultedMappedRegistry<>(p_259678_, p_259400_, p_259157_, false), p_259806_, p_259157_);
    }
 
+   @SuppressWarnings("unchecked")
+   private static <T> DefaultedRegistry<T> forge(ResourceKey<? extends Registry<T>> key, String defKey, Lifecycle cycle, BuiltInRegistries.RegistryBootstrap<T> def) {
+      return (DefaultedRegistry<T>) internalRegister(key, net.minecraftforge.registries.GameData.getWrapper(key, cycle, defKey), def, cycle);
+   }
+
    private static <T> DefaultedRegistry<T> registerDefaultedWithIntrusiveHolders(ResourceKey<? extends Registry<T>> p_260010_, String p_260220_, Lifecycle p_260139_, BuiltInRegistries.RegistryBootstrap<T> p_260185_) {
       return internalRegister(p_260010_, new DefaultedMappedRegistry<>(p_260220_, p_260010_, p_260139_, true), p_260185_, p_260139_);
    }
@@ -354,7 +_,7 @@
 
          if (p_259410_ instanceof DefaultedRegistry) {
             ResourceLocation resourcelocation = ((DefaultedRegistry)p_259410_).getDefaultKey();
-            Validate.notNull(p_259410_.get(resourcelocation), "Missing default of DefaultedMappedRegistry: " + resourcelocation);
+            Validate.notNull(p_259410_.get(resourcelocation), "Missing default of DefaultedMappedRegistry: " + p_260209_.key() + ", Entry: " + resourcelocation);
          }
 
       });
