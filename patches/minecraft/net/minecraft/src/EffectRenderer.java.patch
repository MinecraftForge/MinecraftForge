--- ../src_base/minecraft/net/minecraft/src/EffectRenderer.java
+++ ../src_work/minecraft/net/minecraft/src/EffectRenderer.java
@@ -3,9 +3,19 @@
 import cpw.mods.fml.common.Side;
 import cpw.mods.fml.common.asm.SideOnly;
 import java.util.ArrayList;
+import java.util.Hashtable;
+import java.util.Iterator;
 import java.util.List;
+import java.util.Map.Entry;
 import java.util.Random;
+
+import net.minecraftforge.client.ForgeHooksClient;
+import net.minecraftforge.common.ForgeHooks;
+import com.google.common.collect.ArrayListMultimap;
+import com.google.common.collect.Multimap;
+
 import org.lwjgl.opengl.GL11;
+
 
 @SideOnly(Side.CLIENT)
 public class EffectRenderer
@@ -18,6 +28,8 @@
     /** RNG. */
     private Random rand = new Random();
 
+    private Multimap<String, EntityFX> effectList = ArrayListMultimap.create();
+
     public EffectRenderer(World par1World, RenderEngine par2RenderEngine)
     {
         if (par1World != null)
@@ -52,12 +64,27 @@
             for (int var2 = 0; var2 < this.fxLayers[var1].size(); ++var2)
             {
                 EntityFX var3 = (EntityFX)this.fxLayers[var1].get(var2);
-                var3.onUpdate();
-
-                if (var3.isDead)
+
+                if (var3 != null)
+                {
+                    var3.onUpdate();
+                }
+
+                if (var3 == null || var3.isDead)
                 {
                     this.fxLayers[var1].remove(var2--);
                 }
+            }
+        }
+
+        Iterator<Entry<String, EntityFX>> itr = effectList.entries().iterator();
+        while (itr.hasNext())
+        {
+            EntityFX fx = itr.next().getValue();
+            fx.onUpdate();
+            if (fx.isDead)
+            {
+                itr.remove();
             }
         }
     }
@@ -105,12 +132,34 @@
                 for (int var11 = 0; var11 < this.fxLayers[var8].size(); ++var11)
                 {
                     EntityFX var12 = (EntityFX)this.fxLayers[var8].get(var11);
+                    if (var12 == null) continue;
                     var10.setBrightness(var12.getBrightnessForRender(par2));
                     var12.renderParticle(var10, par2, var3, var7, var4, var5, var6);
                 }
 
                 var10.draw();
             }
+        }
+
+        for (String key : effectList.keySet())
+        {
+            ForgeHooksClient.bindTexture(key, 0);
+            for (EntityFX entry : effectList.get(key))
+            {
+                if (entry == null) continue;
+                Tessellator tessallator = Tessellator.instance;
+                //GL11.glBindTexture(GL11.GL_TEXTURE_2D, renderer.getTexture(key));
+                tessallator.startDrawingQuads();
+    
+                if (entry.getFXLayer() != 3)
+                {
+                    tessallator.setBrightness(entry.getBrightnessForRender(par2));
+                    entry.renderParticle(tessallator, par2, var3, var7, var4, var5, var6);
+                }
+    
+                tessallator.draw();
+            }
+            ForgeHooksClient.unbindTexture();
         }
     }
 
@@ -130,6 +179,7 @@
             for (int var11 = 0; var11 < this.fxLayers[var9].size(); ++var11)
             {
                 EntityFX var12 = (EntityFX)this.fxLayers[var9].get(var11);
+                if (var12 == null) continue;
                 var10.setBrightness(var12.getBrightnessForRender(par2));
                 var12.renderParticle(var10, par2, var4, var8, var5, var6, var7);
             }
@@ -144,13 +194,15 @@
         {
             this.fxLayers[var2].clear();
         }
+
+        effectList.clear();
     }
 
     public void addBlockDestroyEffects(int par1, int par2, int par3, int par4, int par5)
     {
-        if (par4 != 0)
-        {
-            Block var6 = Block.blocksList[par4];
+        Block var6 = Block.blocksList[par4];
+        if (var6 != null && !var6.addBlockDestroyEffects(worldObj, par1, par2, par3, par5, this))
+        {
             byte var7 = 4;
 
             for (int var8 = 0; var8 < var7; ++var8)
@@ -163,7 +215,7 @@
                         double var13 = (double)par2 + ((double)var9 + 0.5D) / (double)var7;
                         double var15 = (double)par3 + ((double)var10 + 0.5D) / (double)var7;
                         int var17 = this.rand.nextInt(6);
-                        this.addEffect((new EntityDiggingFX(this.worldObj, var11, var13, var15, var11 - (double)par1 - 0.5D, var13 - (double)par2 - 0.5D, var15 - (double)par3 - 0.5D, var6, var17, par5)).func_70596_a(par1, par2, par3));
+                        this.addEffect((new EntityDiggingFX(this.worldObj, var11, var13, var15, var11 - (double)par1 - 0.5D, var13 - (double)par2 - 0.5D, var15 - (double)par3 - 0.5D, var6, var17, par5)).func_70596_a(par1, par2, par3), var6);
                     }
                 }
             }
@@ -215,12 +267,60 @@
                 var8 = (double)par1 + var6.func_83007_w() + (double)var7;
             }
 
-            this.addEffect((new EntityDiggingFX(this.worldObj, var8, var10, var12, 0.0D, 0.0D, 0.0D, var6, par4, this.worldObj.getBlockMetadata(par1, par2, par3))).func_70596_a(par1, par2, par3).multiplyVelocity(0.2F).multipleParticleScaleBy(0.6F));
+            this.addEffect((new EntityDiggingFX(this.worldObj, var8, var10, var12, 0.0D, 0.0D, 0.0D, var6, par4, this.worldObj.getBlockMetadata(par1, par2, par3))).func_70596_a(par1, par2, par3).multiplyVelocity(0.2F).multipleParticleScaleBy(0.6F), var6);
         }
     }
 
     public String getStatistics()
     {
-        return "" + (this.fxLayers[0].size() + this.fxLayers[1].size() + this.fxLayers[2].size());
+        int size = 0;
+        for (List x : fxLayers)
+        {
+            size += x.size();
+        }
+        size += effectList.size();
+        return Integer.toString(size);
+    }
+
+    public void addEffect(EntityFX effect, Object obj)
+    {
+        if (obj == null || !(obj instanceof Block || obj instanceof Item))
+        {
+            addEffect(effect);
+            return;
+        }
+
+        if (obj instanceof Item && ((Item)obj).isDefaultTexture)
+        {
+            addEffect(effect);
+            return;
+        }
+
+        if (obj instanceof Block && ((Block)obj).isDefaultTexture)
+        {
+            addEffect(effect);
+            return;
+        }
+
+        String texture = "/terrain.png";
+        if (effect.getFXLayer() == 0)
+        {
+            texture = "/particles.png";
+        }
+        else if (effect.getFXLayer() == 2)
+        {
+            texture = "/gui/items.png";
+        }        
+        texture = ForgeHooks.getTexture(texture, obj);
+        effectList.put(texture, effect);
+    }
+
+    public void addBlockHitEffects(int x, int y, int z, MovingObjectPosition target)
+    {
+        Block block = Block.blocksList[worldObj.getBlockId(x, y, z)];
+        if (block != null && !block.addBlockHitEffects(worldObj, target, this))
+        {
+            addBlockHitEffects(x, y, z, target.sideHit);
+        }
     }
 }
