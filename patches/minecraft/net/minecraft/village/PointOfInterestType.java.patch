--- a/net/minecraft/village/PointOfInterestType.java
+++ b/net/minecraft/village/PointOfInterestType.java
@@ -21,7 +_,7 @@
 import net.minecraft.util.Util;
 import net.minecraft.util.registry.Registry;
 
-public class PointOfInterestType {
+public class PointOfInterestType extends net.minecraftforge.registries.ForgeRegistryEntry<PointOfInterestType> {
    private static final Supplier<Set<PointOfInterestType>> ALL_JOB_POI_TYPES = Suppliers.memoize(() -> {
       return Registry.VILLAGER_PROFESSION.stream().map(VillagerProfession::getJobPoiType).collect(Collectors.toSet());
    });
@@ -36,7 +_,7 @@
    }).filter((p_234173_0_) -> {
       return p_234173_0_.getValue(BedBlock.PART) == BedPart.HEAD;
    }).collect(ImmutableSet.toImmutableSet());
-   private static final Map<BlockState, PointOfInterestType> TYPE_BY_STATE = Maps.newHashMap();
+   private static final Map<BlockState, PointOfInterestType> TYPE_BY_STATE = net.minecraftforge.registries.GameData.getBlockStatePointOfInterestTypeMap();
    public static final PointOfInterestType UNEMPLOYED = register("unemployed", ImmutableSet.of(), 1, ALL_JOBS, 1);
    public static final PointOfInterestType ARMORER = register("armorer", getBlockStates(Blocks.BLAST_FURNACE), 1, 1);
    public static final PointOfInterestType BUTCHER = register("butcher", getBlockStates(Blocks.SMOKER), 1, 1);
@@ -112,16 +_,14 @@
    }
 
    private static PointOfInterestType registerBlockStates(PointOfInterestType p_221052_0_) {
-      p_221052_0_.matchingStates.forEach((p_234169_1_) -> {
-         PointOfInterestType pointofinteresttype = TYPE_BY_STATE.put(p_234169_1_, p_221052_0_);
-         if (pointofinteresttype != null) {
-            throw (IllegalStateException)Util.pauseInIde(new IllegalStateException(String.format("%s is defined in too many tags", p_234169_1_)));
-         }
-      });
       return p_221052_0_;
    }
 
    public static Optional<PointOfInterestType> forState(BlockState p_221047_0_) {
       return Optional.ofNullable(TYPE_BY_STATE.get(p_221047_0_));
+   }
+   
+   public ImmutableSet<BlockState> getBlockStates() {
+      return ImmutableSet.copyOf(this.matchingStates);
    }
 }
