--- a/net/minecraft/loot/LootTable.java
+++ b/net/minecraft/loot/LootTable.java
@@ -31,13 +_,13 @@
    public static final LootTable EMPTY = new LootTable(LootParameterSets.EMPTY, new LootPool[0], new ILootFunction[0]);
    public static final LootParameterSet DEFAULT_PARAM_SET = LootParameterSets.ALL_PARAMS;
    private final LootParameterSet paramSet;
-   private final LootPool[] pools;
+   private final List<LootPool> pools;
    private final ILootFunction[] functions;
    private final BiFunction<ItemStack, LootContext, ItemStack> compositeFunction;
 
    private LootTable(LootParameterSet p_i51265_1_, LootPool[] p_i51265_2_, ILootFunction[] p_i51265_3_) {
       this.paramSet = p_i51265_1_;
-      this.pools = p_i51265_2_;
+      this.pools = Lists.newArrayList(p_i51265_2_);
       this.functions = p_i51265_3_;
       this.compositeFunction = LootFunctionManager.compose(p_i51265_3_);
    }
@@ -75,6 +_,7 @@
 
    }
 
+   @Deprecated //Use other method or manually call ForgeHooks.modifyLoot
    public void getRandomItems(LootContext p_216120_1_, Consumer<ItemStack> p_216120_2_) {
       this.getRandomItemsRaw(p_216120_1_, createStackSplitter(p_216120_2_));
    }
@@ -82,6 +_,7 @@
    public List<ItemStack> getRandomItems(LootContext p_216113_1_) {
       List<ItemStack> list = Lists.newArrayList();
       this.getRandomItems(p_216113_1_, list::add);
+      list = net.minecraftforge.common.ForgeHooks.modifyLoot(this.getLootTableId(), list, p_216113_1_);
       return list;
    }
 
@@ -90,8 +_,8 @@
    }
 
    public void validate(ValidationTracker p_227506_1_) {
-      for(int i = 0; i < this.pools.length; ++i) {
-         this.pools[i].validate(p_227506_1_.forChild(".pools[" + i + "]"));
+      for(int i = 0; i < this.pools.size(); ++i) {
+         this.pools.get(i).validate(p_227506_1_.forChild(".pools[" + i + "]"));
       }
 
       for(int j = 0; j < this.functions.length; ++j) {
@@ -173,6 +_,48 @@
       return new LootTable.Builder();
    }
 
+   //======================== FORGE START =============================================
+   private boolean isFrozen = false;
+   public void freeze() {
+      this.isFrozen = true;
+      this.pools.forEach(LootPool::freeze);
+   }
+   public boolean isFrozen(){ return this.isFrozen; }
+   private void checkFrozen() {
+      if (this.isFrozen())
+         throw new RuntimeException("Attempted to modify LootTable after being finalized!");
+   }
+
+   private ResourceLocation lootTableId;
+   public void setLootTableId(final ResourceLocation id) {
+      if (this.lootTableId != null) throw new IllegalStateException("Attempted to rename loot table from '" + this.lootTableId + "' to '" + id + "': this is not supported");
+      this.lootTableId = java.util.Objects.requireNonNull(id);
+   }
+   public ResourceLocation getLootTableId() { return this.lootTableId; }
+
+   public LootPool getPool(String name) {
+      return pools.stream().filter(e -> name.equals(e.getName())).findFirst().orElse(null);
+   }
+
+   public LootPool removePool(String name) {
+      checkFrozen();
+      for (LootPool pool : this.pools) {
+         if (name.equals(pool.getName())) {
+            this.pools.remove(pool);
+            return pool;
+         }
+      }
+      return null;
+   }
+
+   public void addPool(LootPool pool) {
+      checkFrozen();
+      if (pools.stream().anyMatch(e -> e == pool || e.getName() != null && e.getName().equals(pool.getName())))
+         throw new RuntimeException("Attempted to add a duplicate pool to loot table: " + pool.getName());
+      this.pools.add(pool);
+   }
+   //======================== FORGE END ===============================================
+
    public static class Builder implements ILootFunctionConsumer<LootTable.Builder> {
       private final List<LootPool> pools = Lists.newArrayList();
       private final List<ILootFunction> functions = Lists.newArrayList();
@@ -227,7 +_,7 @@
             }
          }
 
-         if (p_serialize_1_.pools.length > 0) {
+         if (!p_serialize_1_.pools.isEmpty()) {
             jsonobject.add("pools", p_serialize_3_.serialize(p_serialize_1_.pools));
          }
 
