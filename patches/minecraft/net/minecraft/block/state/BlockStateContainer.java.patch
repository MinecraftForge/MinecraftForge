--- ../src-base/minecraft/net/minecraft/block/state/BlockStateContainer.java
+++ ../src-work/minecraft/net/minecraft/block/state/BlockStateContainer.java
@@ -57,12 +57,22 @@
 
     public BlockStateContainer(Block p_i45663_1_, IProperty<?>... p_i45663_2_)
     {
-        this.field_177627_c = p_i45663_1_;
+        this(p_i45663_1_, p_i45663_2_, null);
+    }
+
+    protected StateImplementation createState(Block block, ImmutableMap<IProperty<?>, Comparable<?>> properties, ImmutableMap<net.minecraftforge.common.property.IUnlistedProperty<?>, com.google.common.base.Optional<?>> unlistedProperties)
+    {
+        return new StateImplementation(block, properties);
+    }
+
+    protected BlockStateContainer(Block blockIn, IProperty<?>[] properties, ImmutableMap<net.minecraftforge.common.property.IUnlistedProperty<?>, com.google.common.base.Optional<?>> unlistedProperties)
+    {
+        this.field_177627_c = blockIn;
         Map < String, IProperty<? >> map = Maps. < String, IProperty<? >> newHashMap();
 
-        for (IProperty<?> iproperty : p_i45663_2_)
+        for (IProperty<?> iproperty : properties)
         {
-            func_185919_a(p_i45663_1_, iproperty);
+            func_185919_a(blockIn, iproperty);
             map.put(iproperty.func_177701_a(), iproperty);
         }
 
@@ -73,7 +83,7 @@
         for (List < Comparable<? >> list : Cartesian.func_179321_a(this.func_177620_e()))
         {
             Map < IProperty<?>, Comparable<? >> map1 = MapPopulator. < IProperty<?>, Comparable<? >> func_179400_b(this.field_177624_d.values(), list);
-            BlockStateContainer.StateImplementation blockstatecontainer$stateimplementation = new BlockStateContainer.StateImplementation(p_i45663_1_, ImmutableMap.copyOf(map1));
+            BlockStateContainer.StateImplementation blockstatecontainer$stateimplementation = createState(blockIn, ImmutableMap.copyOf(map1), unlistedProperties);
             map2.put(map1, blockstatecontainer$stateimplementation);
             list1.add(blockstatecontainer$stateimplementation);
         }
@@ -165,6 +175,13 @@
                 this.field_177237_b = p_i45660_2_;
             }
 
+            protected StateImplementation(Block blockIn, ImmutableMap<IProperty<?>, Comparable<?>> propertiesIn, ImmutableTable<IProperty<?>, Comparable<?>, IBlockState> propertyValueTable)
+            {
+                this.field_177239_a = blockIn;
+                this.field_177237_b = propertiesIn;
+                this.field_177238_c = propertyValueTable;
+            }
+
             public Collection < IProperty<? >> func_177227_a()
             {
                 return Collections. < IProperty<? >> unmodifiableCollection(this.field_177237_b.keySet());
@@ -445,5 +462,86 @@
             {
                 this.field_177239_a.func_189540_a(this, p_189546_1_, p_189546_2_, p_189546_3_);
             }
+
+            //Forge Start
+            public ImmutableTable<IProperty<?>, Comparable<?>, IBlockState> getPropertyValueTable()
+            {
+                return field_177238_c;
+            }
+
+            @Override
+            public int getLightOpacity(IBlockAccess world, BlockPos pos)
+            {
+                return this.field_177239_a.getLightOpacity(this, world, pos);
+            }
+
+            @Override
+            public int getLightValue(IBlockAccess world, BlockPos pos)
+            {
+                return this.field_177239_a.getLightValue(this, world, pos);
+            }
+
+            public boolean isSideSolid(IBlockAccess world, BlockPos pos, EnumFacing side)
+            {
+                return this.field_177239_a.isSideSolid(this, world, pos, side);
+            }
+
+            @Override
+            public boolean doesSideBlockRendering(IBlockAccess world, BlockPos pos, EnumFacing side)
+            {
+                return this.field_177239_a.doesSideBlockRendering(this, world, pos, side);
+            }
         }
+
+    /**
+     * Forge added class to make building things easier.
+     * Will return an instance of BlockStateContainer appropriate for
+     * the list of properties passed in.
+     *
+     * Example usage:
+     *
+     *   protected BlockStateContainer createBlockState()
+     *   {
+     *       return (new BlockStateContainer.Builder(this)).add(FACING).add(SOME_UNLISTED).build();
+     *   }
+     *
+     */
+    public static class Builder
+    {
+        private final Block block;
+        private final List<IProperty<?>> listed = Lists.newArrayList();
+        private final List<net.minecraftforge.common.property.IUnlistedProperty<?>> unlisted = Lists.newArrayList();
+
+        public Builder(Block block)
+        {
+            this.block = block;
+        }
+
+        public Builder add(IProperty<?>... props)
+        {
+            for (IProperty<?> prop : props)
+                this.listed.add(prop);
+            return this;
+        }
+
+        public Builder add(net.minecraftforge.common.property.IUnlistedProperty<?>... props)
+        {
+            for (net.minecraftforge.common.property.IUnlistedProperty<?> prop : props)
+                this.unlisted.add(prop);
+            return this;
+        }
+
+        public BlockStateContainer build()
+        {
+            IProperty<?>[] listed = new IProperty[this.listed.size()];
+            listed = this.listed.toArray(listed);
+            if (this.unlisted.size() == 0)
+                return new BlockStateContainer(this.block, listed);
+
+            net.minecraftforge.common.property.IUnlistedProperty<?>[] unlisted = new net.minecraftforge.common.property.IUnlistedProperty[this.unlisted.size()];
+            unlisted = this.unlisted.toArray(unlisted);
+
+            return new net.minecraftforge.common.property.ExtendedBlockState(this.block, listed, unlisted);
+        }
+    }
 }
