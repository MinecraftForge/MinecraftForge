--- a/net/minecraft/block/Block.java
+++ b/net/minecraft/block/Block.java
@@ -52,9 +52,10 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class Block extends AbstractBlock implements IItemProvider {
+public class Block extends AbstractBlock implements IItemProvider, net.minecraftforge.common.extensions.IForgeBlock {
    protected static final Logger field_196273_d = LogManager.getLogger();
-   public static final ObjectIntIdentityMap<BlockState> field_176229_d = new ObjectIntIdentityMap<>();
+   @Deprecated //Forge: Do not use, use GameRegistry
+   public static final ObjectIntIdentityMap<BlockState> field_176229_d = net.minecraftforge.registries.GameData.getBlockStateIDMap();
    private static final LoadingCache<VoxelShape, Boolean> field_223006_b = CacheBuilder.newBuilder().maximumSize(512L).weakKeys().build(new CacheLoader<VoxelShape, Boolean>() {
       public Boolean load(VoxelShape p_load_1_) {
          return !VoxelShapes.func_197879_c(VoxelShapes.func_197868_b(), p_load_1_, IBooleanFunction.field_223236_g_);
@@ -270,7 +271,7 @@
    }
 
    public static void func_180635_a(World p_180635_0_, BlockPos p_180635_1_, ItemStack p_180635_2_) {
-      if (!p_180635_0_.field_72995_K && !p_180635_2_.func_190926_b() && p_180635_0_.func_82736_K().func_223586_b(GameRules.field_223603_f)) {
+      if (!p_180635_0_.field_72995_K && !p_180635_2_.func_190926_b() && p_180635_0_.func_82736_K().func_223586_b(GameRules.field_223603_f) && !p_180635_0_.restoringBlockSnapshots) {
          float f = 0.5F;
          double d0 = (double)(p_180635_0_.field_73012_v.nextFloat() * 0.5F) + 0.25D;
          double d1 = (double)(p_180635_0_.field_73012_v.nextFloat() * 0.5F) + 0.25D;
@@ -282,7 +283,7 @@
    }
 
    public void func_180637_b(World p_180637_1_, BlockPos p_180637_2_, int p_180637_3_) {
-      if (!p_180637_1_.field_72995_K && p_180637_1_.func_82736_K().func_223586_b(GameRules.field_223603_f)) {
+      if (!p_180637_1_.field_72995_K && p_180637_1_.func_82736_K().func_223586_b(GameRules.field_223603_f) && !p_180637_1_.restoringBlockSnapshots) {
          while(p_180637_3_ > 0) {
             int i = ExperienceOrbEntity.func_70527_a(p_180637_3_);
             p_180637_3_ -= i;
@@ -292,6 +293,7 @@
 
    }
 
+   @Deprecated //Forge: Use more sensitive version
    public float func_149638_a() {
       return this.field_235689_au_;
    }
@@ -341,6 +343,7 @@
       p_176216_2_.func_213317_d(p_176216_2_.func_213322_ci().func_216372_d(1.0D, 0.0D, 1.0D));
    }
 
+   @Deprecated //Forge: Use more sensitive version
    public ItemStack func_185473_a(IBlockReader p_185473_1_, BlockPos p_185473_2_, BlockState p_185473_3_) {
       return new ItemStack(this);
    }
@@ -372,6 +375,7 @@
    public void func_176224_k(World p_176224_1_, BlockPos p_176224_2_) {
    }
 
+   @Deprecated //Forge: Use more sensitive version
    public boolean func_149659_a(Explosion p_149659_1_) {
       return true;
    }
@@ -391,6 +395,7 @@
       return this.field_196275_y;
    }
 
+   @Deprecated //Forge: Use more sensitive version {@link IForgeBlockState#getSoundType(IWorldReader, BlockPos, Entity) }
    public SoundType func_220072_p(BlockState p_220072_1_) {
       return this.field_149762_H;
    }
@@ -400,7 +405,7 @@
          this.field_220086_i = Item.func_150898_a(this);
       }
 
-      return this.field_220086_i;
+      return this.field_220086_i.delegate.get(); //Forge: Vanilla caches the items, update with registry replacements.
    }
 
    public boolean func_208619_r() {
@@ -408,7 +413,7 @@
    }
 
    public String toString() {
-      return "Block{" + Registry.field_212618_g.func_177774_c(this) + "}";
+      return "Block{" + getRegistryName() + "}";
    }
 
    @OnlyIn(Dist.CLIENT)
@@ -419,6 +424,41 @@
       return this;
    }
 
+   /* ======================================== FORGE START =====================================*/
+   protected Random RANDOM = new Random();
+   private net.minecraftforge.common.ToolType harvestTool;
+   private int harvestLevel;
+   private final net.minecraftforge.common.util.ReverseTagWrapper<Block> reverseTags = new net.minecraftforge.common.util.ReverseTagWrapper<>(this, BlockTags::func_199896_a);
+
+   @Override
+   public float getSlipperiness(BlockState state, IWorldReader world, BlockPos pos, @Nullable Entity entity) {
+      return this.field_149765_K;
+   }
+
+   @Nullable
+   @Override
+   public net.minecraftforge.common.ToolType getHarvestTool(BlockState state) {
+      return harvestTool; //TODO: RE-Evaluate
+   }
+
+   @Override
+   public int getHarvestLevel(BlockState state) {
+     return harvestLevel; //TODO: RE-Evaluate
+   }
+
+  @Override
+  public final java.util.Set<net.minecraft.util.ResourceLocation> getTags() {
+     return reverseTags.getTagNames();
+  }
+
+  static {
+      net.minecraftforge.common.ForgeHooks.setBlockToolSetter((block, tool, level) -> {
+            block.harvestTool = tool;
+            block.harvestLevel = level;
+      });
+  }
+   /* ========================================= FORGE END ======================================*/
+
    public static final class RenderSideCacheKey {
       private final BlockState field_212164_a;
       private final BlockState field_212165_b;
