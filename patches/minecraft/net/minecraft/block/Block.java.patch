--- a/net/minecraft/block/Block.java
+++ b/net/minecraft/block/Block.java
@@ -74,10 +74,10 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class Block implements IItemProvider {
+public class Block extends net.minecraftforge.registries.ForgeRegistryEntry<Block> implements IItemProvider, net.minecraftforge.common.extensions.IForgeBlock {
    protected static final Logger field_196273_d = LogManager.getLogger();
    private static final ResourceLocation field_176230_a = new ResourceLocation("air");
-   public static final RegistryNamespacedDefaultedByKey<ResourceLocation, Block> field_149771_c = new RegistryNamespacedDefaultedByKey<ResourceLocation, Block>(field_176230_a);
+   public static final RegistryNamespacedDefaultedByKey<ResourceLocation, Block> field_149771_c = net.minecraftforge.registries.GameData.getWrapperDefaulted(Block.class);
    public static final ObjectIntIdentityMap<IBlockState> field_176229_d = new ObjectIntIdentityMap<IBlockState>();
    protected final int field_149784_t;
    protected final float field_149782_v;
@@ -502,8 +502,8 @@
       if (f == -1.0F) {
          return 0.0F;
       } else {
-         int i = p_180647_2_.func_184823_b(p_180647_1_) ? 30 : 100;
-         return p_180647_2_.func_184813_a(p_180647_1_) / f / (float)i;
+         int i = net.minecraftforge.common.ForgeHooks.canHarvestBlock(p_180647_1_, p_180647_2_, p_180647_3_, p_180647_4_) ? 30 : 100;
+         return p_180647_2_.getDigSpeed(p_180647_1_, p_180647_4_) / f / (float)i;
       }
    }
 
@@ -625,6 +625,7 @@
 
    }
 
+   @Deprecated //Use state sensitive version
    protected boolean func_149700_E() {
       return this.func_176223_P().func_185917_h() && !this.func_149716_u();
    }
@@ -755,6 +756,7 @@
       }
    }
 
+   @Deprecated //Forge: Use more sensitive version {@link IForgeBlockState#getSoundType(IWorldReader, BlockPos, Entity) }
    public SoundType func_185467_w() {
       return this.field_149762_H;
    }
@@ -1604,4 +1606,56 @@
          return Objects.hash(this.field_212164_a, this.field_212165_b, this.field_212166_c);
       }
    }
+   /* ======================================== FORGE START =====================================*/
+   private ThreadLocal<IBlockState> silkCheck = new ThreadLocal<>();
+   private net.minecraftforge.common.ToolType harvestTool;
+   private int harvestLevel;
+   protected static ThreadLocal<Boolean> captureDrops = ThreadLocal.withInitial(() -> false);
+   protected static ThreadLocal<NonNullList<ItemStack>> capturedDrops = ThreadLocal.withInitial(NonNullList::func_191196_a);
+   protected NonNullList<ItemStack> captureDrops(boolean start)
+   {
+      if (start) {
+         captureDrops.set(true);
+         capturedDrops.get().clear();
+         return NonNullList.func_191196_a();
+      } else {
+         captureDrops.set(false);
+         return capturedDrops.get();
+      }
+   }
+
+   @Override
+   public float getSlipperiness(IBlockState state, IWorldReader world, BlockPos pos, @Nullable Entity entity) {
+      return this.field_149765_K;
+   }
+
+   @Override
+   public boolean canSilkHarvest(IBlockState state, IWorldReader world, BlockPos pos, EntityPlayer player) {
+      return this.func_149700_E() && !state.hasTileEntity();
+   }
+
+   @Override
+   public void onBlockExploded(IBlockState state, World world, BlockPos pos, Explosion explosion) {
+      world.func_175698_g(pos);
+      func_180652_a(world, pos, explosion);
+   }
+
+   @Nullable
+   @Override
+   public net.minecraftforge.common.ToolType getHarvestTool(IBlockState state) {
+      return harvestTool; //TODO: RE-Evaluate
+   }
+
+   @Override
+   public int getHarvestLevel(IBlockState state) {
+      return harvestLevel; //TODO: RE-Evaluate
+   }
+
+   static {
+      net.minecraftforge.common.ForgeHooks.setBlockToolSetter((block, tool, level) -> {
+         block.harvestTool = tool;
+         block.harvestLevel = level;
+      });
+   }
+   /* ========================================= FORGE END ======================================*/
 }
