--- ../src_base/minecraft/net/minecraft/block/BlockButton.java
+++ ../src_work/minecraft/net/minecraft/block/BlockButton.java
@@ -14,6 +14,13 @@
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 
+import net.minecraftforge.common.ForgeDirection;
+import static net.minecraftforge.common.ForgeDirection.*;
+// CraftBukkit start
+import org.bukkit.event.block.BlockRedstoneEvent;
+import org.bukkit.event.entity.EntityInteractEvent;
+// CraftBukkit end
+
 public abstract class BlockButton extends Block
 {
     /** Whether this button is sensible to arrows, used by wooden buttons. */
@@ -66,7 +73,11 @@
      */
     public boolean canPlaceBlockOnSide(World par1World, int par2, int par3, int par4, int par5)
     {
-        return par5 == 2 && par1World.isBlockNormalCube(par2, par3, par4 + 1) ? true : (par5 == 3 && par1World.isBlockNormalCube(par2, par3, par4 - 1) ? true : (par5 == 4 && par1World.isBlockNormalCube(par2 + 1, par3, par4) ? true : par5 == 5 && par1World.isBlockNormalCube(par2 - 1, par3, par4)));
+        ForgeDirection dir = ForgeDirection.getOrientation(par5);
+        return (dir == NORTH && par1World.isBlockSolidOnSide(par2, par3, par4 + 1, NORTH)) ||
+               (dir == SOUTH && par1World.isBlockSolidOnSide(par2, par3, par4 - 1, SOUTH)) ||
+               (dir == WEST  && par1World.isBlockSolidOnSide(par2 + 1, par3, par4, WEST)) ||
+               (dir == EAST  && par1World.isBlockSolidOnSide(par2 - 1, par3, par4, EAST));
     }
 
     /**
@@ -74,7 +85,10 @@
      */
     public boolean canPlaceBlockAt(World par1World, int par2, int par3, int par4)
     {
-        return par1World.isBlockNormalCube(par2 - 1, par3, par4) ? true : (par1World.isBlockNormalCube(par2 + 1, par3, par4) ? true : (par1World.isBlockNormalCube(par2, par3, par4 - 1) ? true : par1World.isBlockNormalCube(par2, par3, par4 + 1)));
+        return (par1World.isBlockSolidOnSide(par2 - 1, par3, par4, EAST)) ||
+               (par1World.isBlockSolidOnSide(par2 + 1, par3, par4, WEST)) ||
+               (par1World.isBlockSolidOnSide(par2, par3, par4 - 1, SOUTH)) ||
+               (par1World.isBlockSolidOnSide(par2, par3, par4 + 1, NORTH));
     }
 
     /**
@@ -86,19 +100,22 @@
         int k1 = j1 & 8;
         j1 &= 7;
 
-        if (par5 == 2 && par1World.isBlockNormalCube(par2, par3, par4 + 1))
+
+        ForgeDirection dir = ForgeDirection.getOrientation(par5);
+
+        if (dir == NORTH && par1World.isBlockSolidOnSide(par2, par3, par4 + 1, NORTH))
         {
             j1 = 4;
         }
-        else if (par5 == 3 && par1World.isBlockNormalCube(par2, par3, par4 - 1))
+        else if (dir == SOUTH && par1World.isBlockSolidOnSide(par2, par3, par4 - 1, SOUTH))
         {
             j1 = 3;
         }
-        else if (par5 == 4 && par1World.isBlockNormalCube(par2 + 1, par3, par4))
+        else if (dir == WEST && par1World.isBlockSolidOnSide(par2 + 1, par3, par4, WEST))
         {
             j1 = 2;
         }
-        else if (par5 == 5 && par1World.isBlockNormalCube(par2 - 1, par3, par4))
+        else if (dir == EAST && par1World.isBlockSolidOnSide(par2 - 1, par3, par4, EAST))
         {
             j1 = 1;
         }
@@ -115,7 +132,11 @@
      */
     private int getOrientation(World par1World, int par2, int par3, int par4)
     {
-        return par1World.isBlockNormalCube(par2 - 1, par3, par4) ? 1 : (par1World.isBlockNormalCube(par2 + 1, par3, par4) ? 2 : (par1World.isBlockNormalCube(par2, par3, par4 - 1) ? 3 : (par1World.isBlockNormalCube(par2, par3, par4 + 1) ? 4 : 1)));
+        if (par1World.isBlockSolidOnSide(par2 - 1, par3, par4, EAST)) return 1;
+        if (par1World.isBlockSolidOnSide(par2 + 1, par3, par4, WEST)) return 2;
+        if (par1World.isBlockSolidOnSide(par2, par3, par4 - 1, SOUTH)) return 3;
+        if (par1World.isBlockSolidOnSide(par2, par3, par4 + 1, NORTH)) return 4;
+        return 1;
     }
 
     /**
@@ -129,22 +150,22 @@
             int i1 = par1World.getBlockMetadata(par2, par3, par4) & 7;
             boolean flag = false;
 
-            if (!par1World.isBlockNormalCube(par2 - 1, par3, par4) && i1 == 1)
+            if (!par1World.isBlockSolidOnSide(par2 - 1, par3, par4, EAST) && i1 == 1)
             {
                 flag = true;
             }
 
-            if (!par1World.isBlockNormalCube(par2 + 1, par3, par4) && i1 == 2)
+            if (!par1World.isBlockSolidOnSide(par2 + 1, par3, par4, WEST) && i1 == 2)
             {
                 flag = true;
             }
 
-            if (!par1World.isBlockNormalCube(par2, par3, par4 - 1) && i1 == 3)
+            if (!par1World.isBlockSolidOnSide(par2, par3, par4 - 1, SOUTH) && i1 == 3)
             {
                 flag = true;
             }
 
-            if (!par1World.isBlockNormalCube(par2, par3, par4 + 1) && i1 == 4)
+            if (!par1World.isBlockSolidOnSide(par2, par3, par4 + 1, NORTH) && i1 == 4)
             {
                 flag = true;
             }
@@ -235,6 +256,18 @@
         }
         else
         {
+            // CraftBukkit start
+            org.bukkit.block.Block block = par1World.getWorld().getBlockAt(par2, par3, par4);
+            int old = (k1 != 8) ? 15 : 0;
+            int current = (k1 == 8) ? 15 : 0;
+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, old, current);
+            par1World.getServer().getPluginManager().callEvent(eventRedstone);
+
+            if ((eventRedstone.getNewCurrent() > 0) != (k1 == 8))
+            {
+                return true;
+            }
+            // CraftBukkit end
             par1World.setBlockMetadataWithNotify(par2, par3, par4, j1 + k1, 3);
             par1World.markBlockRangeForRenderUpdate(par2, par3, par4, par2, par3, par4);
             par1World.playSoundEffect((double)par2 + 0.5D, (double)par3 + 0.5D, (double)par4 + 0.5D, "random.click", 0.3F, 0.6F);
@@ -306,6 +339,16 @@
 
             if ((l & 8) != 0)
             {
+                // CraftBukkit start
+                org.bukkit.block.Block block = par1World.getWorld().getBlockAt(par2, par3, par4);
+                BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, 15, 0);
+                par1World.getServer().getPluginManager().callEvent(eventRedstone);
+
+                if (eventRedstone.getNewCurrent() > 0)
+                {
+                    return;
+                }
+                // CraftBukkit end
                 if (this.sensible)
                 {
                     this.func_82535_o(par1World, par2, par3, par4);
@@ -359,6 +402,34 @@
         List list = par1World.getEntitiesWithinAABB(EntityArrow.class, AxisAlignedBB.getAABBPool().getAABB((double)par2 + this.minX, (double)par3 + this.minY, (double)par4 + this.minZ, (double)par2 + this.maxX, (double)par3 + this.maxY, (double)par4 + this.maxZ));
         boolean flag1 = !list.isEmpty();
 
+        // CraftBukkit start - Call interact event when arrows turn on wooden buttons
+        if (flag != flag1 && flag1)
+        {
+            org.bukkit.block.Block block = par1World.getWorld().getBlockAt(par2, par3, par4);
+            boolean allowed = false;
+
+            // If all of the events are cancelled block the button press, else allow
+            for (Object object : list)
+            {
+                if (object != null)
+                {
+                    EntityInteractEvent event = new EntityInteractEvent(((Entity) object).getBukkitEntity(), block);
+                    par1World.getServer().getPluginManager().callEvent(event);
+
+                    if (!event.isCancelled())
+                    {
+                        allowed = true;
+                        break;
+                    }
+                }
+            }
+
+            if (!allowed)
+            {
+                return;
+            }
+        }
+        // CraftBukkit end
         if (flag1 && !flag)
         {
             par1World.setBlockMetadataWithNotify(par2, par3, par4, i1 | 8, 3);
