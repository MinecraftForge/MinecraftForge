--- a/net/minecraft/world/item/AxeItem.java
+++ b/net/minecraft/world/item/AxeItem.java
@@ -32,7 +_,8 @@
       Level level = p_40529_.getLevel();
       BlockPos blockpos = p_40529_.getClickedPos();
       Player player = p_40529_.getPlayer();
-      Optional<BlockState> optional = this.evaluateNewBlockState(level, blockpos, player, level.getBlockState(blockpos));
+      var modded = level.getBlockState(blockpos).getToolModifiedState(p_40529_, net.minecraftforge.common.ToolActions.AXE_STRIP, false);
+      Optional<BlockState> optional = modded != null ? Optional.of(modded) : this.evaluateNewBlockState(level, blockpos, player, level.getBlockState(blockpos));
       if (optional.isEmpty()) {
          return InteractionResult.PASS;
       } else {
@@ -79,9 +_,20 @@
       }
    }
 
+   @org.jetbrains.annotations.Nullable
+   public static BlockState getAxeStrippingState(BlockState originalState) {
+      Block block = STRIPPABLES.get(originalState.getBlock());
+      return block != null ? block.defaultBlockState().setValue(RotatedPillarBlock.AXIS, originalState.getValue(RotatedPillarBlock.AXIS)) : null;
+   }
+
    private Optional<BlockState> getStripped(BlockState p_150691_) {
       return Optional.ofNullable(STRIPPABLES.get(p_150691_.getBlock())).map((p_150689_) -> {
          return p_150689_.defaultBlockState().setValue(RotatedPillarBlock.AXIS, p_150691_.getValue(RotatedPillarBlock.AXIS));
       });
+   }
+
+   @Override
+   public boolean canPerformAction(ItemStack stack, net.minecraftforge.common.ToolAction toolAction) {
+      return net.minecraftforge.common.ToolActions.DEFAULT_AXE_ACTIONS.contains(toolAction);
    }
 }
