--- a/net/minecraft/world/item/RecordItem.java
+++ b/net/minecraft/world/item/RecordItem.java
@@ -20,15 +_,38 @@
 import net.minecraft.world.level.block.state.BlockState;
 
 public class RecordItem extends Item {
+   @Deprecated // Forge: refer to WorldRender#playRecord. Modders: there's no need to reflectively modify this map!
    private static final Map<SoundEvent, RecordItem> f_43032_ = Maps.newHashMap();
    private final int f_43033_;
+   @Deprecated // Forge: refer to soundSupplier
    private final SoundEvent f_43034_;
+   private final java.util.function.Supplier<SoundEvent> soundSupplier;
 
+   @Deprecated // Forge: Use the constructor that takes a supplier instead
    public RecordItem(int p_43037_, SoundEvent p_43038_, Item.Properties p_43039_) {
       super(p_43039_);
       this.f_43033_ = p_43037_;
       this.f_43034_ = p_43038_;
       f_43032_.put(this.f_43034_, this);
+      this.soundSupplier = this.f_43034_.delegate;
+   }
+
+   /**
+    * For mod use, allows to create a music disc without having to create a new
+    * SoundEvent before their registry event is fired.
+    *
+    * @param comparatorValue The value this music disc should output on the comparator. Must be between 0 and 15.
+    * @param soundSupplier A supplier that provides the sound that should be played. Use a
+    *                      {@link net.minecraftforge.fmllegacy.RegistryObject}{@code <SoundEvent>} or a
+    *                      {@link net.minecraftforge.registries.IRegistryDelegate} for this parameter.
+    * @param builder A set of {@link Item.Properties} that describe this item.
+    */
+   public RecordItem(int comparatorValue, java.util.function.Supplier<SoundEvent> soundSupplier, Item.Properties builder)
+   {
+      super(builder);
+      this.f_43033_ = comparatorValue;
+      this.f_43034_ = null;
+      this.soundSupplier = soundSupplier;
    }
 
    public InteractionResult m_6225_(UseOnContext p_43048_) {
@@ -71,6 +_,6 @@
    }
 
    public SoundEvent m_43051_() {
-      return this.f_43034_;
+      return this.soundSupplier.get();
    }
 }
