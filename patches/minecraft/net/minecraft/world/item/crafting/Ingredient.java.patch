--- a/net/minecraft/world/item/crafting/Ingredient.java
+++ b/net/minecraft/world/item/crafting/Ingredient.java
@@ -30,12 +_,19 @@
 import net.minecraft.world.level.ItemLike;
 
 public class Ingredient implements Predicate<ItemStack> {
+   //Because Mojang caches things... we need to invalidate them.. so... here we go..
+   private static final java.util.concurrent.atomic.AtomicInteger INVALIDATION_COUNTER = new java.util.concurrent.atomic.AtomicInteger();
+   public static void invalidateAll() {
+      INVALIDATION_COUNTER.incrementAndGet();
+   }
+
    public static final Ingredient f_43901_ = new Ingredient(Stream.empty());
    private final Ingredient.Value[] f_43902_;
    @Nullable
    private ItemStack[] f_43903_;
    @Nullable
    private IntList f_43904_;
+   private int invalidationCounter;
 
    protected Ingredient(Stream<? extends Ingredient.Value> p_43907_) {
       this.f_43902_ = p_43907_.toArray((p_43933_) -> {
@@ -72,7 +_,8 @@
    }
 
    public IntList m_43931_() {
-      if (this.f_43904_ == null) {
+      if (this.f_43904_ == null || checkInvalidation()) {
+         this.markValid();
          ItemStack[] aitemstack = this.m_43908_();
          this.f_43904_ = new IntArrayList(aitemstack.length);
 
@@ -87,6 +_,10 @@
    }
 
    public final void m_43923_(FriendlyByteBuf p_43924_) {
+      if (!this.isVanilla()) {
+         net.minecraftforge.common.crafting.CraftingHelper.write(p_43924_, this);
+         return;
+      }
       p_43924_.m_236828_(Arrays.asList(this.m_43908_()), FriendlyByteBuf::m_130055_);
    }
 
@@ -108,6 +_,38 @@
       return this.f_43902_.length == 0;
    }
 
+   public final boolean checkInvalidation() {
+      int currentInvalidationCounter = INVALIDATION_COUNTER.get();
+      if (this.invalidationCounter != currentInvalidationCounter) {
+         invalidate();
+         return true;
+      }
+      return false;
+   }
+
+   protected final void markValid() {
+      this.invalidationCounter = INVALIDATION_COUNTER.get();
+   }
+
+   protected void invalidate() {
+      this.f_43903_ = null;
+      this.f_43904_ = null;
+   }
+
+   public boolean isSimple() {
+      return true;
+   }
+
+   private final boolean isVanilla = this.getClass() == Ingredient.class;
+   public final boolean isVanilla() {
+       return isVanilla;
+   }
+
+   public net.minecraftforge.common.crafting.IIngredientSerializer<? extends Ingredient> getSerializer() {
+      if (!isVanilla()) throw new IllegalStateException("Modders must implement Ingredient.getSerializer in their custom Ingredients: " + this);
+      return net.minecraftforge.common.crafting.VanillaIngredientSerializer.INSTANCE;
+   }
+
    public static Ingredient m_43938_(Stream<? extends Ingredient.Value> p_43939_) {
       Ingredient ingredient = new Ingredient(p_43939_);
       return ingredient.m_43947_() ? f_43901_ : ingredient;
@@ -136,11 +_,15 @@
    }
 
    public static Ingredient m_43940_(FriendlyByteBuf p_43941_) {
-      return m_43938_(p_43941_.<ItemStack>m_236845_(FriendlyByteBuf::m_130267_).stream().map(Ingredient.ItemValue::new));
+      var size = p_43941_.m_130242_();
+      if (size == -1) return net.minecraftforge.common.crafting.CraftingHelper.getIngredient(p_43941_.m_130281_(), p_43941_);
+      return m_43938_(Stream.generate(() -> new Ingredient.ItemValue(p_43941_.m_130267_())).limit(size));
    }
 
    public static Ingredient m_43917_(@Nullable JsonElement p_43918_) {
       if (p_43918_ != null && !p_43918_.isJsonNull()) {
+         Ingredient ret = net.minecraftforge.common.crafting.CraftingHelper.getIngredient(p_43918_);
+         if (ret != null) return ret;
          if (p_43918_.isJsonObject()) {
             return m_43938_(Stream.of(m_43919_(p_43918_.getAsJsonObject())));
          } else if (p_43918_.isJsonArray()) {
@@ -175,6 +_,12 @@
       }
    }
 
+   //Merges several vanilla Ingredients together. As a quirk of how the json is structured, we can't tell if its a single Ingredient type or multiple so we split per item and re-merge here.
+   //Only public for internal use, so we can access a private field in here.
+   public static Ingredient merge(Collection<Ingredient> parts) {
+      return m_43938_(parts.stream().flatMap(i -> Arrays.stream(i.f_43902_)));
+   }
+
    public static class ItemValue implements Ingredient.Value {
       private final ItemStack f_43951_;
 
@@ -207,6 +_,9 @@
             list.add(new ItemStack(holder));
          }
 
+         if (list.size() == 0) {
+            list.add(new ItemStack(net.minecraft.world.level.block.Blocks.f_50375_).m_41714_(net.minecraft.network.chat.Component.m_237113_("Empty Tag: " + this.f_43959_.f_203868_())));
+         }
          return list;
       }
 
