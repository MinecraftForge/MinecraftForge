--- a/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/net/minecraft/world/item/crafting/RecipeManager.java
@@ -42,6 +_,12 @@
       super(f_44005_, "recipes");
    }
 
+   @Deprecated(forRemoval = true, since = "1.19.3")
+   public RecipeManager(net.minecraftforge.common.crafting.conditions.ICondition.IContext context) {
+      this();
+      this.conditionContext = context;
+   }
+
    protected void m_5787_(Map<ResourceLocation, JsonElement> p_44037_, ResourceManager p_44038_, ProfilerFiller p_44039_) {
       this.f_44008_ = false;
       Map<RecipeType<?>, ImmutableMap.Builder<ResourceLocation, Recipe<?>>> map = Maps.newHashMap();
@@ -49,9 +_,14 @@
 
       for(Map.Entry<ResourceLocation, JsonElement> entry : p_44037_.entrySet()) {
          ResourceLocation resourcelocation = entry.getKey();
+         if (resourcelocation.m_135815_().startsWith("_")) continue; //Forge: filter anything beginning with "_" as it's used for metadata.
 
          try {
-            Recipe<?> recipe = m_44045_(resourcelocation, GsonHelper.m_13918_(entry.getValue(), "top element"));
+            Recipe<?> recipe = fromJson(resourcelocation, GsonHelper.m_13918_(entry.getValue(), "top element"), conditionContext);
+            if (recipe == null) {
+               f_44006_.info("Skipping loading recipe {} as it's serializer returned null", resourcelocation);
+               continue;
+            }
             map.computeIfAbsent(recipe.m_6671_(), (p_44075_) -> {
                return ImmutableMap.builder();
             }).put(resourcelocation, recipe);
@@ -141,12 +_,21 @@
       });
    }
 
+   /** @deprecated Forge: use {@linkplain #fromJson(ResourceLocation, JsonObject, net.minecraftforge.common.crafting.conditions.ICondition.IContext) overload with context}. */
+   @Deprecated
    public static Recipe<?> m_44045_(ResourceLocation p_44046_, JsonObject p_44047_) {
+      return fromJson(p_44046_, p_44047_, net.minecraftforge.common.crafting.conditions.ICondition.IContext.EMPTY);
+   }
+
+   public static Recipe<?> fromJson(ResourceLocation p_44046_, JsonObject p_44047_, net.minecraftforge.common.crafting.conditions.ICondition.IContext context) {
       String s = GsonHelper.m_13906_(p_44047_, "type");
       return BuiltInRegistries.f_256769_.m_6612_(new ResourceLocation(s)).orElseThrow(() -> {
          return new JsonSyntaxException("Invalid or unsupported recipe type '" + s + "'");
-      }).m_6729_(p_44046_, p_44047_);
+      }).fromJson(p_44046_, p_44047_, context);
    }
+
+   @Override // TODO - 1.20: Change this to forge:conditions
+   protected String getConditionsMemberName() { return "conditions"; }
 
    public void m_44024_(Iterable<Recipe<?>> p_44025_) {
       this.f_44008_ = false;
