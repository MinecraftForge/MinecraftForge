--- a/net/minecraft/world/item/crafting/ShapedRecipe.java
+++ b/net/minecraft/world/item/crafting/ShapedRecipe.java
@@ -17,7 +_,20 @@
 import net.minecraft.world.level.Level;
 import org.apache.commons.lang3.NotImplementedException;
 
-public class ShapedRecipe implements CraftingRecipe {
+public class ShapedRecipe implements CraftingRecipe, net.minecraftforge.common.crafting.IShapedRecipe<CraftingContainer> {
+   static int MAX_WIDTH = 3;
+   static int MAX_HEIGHT = 3;
+   /**
+    * Expand the max width and height allowed in the deserializer.
+    * This should be called by modders who add custom crafting tables that are larger than the vanilla 3x3.
+    * @param width your max recipe width
+    * @param height your max recipe height
+    */
+   public static void setCraftingSize(int width, int height) {
+      if (MAX_WIDTH < width) MAX_WIDTH = width;
+      if (MAX_HEIGHT < height) MAX_HEIGHT = height;
+   }
+
    final int width;
    final int height;
    final NonNullList<Ingredient> recipeItems;
@@ -115,10 +_,20 @@
       return this.width;
    }
 
+   @Override
+   public int getRecipeWidth() {
+      return getWidth();
+   }
+
    public int getHeight() {
       return this.height;
    }
 
+   @Override
+   public int getRecipeHeight() {
+      return getHeight();
+   }
+
    @VisibleForTesting
    static String[] shrink(List<String> p_299210_) {
       int i = Integer.MAX_VALUE;
@@ -160,7 +_,7 @@
       return nonnulllist.isEmpty() || nonnulllist.stream().filter((p_151277_) -> {
          return !p_151277_.isEmpty();
       }).anyMatch((p_151273_) -> {
-         return p_151273_.getItems().length == 0;
+         return net.minecraftforge.common.ForgeHooks.hasNoElements(p_151273_);
       });
    }
 
@@ -182,9 +_,9 @@
 
    public static class Serializer implements RecipeSerializer<ShapedRecipe> {
       static final Codec<List<String>> PATTERN_CODEC = Codec.STRING.listOf().flatXmap((p_297814_) -> {
-         if (p_297814_.size() > 3) {
+         if (p_297814_.size() > MAX_HEIGHT) {
             return DataResult.error(() -> {
-               return "Invalid pattern: too many rows, 3 is maximum";
+               return "Invalid pattern: too many rows, " + MAX_HEIGHT + " is maximum";
             });
          } else if (p_297814_.isEmpty()) {
             return DataResult.error(() -> {
@@ -194,9 +_,9 @@
             int i = p_297814_.get(0).length();
 
             for(String s : p_297814_) {
-               if (s.length() > 3) {
+               if (s.length() > MAX_WIDTH) {
                   return DataResult.error(() -> {
-                     return "Invalid pattern: too many columns, 3 is maximum";
+                     return "Invalid pattern: too many columns, " + MAX_WIDTH  + " is maximum";
                   });
                }
 
