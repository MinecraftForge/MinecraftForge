--- a/net/minecraft/world/item/ItemStack.java
+++ b/net/minecraft/world/item/ItemStack.java
@@ -92,7 +_,7 @@
 import org.apache.commons.lang3.mutable.MutableBoolean;
 import org.slf4j.Logger;
 
-public final class ItemStack implements DataComponentHolder {
+public final class ItemStack implements DataComponentHolder, net.minecraftforge.common.extensions.IForgeItemStack, net.minecraftforge.common.capabilities.ICapabilityProvider {
     public static final Codec<Holder<Item>> ITEM_NON_AIR_CODEC = BuiltInRegistries.ITEM
         .holderByNameCodec()
         .validate(
@@ -183,6 +_,7 @@
     final PatchedDataComponentMap components;
     @Nullable
     private Entity entityRepresentation;
+    private final net.minecraftforge.common.capabilities.ICapabilityProvider capabilityProvider;
 
     private static DataResult<ItemStack> validateStrict(ItemStack p_332181_) {
         DataResult<Unit> dataresult = validateComponents(p_332181_.getComponents());
@@ -255,11 +_,13 @@
         this.count = p_332766_;
         this.components = p_333722_;
         this.getItem().verifyComponentsAfterLoad(this);
+        this.capabilityProvider = p_331826_.asItem().capabilityFactoryManager.getWrapper(this);
     }
 
     private ItemStack(@Nullable Void p_282703_) {
         this.item = null;
         this.components = new PatchedDataComponentMap(DataComponentMap.EMPTY);
+        this.capabilityProvider = null;
     }
 
     public static DataResult<Unit> validateComponents(DataComponentMap p_336343_) {
@@ -335,13 +_,22 @@
     }
 
     public InteractionResult useOn(UseOnContext p_41662_) {
+        if (!p_41662_.getLevel().isClientSide) return net.minecraftforge.common.ForgeHooks.onPlaceItemIntoWorld(p_41662_);
+        return onItemUse(p_41662_, (c) -> getItem().useOn(p_41662_));
+    }
+
+    public InteractionResult onItemUseFirst(UseOnContext p_41662_) {
+        return onItemUse(p_41662_, (c) -> getItem().onItemUseFirst(this, p_41662_));
+    }
+
+    private InteractionResult onItemUse(UseOnContext p_41662_, java.util.function.Function<UseOnContext, InteractionResult> callback) {
         Player player = p_41662_.getPlayer();
         BlockPos blockpos = p_41662_.getClickedPos();
         if (player != null && !player.getAbilities().mayBuild && !this.canPlaceOnBlockInAdventureMode(new BlockInWorld(p_41662_.getLevel(), blockpos, false))) {
             return InteractionResult.PASS;
         } else {
             Item item = this.getItem();
-            InteractionResult interactionresult = item.useOn(p_41662_);
+            InteractionResult interactionresult = callback.apply(p_41662_);
             if (player != null && interactionresult.indicateItemUse()) {
                 player.awardStat(Stats.ITEM_USED.get(item));
             }
@@ -447,6 +_,10 @@
             }
 
             this.hurtAndBreak(p_41623_, p_41624_.getRandom(), p_41624_ instanceof ServerPlayer serverplayer ? serverplayer : null, () -> {
+                if (p_41624_ instanceof Player player) {
+                    net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(player, this, p_335324_);
+                    player.stopUsingItem(); // Forge: fix MC-168573
+                }
                 p_41624_.broadcastBreakEvent(p_335324_);
                 Item item = this.getItem();
                 this.shrink(1);
@@ -757,6 +_,8 @@
                 list.add(DISABLED_ITEM_TOOLTIP);
             }
 
+            net.minecraftforge.event.ForgeEventFactory.onItemTooltip(this, p_41652_, list, p_41653_);
+
             return list;
         }
     }
@@ -970,6 +_,7 @@
         this.getItem().onUseTick(p_41732_, p_41733_, this, p_41734_);
     }
 
+    /** @deprecated Forge: Use {@linkplain net.minecraftforge.common.extensions.IForgeItemStack#onDestroyed(ItemEntity, net.minecraft.world.damagesource.DamageSource) damage source sensitive version} */
     public void onDestroyed(ItemEntity p_150925_) {
         this.getItem().onDestroyed(p_150925_);
     }
@@ -988,5 +_,10 @@
 
     public boolean canBeHurtBy(DamageSource p_334859_) {
         return !this.has(DataComponents.FIRE_RESISTANT) || !p_334859_.is(DamageTypeTags.IS_FIRE);
+    }
+
+    @Override
+    public @org.jetbrains.annotations.NotNull <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(@org.jetbrains.annotations.NotNull net.minecraftforge.common.capabilities.Capability<T> cap, @org.jetbrains.annotations.Nullable net.minecraft.core.Direction side) {
+        return capabilityProvider == null ? net.minecraftforge.common.util.LazyOptional.empty() : capabilityProvider.getCapability(cap, side);
     }
 }
