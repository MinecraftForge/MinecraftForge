--- a/net/minecraft/world/item/CreativeModeTab.java
+++ b/net/minecraft/world/item/CreativeModeTab.java
@@ -31,16 +_,38 @@
    private Consumer<List<ItemStack>> searchTreeBuilder;
    private final Supplier<ItemStack> iconGenerator;
    private final CreativeModeTab.DisplayItemsGenerator displayItemsGenerator;
+   private net.minecraft.resources.ResourceLocation backgroundLocation;
+   private final boolean hasSearchBar;
+   private final int searchBarWidth;
+   private final int labelColor;
+   private final int slotColor;
+   public final List<net.minecraft.resources.ResourceLocation> tabsBefore;
+   public final List<net.minecraft.resources.ResourceLocation> tabsAfter;
 
-   CreativeModeTab(CreativeModeTab.Row p_260217_, int p_259557_, CreativeModeTab.Type p_260176_, Component p_260100_, Supplier<ItemStack> p_259543_, CreativeModeTab.DisplayItemsGenerator p_259085_) {
+   CreativeModeTab(CreativeModeTab.Row p_260217_, int p_259557_, CreativeModeTab.Type p_260176_, Component p_260100_, Supplier<ItemStack> p_259543_, CreativeModeTab.DisplayItemsGenerator p_259085_, net.minecraft.resources.ResourceLocation backgroundLocation, boolean hasSearchBar, int searchBarWidth, int labelColor, int slotColor, List<net.minecraft.resources.ResourceLocation> tabsBefore, List<net.minecraft.resources.ResourceLocation> tabsAfter) {
       this.row = p_260217_;
       this.column = p_259557_;
       this.displayName = p_260100_;
       this.iconGenerator = p_259543_;
       this.displayItemsGenerator = p_259085_;
       this.type = p_260176_;
-   }
-
+      this.backgroundLocation = backgroundLocation;
+      this.hasSearchBar = hasSearchBar;
+      this.searchBarWidth = searchBarWidth;
+      this.labelColor = labelColor;
+      this.slotColor = slotColor;
+      this.tabsBefore = List.copyOf(tabsBefore);
+      this.tabsAfter = List.copyOf(tabsAfter);
+   }
+
+   protected CreativeModeTab(CreativeModeTab.Builder builder) {
+      this(builder.row, builder.column, builder.type, builder.displayName, builder.iconGenerator, builder.displayItemsGenerator, builder.backgroundLocation, builder.hasSearchBar, builder.searchBarWidth, builder.labelColor, builder.slotColor, builder.tabsBefore, builder.tabsAfter);
+   }
+
+   public static CreativeModeTab.Builder builder() {
+      return new CreativeModeTab.Builder(Row.TOP, 0);
+   }
+   /** @deprecated Forge: use {@link #builder()} **/ @Deprecated
    public static CreativeModeTab.Builder builder(CreativeModeTab.Row p_259342_, int p_260312_) {
       return new CreativeModeTab.Builder(p_259342_, p_260312_);
    }
@@ -57,6 +_,10 @@
       return this.iconItemStack;
    }
 
+   /**
+    * Forge: Use {@link #getBackgroundLocation()} instead.
+    */
+   @Deprecated
    public String getBackgroundSuffix() {
       return this.backgroundSuffix;
    }
@@ -98,7 +_,7 @@
       ResourceKey<CreativeModeTab> resourcekey = BuiltInRegistries.CREATIVE_MODE_TAB.getResourceKey(this).orElseThrow(() -> {
          return new IllegalStateException("Unregistered creative tab: " + this);
       });
-      this.displayItemsGenerator.accept(p_270156_, creativemodetab$itemdisplaybuilder);
+      net.minecraftforge.common.ForgeHooks.onCreativeModeTabBuildContents(this, resourcekey, this.displayItemsGenerator, p_270156_, creativemodetab$itemdisplaybuilder);
       this.displayItems = creativemodetab$itemdisplaybuilder.tabContents;
       this.displayItemsSearchTab = creativemodetab$itemdisplaybuilder.searchTabContents;
       this.rebuildSearchTree();
@@ -127,6 +_,26 @@
 
    }
 
+   public net.minecraft.resources.ResourceLocation getBackgroundLocation() {
+      return backgroundLocation;
+   }
+
+   public boolean hasSearchBar() {
+      return this.hasSearchBar;
+   }
+
+   public int getSearchBarWidth() {
+      return searchBarWidth;
+   }
+
+   public int getLabelColor() {
+      return labelColor;
+   }
+
+   public int getSlotColor() {
+      return slotColor;
+   }
+
    public static class Builder {
       private static final CreativeModeTab.DisplayItemsGenerator EMPTY_GENERATOR = (p_270422_, p_259433_) -> {
       };
@@ -142,6 +_,15 @@
       private boolean alignedRight = false;
       private CreativeModeTab.Type type = CreativeModeTab.Type.CATEGORY;
       private String backgroundSuffix = "items.png";
+      @Nullable
+      private net.minecraft.resources.ResourceLocation backgroundLocation;
+      private boolean hasSearchBar = false;
+      private int searchBarWidth = 89;
+      private int labelColor = 4210752;
+      private int slotColor = -2130706433;
+      private java.util.function.Function<CreativeModeTab.Builder, CreativeModeTab> tabFactory = CreativeModeTab::new;
+      private final List<net.minecraft.resources.ResourceLocation> tabsBefore = new java.util.ArrayList<>();
+      private final List<net.minecraft.resources.ResourceLocation> tabsAfter = new java.util.ArrayList<>();
 
       public Builder(CreativeModeTab.Row p_259171_, int p_259661_) {
          this.row = p_259171_;
@@ -180,11 +_,87 @@
 
       protected CreativeModeTab.Builder type(CreativeModeTab.Type p_259283_) {
          this.type = p_259283_;
+         if (p_259283_ == Type.SEARCH)
+            return this.withSearchBar();
          return this;
       }
 
       public CreativeModeTab.Builder backgroundSuffix(String p_259981_) {
-         this.backgroundSuffix = p_259981_;
+         return withBackgroundLocation(new net.minecraft.resources.ResourceLocation("textures/gui/container/creative_inventory/tab_" + p_259981_));
+      }
+
+      /**
+       * Sets the location of the tab background.
+       */
+      public CreativeModeTab.Builder withBackgroundLocation(net.minecraft.resources.ResourceLocation background) {
+         this.backgroundLocation = background;
+         return this;
+      }
+
+      /**
+       * Gives this tab a search bar.
+       * <p>Note that, if using a custom {@link #withBackgroundLocation(net.minecraft.resources.ResourceLocation) background image}, you will need to make sure that your image contains the input box and the scroll bar.</p>
+       */
+      public CreativeModeTab.Builder withSearchBar() {
+         this.hasSearchBar = true;
+         if (this.backgroundLocation == null)
+            return this.backgroundSuffix("item_search.png");
+         return this;
+      }
+
+      /**
+       * Gives this tab a search bar, with a specific width.
+       * @param searchBarWidth the width of the search bar
+       */
+      public CreativeModeTab.Builder withSearchBar(int searchBarWidth) {
+         this.searchBarWidth = searchBarWidth;
+         return withSearchBar();
+      }
+
+      /**
+       * Sets the color of the tab label.
+       */
+      public CreativeModeTab.Builder withLabelColor(int labelColor) {
+          this.labelColor = labelColor;
+          return this;
+      }
+
+      /**
+       * Sets the color of tab's slots.
+       */
+      public CreativeModeTab.Builder withSlotColor(int slotColor) {
+          this.slotColor = slotColor;
+          return this;
+      }
+
+      public CreativeModeTab.Builder withTabFactory(java.util.function.Function<CreativeModeTab.Builder, CreativeModeTab> tabFactory) {
+         this.tabFactory = tabFactory;
+         return this;
+      }
+
+      /** Define tabs that should come <i>before</i> this tab. This tab will be placed <strong>after</strong> the {@code tabs}. **/
+      public CreativeModeTab.Builder withTabsBefore(net.minecraft.resources.ResourceLocation... tabs) {
+         this.tabsBefore.addAll(List.of(tabs));
+         return this;
+      }
+
+      /** Define tabs that should come <i>after</i> this tab. This tab will be placed <strong>before</strong> the {@code tabs}.**/
+      public CreativeModeTab.Builder withTabsAfter(net.minecraft.resources.ResourceLocation... tabs) {
+         this.tabsAfter.addAll(List.of(tabs));
+         return this;
+      }
+
+      /** Define tabs that should come <i>before</i> this tab. This tab will be placed <strong>after</strong> the {@code tabs}. **/
+      @SafeVarargs
+      public final CreativeModeTab.Builder withTabsBefore(net.minecraft.resources.ResourceKey<CreativeModeTab>... tabs) {
+         java.util.stream.Stream.of(tabs).map(net.minecraft.resources.ResourceKey::location).forEach(this.tabsBefore::add);
+         return this;
+      }
+
+      /** Define tabs that should come <i>after</i> this tab. This tab will be placed <strong>before</strong> the {@code tabs}.**/
+      @SafeVarargs
+      public final CreativeModeTab.Builder withTabsAfter(net.minecraft.resources.ResourceKey<CreativeModeTab>... tabs) {
+         java.util.stream.Stream.of(tabs).map(net.minecraft.resources.ResourceKey::location).forEach(this.tabsAfter::add);
          return this;
       }
 
@@ -192,11 +_,12 @@
          if ((this.type == CreativeModeTab.Type.HOTBAR || this.type == CreativeModeTab.Type.INVENTORY) && this.displayItemsGenerator != EMPTY_GENERATOR) {
             throw new IllegalStateException("Special tabs can't have display items");
          } else {
-            CreativeModeTab creativemodetab = new CreativeModeTab(this.row, this.column, this.type, this.displayName, this.iconGenerator, this.displayItemsGenerator);
+            CreativeModeTab creativemodetab = tabFactory.apply(this);
             creativemodetab.alignedRight = this.alignedRight;
             creativemodetab.showTitle = this.showTitle;
             creativemodetab.canScroll = this.canScroll;
             creativemodetab.backgroundSuffix = this.backgroundSuffix;
+            creativemodetab.backgroundLocation = this.backgroundLocation != null ? this.backgroundLocation : new net.minecraft.resources.ResourceLocation("textures/gui/container/creative_inventory/tab_" + this.backgroundSuffix);
             return creativemodetab;
          }
       }
