--- a/net/minecraft/world/item/Item.java
+++ b/net/minecraft/world/item/Item.java
@@ -54,9 +_,12 @@
 import net.minecraft.world.phys.Vec3;
 import org.slf4j.Logger;
 
-public class Item implements FeatureElement, ItemLike {
+public class Item implements FeatureElement, ItemLike, net.minecraftforge.common.extensions.IForgeItem {
     private static final Logger LOGGER = LogUtils.getLogger();
-    public static final Map<Block, Item> BY_BLOCK = Maps.newHashMap();
+
+    public static final net.minecraft.network.codec.StreamCodec<net.minecraft.network.RegistryFriendlyByteBuf, Holder<Item>> STREAM_CODEC =
+        net.minecraft.network.codec.ByteBufCodecs.holderRegistry(net.minecraft.core.registries.Registries.ITEM);
+    public static final Map<Block, Item> BY_BLOCK = net.minecraftforge.registries.GameData.ItemCallbacks.getBlockItemMap();
     public static final UUID BASE_ATTACK_DAMAGE_UUID = UUID.fromString("CB3F55D3-645C-4F38-A497-9C13A33DB5CF");
     public static final UUID BASE_ATTACK_SPEED_UUID = UUID.fromString("FA233E1C-4180-4865-B01B-BCCE9785ACA3");
     public static final int DEFAULT_MAX_STACK_SIZE = 64;
@@ -93,6 +_,7 @@
                 LOGGER.error("Item classes should end with Item and {} doesn't.", s);
             }
         }
+        initClient();
     }
 
     @Deprecated
@@ -100,17 +_,28 @@
         return this.builtInRegistryHolder;
     }
 
+    @Nullable
+    private DataComponentMap builtComponents = null;
+
     public DataComponentMap components() {
-        return this.components;
+        if (builtComponents == null) {
+            builtComponents = DataComponentMap.builder()
+                    .addAll(components)
+                    .addAll(net.minecraftforge.event.ForgeEventFactory.gatherItemComponents(this).getDataComponentMap())
+                    .build();
+        }
+
+        return builtComponents;
     }
 
     public int getDefaultMaxStackSize() {
-        return this.components.getOrDefault(DataComponents.MAX_STACK_SIZE, 1);
+        return builtComponents == null ? this.components.getOrDefault(DataComponents.MAX_STACK_SIZE, 1) : this.builtComponents.getOrDefault(DataComponents.MAX_STACK_SIZE, 1);
     }
 
     public void onUseTick(Level p_41428_, LivingEntity p_41429_, ItemStack p_41430_, int p_41431_) {
     }
 
+    /** @deprecated Forge: {@link net.minecraftforge.common.extensions.IForgeItem#onDestroyed(ItemEntity, DamageSource) Use damage source sensitive version} */
     public void onDestroyed(ItemEntity p_150887_) {
     }
 
@@ -232,10 +_,12 @@
     }
 
     @Nullable
+    @Deprecated // Use ItemStack sensitive version.
     public final Item getCraftingRemainingItem() {
         return this.craftingRemainingItem;
     }
 
+    @Deprecated // Use ItemStack sensitive version.
     public boolean hasCraftingRemainingItem() {
         return this.craftingRemainingItem != null;
     }
@@ -291,6 +_,7 @@
         return p_41436_.clip(new ClipContext(vec3, vec31, ClipContext.Block.OUTLINE, p_41438_, p_41437_));
     }
 
+    @Deprecated // Use ItemStack sensitive version.
     public int getEnchantmentValue() {
         return 0;
     }
@@ -332,6 +_,30 @@
     public FeatureFlagSet requiredFeatures() {
         return this.requiredFeatures;
     }
+
+    private Object renderProperties;
+
+    /*
+       DO NOT CALL, IT WILL DISAPPEAR IN THE FUTURE
+       Call RenderProperties.get instead
+     */
+    public Object getRenderPropertiesInternal() {
+        return renderProperties;
+    }
+
+    private void initClient() {
+        // Minecraft instance isn't available in datagen, so don't call initializeClient if in datagen
+        if (net.minecraftforge.fml.loading.FMLEnvironment.dist == net.minecraftforge.api.distmarker.Dist.CLIENT && !net.minecraftforge.fml.loading.FMLLoader.getLaunchHandler().isData()) {
+            initializeClient(properties -> {
+                if (properties == this) {
+                    throw new IllegalStateException("Don't extend IItemRenderProperties in your item, use an anonymous class instead.");
+                }
+                this.renderProperties = properties;
+            });
+        }
+    }
+
+    public void initializeClient(java.util.function.Consumer<net.minecraftforge.client.extensions.common.IClientItemExtensions> consumer) { }
 
     public static class Properties {
         private static final Interner<DataComponentMap> COMPONENT_INTERNER = Interners.newStrongInterner();
