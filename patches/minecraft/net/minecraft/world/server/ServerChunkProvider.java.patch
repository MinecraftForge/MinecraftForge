--- a/net/minecraft/world/server/ServerChunkProvider.java
+++ b/net/minecraft/world/server/ServerChunkProvider.java
@@ -125,6 +_,11 @@
             }
          }
 
+         ChunkHolder chunkholder = this.getVisibleChunkIfPresent(i);
+         if (chunkholder != null && chunkholder.currentlyLoading != null) {
+             return chunkholder.currentlyLoading; //Forge - If the requested chunk is loading, bypass the future chain to prevent a deadlock.
+         }
+
          iprofiler.incrementCounter("getChunkCacheMiss");
          CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> completablefuture = this.getChunkFutureMainThread(p_212849_1_, p_212849_2_, p_212849_3_, p_212849_4_);
          this.mainThreadProcessor.managedBlock(completablefuture::isDone);
@@ -353,7 +_,7 @@
                if (optional1.isPresent()) {
                   Chunk chunk = optional1.get();
                   ChunkPos chunkpos = p_241099_7_.getPos();
-                  if (!this.chunkMap.noPlayersCloseForSpawning(chunkpos)) {
+                  if (!this.chunkMap.noPlayersCloseForSpawning(chunkpos) || chunkMap.getDistanceManager().shouldForceTicks(chunkpos.toLong())) {
                      chunk.setInhabitedTime(chunk.getInhabitedTime() + j);
                      if (flag1 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(chunk.getPos())) {
                         WorldEntitySpawner.spawnForChunk(this.level, chunk, worldentityspawner$entitydensitymanager, this.spawnFriendlies, this.spawnEnemies, flag2);
@@ -427,6 +_,14 @@
 
    public <T> void removeRegionTicket(TicketType<T> p_217222_1_, ChunkPos p_217222_2_, int p_217222_3_, T p_217222_4_) {
       this.distanceManager.removeRegionTicket(p_217222_1_, p_217222_2_, p_217222_3_, p_217222_4_);
+   }
+
+   public <T> void registerTickingTicket(TicketType<T> type, ChunkPos pos, int distance, T value) {
+      this.distanceManager.registerTicking(type, pos, distance, value);
+   }
+
+   public <T> void releaseTickingTicket(TicketType<T> type, ChunkPos pos, int distance, T value) {
+      this.distanceManager.releaseTicking(type, pos, distance, value);
    }
 
    public void updateChunkForced(ChunkPos p_217206_1_, boolean p_217206_2_) {
