--- a/net/minecraft/world/server/ServerWorld.java
+++ b/net/minecraft/world/server/ServerWorld.java
@@ -143,7 +_,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class ServerWorld extends World implements ISeedReader {
+public class ServerWorld extends World implements ISeedReader, net.minecraftforge.common.extensions.IForgeWorldServer {
    public static final BlockPos END_SPAWN_POINT = new BlockPos(100, 50, 0);
    private static final Logger LOGGER = LogManager.getLogger();
    private final Int2ObjectMap<Entity> entitiesById = new Int2ObjectLinkedOpenHashMap<>();
@@ -173,6 +_,8 @@
    private final DragonFightManager dragonFight;
    private final StructureManager structureFeatureManager;
    private final boolean tickTime;
+   private net.minecraftforge.common.util.WorldCapabilityData capabilityData;
+   private final it.unimi.dsi.fastutil.ints.Int2ObjectMap<net.minecraftforge.entity.PartEntity<?>> partEntities = new it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap<>();
 
    public ServerWorld(MinecraftServer p_i241885_1_, Executor p_i241885_2_, SaveFormat.LevelSave p_i241885_3_, IServerWorldInfo p_i241885_4_, RegistryKey<World> p_i241885_5_, DimensionType p_i241885_6_, IChunkStatusListener p_i241885_7_, ChunkGenerator p_i241885_8_, boolean p_i241885_9_, long p_i241885_10_, List<ISpecialSpawner> p_i241885_12_, boolean p_i241885_13_) {
       super(p_i241885_4_, p_i241885_5_, p_i241885_6_, p_i241885_1_::getProfiler, false, p_i241885_9_, p_i241885_10_);
@@ -200,7 +_,7 @@
       } else {
          this.dragonFight = null;
       }
-
+      this.initCapabilities();
    }
 
    public void setWeatherParameters(int p_241113_1_, int p_241113_2_, boolean p_241113_3_, boolean p_241113_4_) {
@@ -296,15 +_,19 @@
          this.server.getPlayerList().broadcastAll(new SChangeGameStatePacket(SChangeGameStatePacket.THUNDER_LEVEL_CHANGE, this.thunderLevel), this.dimension());
       }
 
+      /* The function in use here has been replaced in order to only send the weather info to players in the correct dimension,
+       * rather than to all players on the server. This is what causes the client-side rain, as the
+       * client believes that it has started raining locally, rather than in another dimension.
+       */
       if (flag != this.isRaining()) {
          if (flag) {
-            this.server.getPlayerList().broadcastAll(new SChangeGameStatePacket(SChangeGameStatePacket.STOP_RAINING, 0.0F));
+            this.server.getPlayerList().broadcastAll(new SChangeGameStatePacket(SChangeGameStatePacket.STOP_RAINING, 0.0F), this.dimension());
          } else {
-            this.server.getPlayerList().broadcastAll(new SChangeGameStatePacket(SChangeGameStatePacket.START_RAINING, 0.0F));
+            this.server.getPlayerList().broadcastAll(new SChangeGameStatePacket(SChangeGameStatePacket.START_RAINING, 0.0F), this.dimension());
          }
 
-         this.server.getPlayerList().broadcastAll(new SChangeGameStatePacket(SChangeGameStatePacket.RAIN_LEVEL_CHANGE, this.rainLevel));
-         this.server.getPlayerList().broadcastAll(new SChangeGameStatePacket(SChangeGameStatePacket.THUNDER_LEVEL_CHANGE, this.thunderLevel));
+         this.server.getPlayerList().broadcastAll(new SChangeGameStatePacket(SChangeGameStatePacket.RAIN_LEVEL_CHANGE, this.rainLevel), this.dimension());
+         this.server.getPlayerList().broadcastAll(new SChangeGameStatePacket(SChangeGameStatePacket.THUNDER_LEVEL_CHANGE, this.thunderLevel), this.dimension());
       }
 
       if (this.allPlayersSleeping && this.players.stream().noneMatch((p_241132_0_) -> {
@@ -312,8 +_,8 @@
       })) {
          this.allPlayersSleeping = false;
          if (this.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)) {
-            long l = this.levelData.getDayTime() + 24000L;
-            this.setDayTime(l - l % 24000L);
+            long l = this.getDayTime() + 24000L;
+            this.setDayTime(net.minecraftforge.event.ForgeEventFactory.onSleepFinished(this, l - l % 24000L, this.getDayTime()));
          }
 
          this.wakeUpAllPlayers();
@@ -338,7 +_,7 @@
       this.runBlockEvents();
       this.handlingTick = false;
       iprofiler.popPush("entities");
-      boolean flag3 = !this.players.isEmpty() || !this.getForcedChunks().isEmpty();
+      boolean flag3 = !this.players.isEmpty() || net.minecraftforge.common.world.ForgeChunkManager.hasForcedChunks(this); //Forge: Replace vanilla's has forced chunk check with forge's that checks both the vanilla and forge added ones
       if (flag3) {
          this.resetEmptyTime();
       }
@@ -395,7 +_,7 @@
             }
 
             iprofiler.push("tick");
-            if (!entity1.removed && !(entity1 instanceof EnderDragonPartEntity)) {
+            if (!entity1.removed && !(entity1 instanceof net.minecraftforge.entity.PartEntity)) {
                this.guardEntityTick(this::tickNonPassenger, entity1);
             }
 
@@ -404,7 +_,7 @@
             if (entity1.removed) {
                this.removeFromChunk(entity1);
                objectiterator.remove();
-               this.onEntityRemoved(entity1);
+               this.removeEntityComplete(entity1, entity1 instanceof ServerPlayerEntity); //Forge: Keep cap data until revive. Every other entity removes directly.
             }
 
             iprofiler.pop();
@@ -475,6 +_,7 @@
          BlockPos blockpos2 = this.getHeightmapPos(Heightmap.Type.MOTION_BLOCKING, this.getBlockRandomPos(i, 0, j, 15));
          BlockPos blockpos3 = blockpos2.below();
          Biome biome = this.getBiome(blockpos2);
+         if (this.isAreaLoaded(blockpos2, 1)) // Forge: check area to avoid loading neighbors in unloaded chunks
          if (biome.shouldFreeze(this, blockpos3)) {
             this.setBlockAndUpdate(blockpos3, Blocks.ICE.defaultBlockState());
          }
@@ -598,9 +_,10 @@
             ++p_217479_1_.tickCount;
             IProfiler iprofiler = this.getProfiler();
             iprofiler.push(() -> {
-               return Registry.ENTITY_TYPE.getKey(p_217479_1_.getType()).toString();
+               return p_217479_1_.getType().getRegistryName() == null ? p_217479_1_.getType().toString() : p_217479_1_.getType().getRegistryName().toString();
             });
             iprofiler.incrementCounter("tickNonPassenger");
+            if (p_217479_1_.canUpdate())
             p_217479_1_.tick();
             iprofiler.pop();
          }
@@ -687,6 +_,7 @@
             p_217445_1_.progressStage(new TranslationTextComponent("menu.savingChunks"));
          }
 
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Save(this));
          serverchunkprovider.save(p_217445_2_);
       }
    }
@@ -777,6 +_,7 @@
    }
 
    private void addPlayer(ServerPlayerEntity p_217448_1_) {
+      if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(p_217448_1_, this))) return;
       Entity entity = this.entitiesByUuid.get(p_217448_1_.getUUID());
       if (entity != null) {
          LOGGER.warn("Force-added player with duplicate UUID {}", (Object)p_217448_1_.getUUID().toString());
@@ -801,6 +_,7 @@
       } else if (this.isUUIDUsed(p_72838_1_)) {
          return false;
       } else {
+         if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(p_72838_1_, this))) return false;
          IChunk ichunk = this.getChunk(MathHelper.floor(p_72838_1_.getX() / 16.0D), MathHelper.floor(p_72838_1_.getZ() / 16.0D), ChunkStatus.FULL, p_72838_1_.forcedLoading);
          if (!(ichunk instanceof Chunk)) {
             return false;
@@ -816,6 +_,7 @@
       if (this.isUUIDUsed(p_217440_1_)) {
          return false;
       } else {
+         if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(p_217440_1_, this))) return false;
          this.add(p_217440_1_);
          return true;
       }
@@ -879,10 +_,15 @@
 
    }
 
+   @Deprecated //Forge: Use removeEntityComplete(entity,boolean)
    public void onEntityRemoved(Entity p_217484_1_) {
-      if (p_217484_1_ instanceof EnderDragonEntity) {
-         for(EnderDragonPartEntity enderdragonpartentity : ((EnderDragonEntity)p_217484_1_).getSubEntities()) {
-            enderdragonpartentity.remove();
+      removeEntityComplete(p_217484_1_, false);
+   }
+   public void removeEntityComplete(Entity p_217484_1_, boolean keepData) {
+      if (p_217484_1_.isMultipartEntity()) {
+         for(net.minecraftforge.entity.PartEntity<?> enderdragonpartentity : p_217484_1_.getParts()) {
+            enderdragonpartentity.remove(keepData);
+            this.partEntities.remove(enderdragonpartentity.getId());
          }
       }
 
@@ -898,6 +_,9 @@
          this.navigations.remove(((MobEntity)p_217484_1_).getNavigation());
       }
 
+      p_217484_1_.onRemovedFromWorld();
+      p_217484_1_.remove(keepData);
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityLeaveWorldEvent(p_217484_1_, this));
    }
 
    private void add(Entity p_217465_1_) {
@@ -905,9 +_,10 @@
          this.toAddAfterTick.add(p_217465_1_);
       } else {
          this.entitiesById.put(p_217465_1_.getId(), p_217465_1_);
-         if (p_217465_1_ instanceof EnderDragonEntity) {
-            for(EnderDragonPartEntity enderdragonpartentity : ((EnderDragonEntity)p_217465_1_).getSubEntities()) {
+         if (p_217465_1_.isMultipartEntity()) {
+            for(net.minecraftforge.entity.PartEntity<?> enderdragonpartentity : p_217465_1_.getParts()) {
                this.entitiesById.put(enderdragonpartentity.getId(), enderdragonpartentity);
+               this.partEntities.put(enderdragonpartentity.getId(), enderdragonpartentity);
             }
          }
 
@@ -918,15 +_,19 @@
          }
       }
 
+      p_217465_1_.onAddedToWorld();
    }
 
    public void despawn(Entity p_217467_1_) {
+      removeEntity(p_217467_1_, false);
+   }
+   public void removeEntity(Entity p_217467_1_, boolean keepData) {
       if (this.tickingEntities) {
          throw (IllegalStateException)Util.pauseInIde(new IllegalStateException("Removing entity while ticking!"));
       } else {
          this.removeFromChunk(p_217467_1_);
          this.entitiesById.remove(p_217467_1_.getId());
-         this.onEntityRemoved(p_217467_1_);
+         this.removeEntityComplete(p_217467_1_, keepData);
       }
    }
 
@@ -939,8 +_,11 @@
    }
 
    public void removePlayerImmediately(ServerPlayerEntity p_217434_1_) {
-      p_217434_1_.remove();
-      this.despawn(p_217434_1_);
+      removePlayer(p_217434_1_, false);
+   }
+   public void removePlayer(ServerPlayerEntity p_217434_1_, boolean keepData) {
+      p_217434_1_.remove(keepData);
+      this.removeEntity(p_217434_1_, keepData);
       this.updateSleepingPlayerList();
    }
 
@@ -959,10 +_,20 @@
    }
 
    public void playSound(@Nullable PlayerEntity p_184148_1_, double p_184148_2_, double p_184148_4_, double p_184148_6_, SoundEvent p_184148_8_, SoundCategory p_184148_9_, float p_184148_10_, float p_184148_11_) {
+      net.minecraftforge.event.entity.PlaySoundAtEntityEvent event = net.minecraftforge.event.ForgeEventFactory.onPlaySoundAtEntity(p_184148_1_, p_184148_8_, p_184148_9_, p_184148_10_, p_184148_11_);
+      if (event.isCanceled() || event.getSound() == null) return;
+      p_184148_8_ = event.getSound();
+      p_184148_9_ = event.getCategory();
+      p_184148_10_ = event.getVolume();
       this.server.getPlayerList().broadcast(p_184148_1_, p_184148_2_, p_184148_4_, p_184148_6_, p_184148_10_ > 1.0F ? (double)(16.0F * p_184148_10_) : 16.0D, this.dimension(), new SPlaySoundEffectPacket(p_184148_8_, p_184148_9_, p_184148_2_, p_184148_4_, p_184148_6_, p_184148_10_, p_184148_11_));
    }
 
    public void playSound(@Nullable PlayerEntity p_217384_1_, Entity p_217384_2_, SoundEvent p_217384_3_, SoundCategory p_217384_4_, float p_217384_5_, float p_217384_6_) {
+      net.minecraftforge.event.entity.PlaySoundAtEntityEvent event = net.minecraftforge.event.ForgeEventFactory.onPlaySoundAtEntity(p_217384_1_, p_217384_3_, p_217384_4_, p_217384_5_, p_217384_6_);
+      if (event.isCanceled() || event.getSound() == null) return;
+      p_217384_3_ = event.getSound();
+      p_217384_4_ = event.getCategory();
+      p_217384_5_ = event.getVolume();
       this.server.getPlayerList().broadcast(p_217384_1_, p_217384_2_.getX(), p_217384_2_.getY(), p_217384_2_.getZ(), p_217384_5_ > 1.0F ? (double)(16.0F * p_217384_5_) : 16.0D, this.dimension(), new SSpawnMovingSoundEffectPacket(p_217384_3_, p_217384_4_, p_217384_2_, p_217384_5_, p_217384_6_));
    }
 
@@ -998,6 +_,7 @@
 
    public Explosion explode(@Nullable Entity p_230546_1_, @Nullable DamageSource p_230546_2_, @Nullable ExplosionContext p_230546_3_, double p_230546_4_, double p_230546_6_, double p_230546_8_, float p_230546_10_, boolean p_230546_11_, Explosion.Mode p_230546_12_) {
       Explosion explosion = new Explosion(this, p_230546_1_, p_230546_2_, p_230546_3_, p_230546_4_, p_230546_6_, p_230546_8_, p_230546_10_, p_230546_11_, p_230546_12_);
+      if (net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this, explosion)) return explosion;
       explosion.explode();
       explosion.finalizeExplosion(false);
       if (p_230546_12_ == Explosion.Mode.NONE) {
@@ -1409,5 +_,20 @@
       BlockPos.betweenClosed(i - 2, j, k - 2, i + 2, j, k + 2).forEach((p_241122_1_) -> {
          p_241121_0_.setBlockAndUpdate(p_241122_1_, Blocks.OBSIDIAN.defaultBlockState());
       });
+   }
+
+   protected void initCapabilities() {
+      this.gatherCapabilities();
+      capabilityData = this.getDataStorage().computeIfAbsent(() -> new net.minecraftforge.common.util.WorldCapabilityData(getCapabilities()), net.minecraftforge.common.util.WorldCapabilityData.ID);
+      capabilityData.setCapabilities(getCapabilities());
+   }
+
+   public java.util.stream.Stream<Entity> getEntities() {
+       return entitiesById.values().stream();
+   }
+
+   @Override
+   public java.util.Collection<net.minecraftforge.entity.PartEntity<?>> getPartEntities() {
+      return this.partEntities.values();
    }
 }
