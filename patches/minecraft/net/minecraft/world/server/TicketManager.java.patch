--- a/net/minecraft/world/server/TicketManager.java
+++ b/net/minecraft/world/server/TicketManager.java
@@ -49,6 +_,8 @@
    private final Executor mainThreadExecutor;
    private long ticketTickCounter;
 
+   private final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> forcedTickets = new Long2ObjectOpenHashMap<>();
+
    protected TicketManager(Executor p_i50707_1_, Executor p_i50707_2_) {
       ITaskExecutor<Runnable> itaskexecutor = ITaskExecutor.of("player ticket throttler", p_i50707_2_::execute);
       ChunkTaskPriorityQueueSorter chunktaskpriorityqueuesorter = new ChunkTaskPriorityQueueSorter(ImmutableList.of(itaskexecutor), p_i50707_1_, 4);
@@ -143,6 +_,10 @@
          this.ticketTracker.update(p_219347_1_, p_219347_3_.getTicketLevel(), true);
       }
 
+      if (p_219347_3_.isForceTicks()) {
+          SortedArraySet<Ticket<?>> tickets = forcedTickets.computeIfAbsent(p_219347_1_, e -> SortedArraySet.create(4));
+          tickets.addOrGet(ticket);
+      }
    }
 
    private void removeTicket(long p_219349_1_, Ticket<?> p_219349_3_) {
@@ -155,6 +_,13 @@
       }
 
       this.ticketTracker.update(p_219349_1_, getTicketLevelAt(sortedarrayset), false);
+
+      if (p_219349_3_.isForceTicks()) {
+          SortedArraySet<Ticket<?>> tickets = forcedTickets.get(p_219349_1_);
+          if (tickets != null) {
+              tickets.remove(p_219349_3_);
+          }
+      }
    }
 
    public <T> void addTicket(TicketType<T> p_219356_1_, ChunkPos p_219356_2_, int p_219356_3_, T p_219356_4_) {
@@ -175,6 +_,14 @@
       this.removeTicket(p_219362_2_.toLong(), ticket);
    }
 
+   public <T> void registerTicking(TicketType<T> type, ChunkPos pos, int distance, T value) {
+      this.addTicket(pos.toLong(), new Ticket<>(type, 33 - distance, value, true));
+   }
+
+   public <T> void releaseTicking(TicketType<T> type, ChunkPos pos, int distance, T value) {
+      this.removeTicket(pos.toLong(), new Ticket<>(type, 33 - distance, value, true));
+   }
+
    private SortedArraySet<Ticket<?>> getTickets(long p_229848_1_) {
       return this.tickets.computeIfAbsent(p_229848_1_, (p_229851_0_) -> {
          return SortedArraySet.create(4);
@@ -240,6 +_,11 @@
 
    public String getDebugStatus() {
       return this.ticketThrottler.getDebugStatus();
+   }
+
+   public boolean shouldForceTicks(long chunkPos) {
+       SortedArraySet<Ticket<?>> tickets = forcedTickets.get(chunkPos);
+       return tickets != null && !tickets.isEmpty();
    }
 
    class ChunkTicketTracker extends ChunkDistanceGraph {
