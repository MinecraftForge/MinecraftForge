--- a/net/minecraft/world/storage/loot/LootTable.java
+++ b/net/minecraft/world/storage/loot/LootTable.java
@@ -33,13 +33,13 @@
    public static final LootTable field_186464_a = new LootTable(LootParameterSets.field_216260_a, new LootPool[0], new ILootFunction[0]);
    public static final LootParameterSet field_216126_b = LootParameterSets.field_216266_g;
    private final LootParameterSet field_216127_d;
-   private final LootPool[] field_186466_c;
+   private final List<LootPool> field_186466_c;
    private final ILootFunction[] field_216128_f;
    private final BiFunction<ItemStack, LootContext, ItemStack> field_216129_g;
 
    private LootTable(LootParameterSet p_i51265_1_, LootPool[] p_i51265_2_, ILootFunction[] p_i51265_3_) {
       this.field_216127_d = p_i51265_1_;
-      this.field_186466_c = p_i51265_2_;
+      this.field_186466_c = Lists.newArrayList(p_i51265_2_);
       this.field_216128_f = p_i51265_3_;
       this.field_216129_g = LootFunctionManager.func_216241_a(p_i51265_3_);
    }
@@ -92,8 +92,8 @@
    }
 
    public void func_216117_a(ValidationResults p_216117_1_, Function<ResourceLocation, LootTable> p_216117_2_, Set<ResourceLocation> p_216117_3_, LootParameterSet p_216117_4_) {
-      for(int i = 0; i < this.field_186466_c.length; ++i) {
-         this.field_186466_c[i].func_216099_a(p_216117_1_.func_216108_b(".pools[" + i + "]"), p_216117_2_, p_216117_3_, p_216117_4_);
+      for(int i = 0; i < this.field_186466_c.size(); ++i) {
+         this.field_186466_c.get(i).func_216099_a(p_216117_1_.func_216108_b(".pools[" + i + "]"), p_216117_2_, p_216117_3_, p_216117_4_);
       }
 
       for(int j = 0; j < this.field_216128_f.length; ++j) {
@@ -204,6 +204,41 @@
       }
    }
 
+   //======================== FORGE START =============================================
+   private boolean isFrozen = false;
+   public void freeze() {
+      this.isFrozen = true;
+      this.field_186466_c.forEach(LootPool::freeze);
+   }
+   public boolean isFrozen(){ return this.isFrozen; }
+   private void checkFrozen() {
+      if (this.isFrozen())
+         throw new RuntimeException("Attempted to modify LootTable after being finalized!");
+   }
+
+   public LootPool getPool(String name) {
+      return field_186466_c.stream().filter(e -> name.equals(e.getName())).findFirst().orElse(null);
+   }
+
+   public LootPool removePool(String name) {
+      checkFrozen();
+      for (LootPool pool : this.field_186466_c) {
+         if (name.equals(pool.getName())) {
+            this.field_186466_c.remove(pool);
+            return pool;
+         }
+      }
+      return null;
+   }
+
+   public void addPool(LootPool pool) {
+      checkFrozen();
+      if (field_186466_c.stream().anyMatch(e -> e == pool || e.getName().equals(pool.getName())))
+         throw new RuntimeException("Attempted to add a duplicate pool to loot table: " + pool.getName());
+      this.field_186466_c.add(pool);
+   }
+   //======================== FORGE END ===============================================
+
    public static class Serializer implements JsonDeserializer<LootTable>, JsonSerializer<LootTable> {
       public LootTable deserialize(JsonElement p_deserialize_1_, Type p_deserialize_2_, JsonDeserializationContext p_deserialize_3_) throws JsonParseException {
          JsonObject jsonobject = JSONUtils.func_151210_l(p_deserialize_1_, "loot table");
@@ -229,7 +264,7 @@
             }
          }
 
-         if (p_serialize_1_.field_186466_c.length > 0) {
+         if (!p_serialize_1_.field_186466_c.isEmpty()) {
             jsonobject.add("pools", p_serialize_3_.serialize(p_serialize_1_.field_186466_c));
          }
 
