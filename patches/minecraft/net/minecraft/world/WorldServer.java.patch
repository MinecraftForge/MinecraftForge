--- a/net/minecraft/world/WorldServer.java
+++ b/net/minecraft/world/WorldServer.java
@@ -85,7 +85,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class WorldServer extends World implements IThreadListener {
+public class WorldServer extends World implements IThreadListener, net.minecraftforge.common.extensions.IForgeWorldServer {
    private static final Logger LOGGER = LogManager.getLogger();
    private final MinecraftServer server;
    private final EntityTracker entityTracker;
@@ -105,27 +105,36 @@
    protected final VillageSiege villageSiege = new VillageSiege(this);
    ObjectLinkedOpenHashSet<BlockEventData> blockEventQueue = new ObjectLinkedOpenHashSet<BlockEventData>();
    private boolean field_211159_Q;
+   
+   /** Stores the recently processed (lighting) chunks */
+   protected java.util.Set<ChunkPos> doneChunks = new java.util.HashSet<ChunkPos>();
+   public List<Teleporter> customTeleporters = new java.util.ArrayList<Teleporter>();
 
    public WorldServer(MinecraftServer server, ISaveHandler saveHandlerIn, WorldInfo info, int dimensionId, Profiler profilerIn) {
-      super(saveHandlerIn, info, DimensionType.getById(dimensionId).createDimension(), profilerIn, false);
+      super(saveHandlerIn, info,net.minecraftforge.common.DimensionManager.createProviderFor(dimensionId), profilerIn, false);
       this.server = server;
       this.entityTracker = new EntityTracker(this);
       this.playerChunkMap = new PlayerChunkMap(this);
+      // Guarantee the dimension ID was not reset by the provider
+      int providerDim = this.provider.getId();
       this.provider.setWorld(this);
+      this.provider.setId(providerDim);
       this.chunkProvider = this.createChunkProvider();
+      perWorldStorage = new WorldSavedDataStorage(new net.minecraftforge.common.WorldSpecificSaveHandler((WorldServer)this, saveHandlerIn));
       this.worldTeleporter = new Teleporter(this);
       this.calculateInitialSkylight();
       this.calculateInitialWeather();
       this.getWorldBorder().setSize(server.getMaxWorldSize());
+      net.minecraftforge.common.DimensionManager.setWorld(dimensionId, this, server);
    }
 
    public IWorld init() {
       this.mapStorage = new WorldSavedDataStorage(this.saveHandler);
       String s = VillageCollection.fileNameForProvider(this.provider);
-      VillageCollection villagecollection = (VillageCollection)this.mapStorage.func_201067_a(VillageCollection::new, s);
+      VillageCollection villagecollection = (VillageCollection)this.perWorldStorage.func_201067_a(VillageCollection::new, s);
       if (villagecollection == null) {
          this.villageCollection = new VillageCollection(this);
-         this.mapStorage.setData(s, this.villageCollection);
+         this.perWorldStorage.setData(s, this.villageCollection);
       } else {
          this.villageCollection = villagecollection;
          this.villageCollection.setWorldsForAll(this);
@@ -150,6 +159,7 @@
          this.getWorldBorder().setTransition(this.worldInfo.getBorderSize());
       }
 
+      this.initCapabilities();
       return this;
    }
 
@@ -163,8 +173,8 @@
       this.chunkProvider.func_201711_g().func_202090_b().update();
       if (this.areAllPlayersAsleep()) {
          if (this.getGameRules().getBoolean("doDaylightCycle")) {
-            long i = this.worldInfo.getWorldTime() + 24000L;
-            this.worldInfo.setWorldTime(i - i % 24000L);
+            long i = this.getWorldTime() + 24000L;
+            this.setWorldTime(i - i % 24000L);
          }
 
          this.wakeAllPlayers();
@@ -185,7 +195,7 @@
 
       this.worldInfo.setWorldTotalTime(this.worldInfo.getWorldTotalTime() + 1L);
       if (this.getGameRules().getBoolean("doDaylightCycle")) {
-         this.worldInfo.setWorldTime(this.worldInfo.getWorldTime() + 1L);
+         this.worldInfo.setWorldTime(this.getWorldTime() + 1L);
       }
 
       this.profiler.endStartSection("tickPending");
@@ -199,6 +209,10 @@
       this.villageSiege.tick();
       this.profiler.endStartSection("portalForcer");
       this.worldTeleporter.removeStalePortalLocations(this.getTotalWorldTime());
+      for (Teleporter tele : customTeleporters)
+      {
+         tele.removeStalePortalLocations(getTotalWorldTime());
+      }
       this.profiler.endSection();
       this.sendQueuedBlockEvents();
       this.field_211159_Q = false;
@@ -211,11 +225,13 @@
    @Nullable
    public Biome.SpawnListEntry getSpawnListEntryForTypeAt(EnumCreatureType creatureType, BlockPos pos) {
       List<Biome.SpawnListEntry> list = this.getChunkProvider().getPossibleCreatures(creatureType, pos);
+      list = net.minecraftforge.event.ForgeEventFactory.getPotentialSpawns(this, creatureType, pos, list);
       return list.isEmpty() ? null : (Biome.SpawnListEntry)WeightedRandom.getRandomItem(this.rand, list);
    }
 
    public boolean canCreatureTypeSpawnHere(EnumCreatureType creatureType, Biome.SpawnListEntry spawnListEntry, BlockPos pos) {
       List<Biome.SpawnListEntry> list = this.getChunkProvider().getPossibleCreatures(creatureType, pos);
+      list = net.minecraftforge.event.ForgeEventFactory.getPotentialSpawns(this, creatureType, pos, list);
       return list != null && !list.isEmpty() ? list.contains(spawnListEntry) : false;
    }
 
@@ -256,10 +272,7 @@
    }
 
    private void resetRainAndThunder() {
-      this.worldInfo.setRainTime(0);
-      this.worldInfo.setRaining(false);
-      this.worldInfo.setThunderTime(0);
-      this.worldInfo.setThundering(false);
+      this.provider.resetRainAndThunder();
    }
 
    public boolean areAllPlayersAsleep() {
@@ -346,7 +359,7 @@
             this.profiler.endStartSection("tickChunk");
             chunk.onTick(false);
             this.profiler.endStartSection("thunder");
-            if (flag && flag1 && this.rand.nextInt(100000) == 0) {
+            if (this.provider.canDoLightning(chunk) && flag && flag1 && this.rand.nextInt(100000) == 0) {
                this.updateLCG = this.updateLCG * 3 + 1013904223;
                int l = this.updateLCG >> 2;
                BlockPos blockpos = this.adjustPosToNearbyEntity(new BlockPos(j + (l & 15), 0, k + (l >> 8 & 15)));
@@ -366,12 +379,13 @@
             }
 
             this.profiler.endStartSection("iceandsnow");
-            if (this.rand.nextInt(16) == 0) {
+            if (this.provider.canDoRainSnowIce(chunk) && this.rand.nextInt(16) == 0) {
                this.updateLCG = this.updateLCG * 3 + 1013904223;
                int j2 = this.updateLCG >> 2;
                BlockPos blockpos1 = this.func_205770_a(Heightmap.Type.MOTION_BLOCKING, new BlockPos(j + (j2 & 15), 0, k + (j2 >> 8 & 15)));
                BlockPos blockpos2 = blockpos1.down();
                Biome biome = this.getBiome(blockpos1);
+               if (this.isAreaLoaded(blockpos2, 1, false)) // Forge: check area to avoid loading neighbors in unloaded chunks
                if (biome.func_201848_a(this, blockpos2)) {
                   this.setBlockState(blockpos2, Blocks.ICE.getDefaultState());
                }
@@ -545,6 +559,11 @@
    }
 
    public boolean isBlockModifiable(EntityPlayer player, BlockPos pos) {
+      return super.isBlockModifiable(player, pos);
+   }
+   
+   public boolean canMineBlockBody(EntityPlayer player, BlockPos pos)
+   {
       return !this.server.isBlockProtected(this, pos, player) && this.getWorldBorder().contains(pos);
    }
 
@@ -594,6 +613,7 @@
       } else if (this.worldInfo.getTerrainType() == WorldType.DEBUG_ALL_BLOCK_STATES) {
          this.worldInfo.setSpawn(BlockPos.ORIGIN.up());
       } else {
+          if (net.minecraftforge.event.ForgeEventFactory.onCreateWorldSpawn(this, settings)) return;
          BiomeProvider biomeprovider = this.chunkProvider.func_201711_g().func_202090_b();
          List<Biome> list = biomeprovider.getBiomesToSpawnIn();
          Random random = new Random(this.getSeed());
@@ -676,6 +696,7 @@
             progressCallback.func_200209_c(new TextComponentTranslation("menu.savingChunks", new Object[0]));
          }
 
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Save(this));
          chunkproviderserver.saveChunks(all);
 
          for(Chunk chunk : Lists.newArrayList(chunkproviderserver.getLoadedChunks())) {
@@ -715,6 +736,7 @@
       this.worldInfo.func_201356_c(this.server.func_201300_aS().func_201380_c());
       this.saveHandler.saveWorldInfoWithPlayer(this.worldInfo, this.server.getPlayerList().getHostPlayerData());
       this.mapStorage.saveAllData();
+      this.perWorldStorage.saveAllData();
    }
 
    public boolean spawnEntity(Entity entityIn) {
@@ -723,7 +745,7 @@
 
    public void loadEntities(Collection<Entity> entityCollection) {
       for(Entity entity : Lists.newArrayList(entityCollection)) {
-         if (this.canAddEntity(entity)) {
+         if (this.canAddEntity(entity) && !net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(entity, this))) {
             this.loadedEntityList.add(entity);
             this.onEntityAdded(entity);
          }
@@ -785,7 +807,7 @@
 
    public boolean addWeatherEffect(Entity entityIn) {
       if (super.addWeatherEffect(entityIn)) {
-         this.server.getPlayerList().sendToAllNearExcept((EntityPlayer)null, entityIn.posX, entityIn.posY, entityIn.posZ, 512.0D, this.provider.getDimensionType().getId(), new SPacketSpawnGlobalEntity(entityIn));
+         this.server.getPlayerList().sendToAllNearExcept((EntityPlayer)null, entityIn.posX, entityIn.posY, entityIn.posZ, 512.0D, this.provider.getId(), new SPacketSpawnGlobalEntity(entityIn));
          return true;
       } else {
          return false;
@@ -802,6 +824,7 @@
 
    public Explosion func_211529_a(@Nullable Entity p_211529_1_, DamageSource p_211529_2_, double p_211529_3_, double p_211529_5_, double p_211529_7_, float p_211529_9_, boolean p_211529_10_, boolean p_211529_11_) {
       Explosion explosion = new Explosion(this, p_211529_1_, p_211529_3_, p_211529_5_, p_211529_7_, p_211529_9_, p_211529_10_, p_211529_11_);
+      if (net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this, explosion)) return explosion;
       if (p_211529_2_ != null) {
          explosion.func_199592_a(p_211529_2_);
       }
@@ -829,7 +852,7 @@
       while(!this.blockEventQueue.isEmpty()) {
          BlockEventData blockeventdata = this.blockEventQueue.removeFirst();
          if (this.fireBlockEvent(blockeventdata)) {
-            this.server.getPlayerList().sendToAllNearExcept((EntityPlayer)null, (double)blockeventdata.getPosition().getX(), (double)blockeventdata.getPosition().getY(), (double)blockeventdata.getPosition().getZ(), 64.0D, this.provider.getDimensionType().getId(), new SPacketBlockAction(blockeventdata.getPosition(), blockeventdata.getBlock(), blockeventdata.getEventID(), blockeventdata.getEventParameter()));
+            this.server.getPlayerList().sendToAllNearExcept((EntityPlayer)null, (double)blockeventdata.getPosition().getX(), (double)blockeventdata.getPosition().getY(), (double)blockeventdata.getPosition().getZ(), 64.0D, this.provider.getId(), new SPacketBlockAction(blockeventdata.getPosition(), blockeventdata.getBlock(), blockeventdata.getEventID(), blockeventdata.getEventParameter()));
          }
       }
 
@@ -849,22 +872,26 @@
       boolean flag = this.isRaining();
       super.updateWeather();
       if (this.prevRainingStrength != this.rainingStrength) {
-         this.server.getPlayerList().sendPacketToAllPlayersInDimension(new SPacketChangeGameState(7, this.rainingStrength), this.provider.getDimensionType().getId());
+         this.server.getPlayerList().sendPacketToAllPlayersInDimension(new SPacketChangeGameState(7, this.rainingStrength), this.provider.getId());
       }
 
       if (this.prevThunderingStrength != this.thunderingStrength) {
-         this.server.getPlayerList().sendPacketToAllPlayersInDimension(new SPacketChangeGameState(8, this.thunderingStrength), this.provider.getDimensionType().getId());
+         this.server.getPlayerList().sendPacketToAllPlayersInDimension(new SPacketChangeGameState(8, this.thunderingStrength), this.provider.getId());
       }
 
+      /* The function in use here has been replaced in order to only send the weather info to players in the correct dimension,
+       * rather than to all players on the server. This is what causes the client-side rain, as the
+       * client believes that it has started raining locally, rather than in another dimension.
+       */
       if (flag != this.isRaining()) {
          if (flag) {
-            this.server.getPlayerList().sendPacketToAllPlayers(new SPacketChangeGameState(2, 0.0F));
+            this.server.getPlayerList().sendPacketToAllPlayersInDimension(new SPacketChangeGameState(2, 0.0F), this.provider.getId());
          } else {
-            this.server.getPlayerList().sendPacketToAllPlayers(new SPacketChangeGameState(1, 0.0F));
+            this.server.getPlayerList().sendPacketToAllPlayersInDimension(new SPacketChangeGameState(1, 0.0F), this.provider.getId());
          }
 
-         this.server.getPlayerList().sendPacketToAllPlayers(new SPacketChangeGameState(7, this.rainingStrength));
-         this.server.getPlayerList().sendPacketToAllPlayers(new SPacketChangeGameState(8, this.thunderingStrength));
+         this.server.getPlayerList().sendPacketToAllPlayersInDimension(new SPacketChangeGameState(7, this.rainingStrength), this.provider.getId());
+         this.server.getPlayerList().sendPacketToAllPlayersInDimension(new SPacketChangeGameState(8, this.thunderingStrength), this.provider.getId());
       }
 
    }
@@ -957,4 +984,12 @@
    public NetworkTagManager func_205772_D() {
       return this.server.func_199731_aO();
    }
+
+   private long[] tickTime = new long[100];
+   public void setTickTime(int tick, long time) {
+      this.tickTime[tick % 100] = time;
+   }
+   public long[] getTickTimes() {
+      return this.tickTime;
+   }
 }
