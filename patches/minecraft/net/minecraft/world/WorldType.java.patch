--- ../src_base/minecraft/net/minecraft/world/WorldType.java
+++ ../src_work/minecraft/net/minecraft/world/WorldType.java
@@ -10,10 +10,14 @@
 import com.google.common.collect.ObjectArrays;
 import com.google.common.collect.Sets;
 
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.GuiCreateFlatWorld;
+import net.minecraft.client.gui.GuiCreateWorld;
 import net.minecraft.world.*;
 import net.minecraft.world.gen.*;
 import net.minecraft.world.biome.*;
 import net.minecraft.world.chunk.IChunkProvider;
+import net.minecraftforge.common.EnumHelper; // MCPC+
 
 public class WorldType
 {
@@ -75,6 +79,12 @@
             default:
                 biomesForWorldType = base12Biomes;
         }
+        // MCPC+ start - add worldtype for bukkit if it does not already exist
+        if (org.bukkit.WorldType.getByName(par2Str) == null)
+        {
+            EnumHelper.addBukkitWorldType(par2Str);
+        }
+        // MCPC+ end
     }
 
     public String getWorldTypeName()
@@ -224,4 +234,47 @@
      * Called when 'Create New World' button is pressed before starting game
      */
     public void onGUICreateWorldPress() { }
+
+    /**
+     * Gets the spawn fuzz for players who join the world.
+     * Useful for void world types.
+     * @return Fuzz for entity initial spawn in blocks.
+     */
+    public int getSpawnFuzz()
+    {
+        return 20;
+    }
+
+    /**
+     * Called when the 'Customize' button is pressed on world creation GUI
+     * @param instance The minecraft instance
+     * @param guiCreateWorld the createworld GUI
+     */
+    @SideOnly(Side.CLIENT)
+    public void onCustomizeButton(Minecraft instance, GuiCreateWorld guiCreateWorld)
+    {
+        if (this == FLAT)
+        {
+            instance.displayGuiScreen(new GuiCreateFlatWorld(guiCreateWorld, guiCreateWorld.generatorOptionsToUse));
+        }
+    }
+
+    /*
+     * Should world creation GUI show 'Customize' button for this world type?
+     * @return if this world type has customization parameters
+     */
+    public boolean isCustomizable()
+    {
+        return this == FLAT;
+    }
+    
+    @SideOnly(Side.CLIENT)
+
+    /**
+     * the y level at which clouds are rendered.
+     */
+    public float getCloudHeight()
+    {
+        return 128.0F;
+    }
 }
