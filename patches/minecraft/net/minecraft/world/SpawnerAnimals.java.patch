--- ../src_base/minecraft/net/minecraft/world/SpawnerAnimals.java
+++ ../src_work/minecraft/net/minecraft/world/SpawnerAnimals.java
@@ -1,14 +1,16 @@
 package net.minecraft.world;
 
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Random;
+import java.util.*;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
+import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLiving;
 import net.minecraft.entity.EntityLivingData;
 import net.minecraft.entity.EnumCreatureType;
+import net.minecraft.entity.monster.EntitySkeleton;
+import net.minecraft.entity.monster.EntitySpider;
+import net.minecraft.entity.monster.EntityZombie;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.util.ChunkCoordinates;
 import net.minecraft.util.MathHelper;
@@ -17,10 +19,18 @@
 import net.minecraft.world.biome.SpawnListEntry;
 import net.minecraft.world.chunk.Chunk;
 
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.Event.Result;
+import net.minecraftforge.event.ForgeEventFactory;
+// CraftBukkit start
+import org.bukkit.craftbukkit.util.LongHash;
+import org.bukkit.craftbukkit.util.LongObjectHashMap;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
+// CraftBukkit end
+
 public final class SpawnerAnimals
 {
-    /** The 17x17 area around the player where mobs can spawn */
-    private HashMap eligibleChunksForSpawning = new HashMap();
+    private LongObjectHashMap<Boolean> eligibleChunksForSpawning = new LongObjectHashMap<Boolean>(); // CraftBukkit - HashMap -> LongObjectHashMap
 
     /**
      * Given a chunk, find a random position in it.
@@ -62,16 +72,19 @@
                     for (int i1 = -b0; i1 <= b0; ++i1)
                     {
                         boolean flag3 = l == -b0 || l == b0 || i1 == -b0 || i1 == b0;
-                        ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(l + k, i1 + j);
+                        // CraftBukkit start
+                        long chunkCoords = LongHash.toLong(l + k, i1 + j);
 
                         if (!flag3)
                         {
-                            this.eligibleChunksForSpawning.put(chunkcoordintpair, Boolean.valueOf(false));
-                        }
-                        else if (!this.eligibleChunksForSpawning.containsKey(chunkcoordintpair))
-                        {
-                            this.eligibleChunksForSpawning.put(chunkcoordintpair, Boolean.valueOf(true));
-                        }
+                            eligibleChunksForSpawning.put(chunkCoords, false);
+                        }
+                        else if (!eligibleChunksForSpawning.containsKey(chunkCoords))
+                        {
+                            eligibleChunksForSpawning.put(chunkCoords, true);
+                        }
+
+                        // CraftBukkit end
                     }
                 }
             }
@@ -84,19 +97,49 @@
             for (int j1 = 0; j1 < j; ++j1)
             {
                 EnumCreatureType enumcreaturetype = aenumcreaturetype[j1];
-
-                if ((!enumcreaturetype.getPeacefulCreature() || par3) && (enumcreaturetype.getPeacefulCreature() || par2) && (!enumcreaturetype.getAnimal() || par4) && par1WorldServer.countEntities(enumcreaturetype.getCreatureClass()) <= enumcreaturetype.getMaxNumberOfCreature() * this.eligibleChunksForSpawning.size() / 256)
+                // CraftBukkit start - Use per-world spawn limits
+                int limit = enumcreaturetype.getMaxNumberOfCreature();
+
+                switch (enumcreaturetype)
+                {
+                    case monster:
+                        limit = par1WorldServer.getWorld().getMonsterSpawnLimit();
+                        break;
+                    case creature:
+                        limit = par1WorldServer.getWorld().getAnimalSpawnLimit();
+                        break;
+                    case waterCreature:
+                        limit = par1WorldServer.getWorld().getWaterAnimalSpawnLimit();
+                        break;
+                    case ambient:
+                        limit = par1WorldServer.getWorld().getAmbientSpawnLimit();
+                        break;
+                }
+
+                if (limit == 0)
+                {
+                    continue;
+                }
+
+                // CraftBukkit end
+
+                if ((!enumcreaturetype.getPeacefulCreature() || par3) && (enumcreaturetype.getPeacefulCreature() || par2) && (!enumcreaturetype.getAnimal() || par4) && par1WorldServer.countEntities(enumcreaturetype, true) <= enumcreaturetype.getMaxNumberOfCreature() * this.eligibleChunksForSpawning.size() / 256)
                 {
                     Iterator iterator = this.eligibleChunksForSpawning.keySet().iterator();
+                    ArrayList<ChunkCoordIntPair> tmp = new ArrayList(eligibleChunksForSpawning.keySet());
+                    Collections.shuffle(tmp);
+                    iterator = tmp.iterator();
                     label110:
 
                     while (iterator.hasNext())
                     {
-                        ChunkCoordIntPair chunkcoordintpair1 = (ChunkCoordIntPair)iterator.next();
-
-                        if (!((Boolean)this.eligibleChunksForSpawning.get(chunkcoordintpair1)).booleanValue())
-                        {
-                            ChunkPosition chunkposition = getRandomSpawningPointInChunk(par1WorldServer, chunkcoordintpair1.chunkXPos, chunkcoordintpair1.chunkZPos);
+                        // CraftBukkit start
+                        long key = ((Long) iterator.next()).longValue();
+
+                        if (!eligibleChunksForSpawning.get(key))
+                        {
+                            ChunkPosition chunkposition = getRandomSpawningPointInChunk(par1WorldServer, LongHash.msw(key), LongHash.lsw(key));
+                            // CraftBukkit end
                             int k1 = chunkposition.x;
                             int l1 = chunkposition.y;
                             int i2 = chunkposition.z;
@@ -165,13 +208,17 @@
 
                                                             entityliving.setLocationAndAngles((double)f, (double)f1, (double)f2, par1WorldServer.rand.nextFloat() * 360.0F, 0.0F);
 
-                                                            if (entityliving.getCanSpawnHere())
+                                                            Result canSpawn = ForgeEventFactory.canEntitySpawn(entityliving, par1WorldServer, f, f1, f2);
+                                                            if (canSpawn == Result.ALLOW || (canSpawn == Result.DEFAULT && entityliving.getCanSpawnHere()))
                                                             {
                                                                 ++j2;
-                                                                par1WorldServer.spawnEntityInWorld(entityliving);
-                                                                entitylivingdata = entityliving.onSpawnWithEgg(entitylivingdata);
-
-                                                                if (j2 >= entityliving.getMaxSpawnedInChunk())
+                                                                par1WorldServer.addEntity(entityliving, SpawnReason.NATURAL); // CraftBukkit - Added a reason for spawning this creature, moved entityliving.a(entitylivingdata) up
+                                                                if (!ForgeEventFactory.doSpecialSpawn(entityliving, par1WorldServer, f, f1, f2))
+                                                                {
+                                                                    entitylivingdata = entityliving.onSpawnWithEgg(entitylivingdata);
+                                                                }
+
+                                                                if (j2 >= ForgeEventFactory.getMaxSpawnPackSize(entityliving))
                                                                 {
                                                                     continue label110;
                                                                 }
@@ -217,7 +264,8 @@
         else
         {
             int l = par1World.getBlockId(par2, par3 - 1, par4);
-            return l != Block.bedrock.blockID && !par1World.isBlockNormalCube(par2, par3, par4) && !par1World.getBlockMaterial(par2, par3, par4).isLiquid() && !par1World.isBlockNormalCube(par2, par3 + 1, par4);
+            boolean spawnBlock = (Block.blocksList[l] != null && Block.blocksList[l].canCreatureSpawn(par0EnumCreatureType, par1World, par2, par3 - 1, par4));
+            return spawnBlock && l != Block.bedrock.blockID && !par1World.isBlockNormalCube(par2, par3, par4) && !par1World.getBlockMaterial(par2, par3, par4).isLiquid() && !par1World.isBlockNormalCube(par2, par3 + 1, par4);
         }
     }
 
@@ -266,7 +314,7 @@
                             }
 
                             entityliving.setLocationAndAngles((double)f, (double)f1, (double)f2, par6Random.nextFloat() * 360.0F, 0.0F);
-                            par0World.spawnEntityInWorld(entityliving);
+                            par0World.addEntity(entityliving, SpawnReason.CHUNK_GEN); // CraftBukkit - Added a reason for spawning this creature, moved entityliving.a(entitylivingdata) up
                             entitylivingdata = entityliving.onSpawnWithEgg(entitylivingdata);
                             flag = true;
                         }
