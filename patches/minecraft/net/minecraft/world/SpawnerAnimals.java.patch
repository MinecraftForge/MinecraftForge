--- ../src_base/minecraft/net/minecraft/world/SpawnerAnimals.java
+++ ../src_work/minecraft/net/minecraft/world/SpawnerAnimals.java
@@ -1,5 +1,7 @@
 package net.minecraft.world;
 
+import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -17,6 +19,10 @@
 import net.minecraft.world.biome.SpawnListEntry;
 import net.minecraft.world.chunk.Chunk;
 
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.Event.Result;
+import net.minecraftforge.event.ForgeEventFactory;
+
 public final class SpawnerAnimals
 {
     /** The 17x17 area around the player where mobs can spawn */
@@ -85,9 +91,12 @@
             {
                 EnumCreatureType enumcreaturetype = aenumcreaturetype[j1];
 
-                if ((!enumcreaturetype.getPeacefulCreature() || par3) && (enumcreaturetype.getPeacefulCreature() || par2) && (!enumcreaturetype.getAnimal() || par4) && par1WorldServer.countEntities(enumcreaturetype.getCreatureClass()) <= enumcreaturetype.getMaxNumberOfCreature() * this.eligibleChunksForSpawning.size() / 256)
+                if ((!enumcreaturetype.getPeacefulCreature() || par3) && (enumcreaturetype.getPeacefulCreature() || par2) && (!enumcreaturetype.getAnimal() || par4) && par1WorldServer.countEntities(enumcreaturetype, true) <= enumcreaturetype.getMaxNumberOfCreature() * this.eligibleChunksForSpawning.size() / 256)
                 {
                     Iterator iterator = this.eligibleChunksForSpawning.keySet().iterator();
+                    ArrayList<ChunkCoordIntPair> tmp = new ArrayList(eligibleChunksForSpawning.keySet());
+                    Collections.shuffle(tmp);
+                    iterator = tmp.iterator();
                     label110:
 
                     while (iterator.hasNext())
@@ -165,13 +174,17 @@
 
                                                             entityliving.setLocationAndAngles((double)f, (double)f1, (double)f2, par1WorldServer.rand.nextFloat() * 360.0F, 0.0F);
 
-                                                            if (entityliving.getCanSpawnHere())
+                                                            Result canSpawn = ForgeEventFactory.canEntitySpawn(entityliving, par1WorldServer, f, f1, f2);
+                                                            if (canSpawn == Result.ALLOW || (canSpawn == Result.DEFAULT && entityliving.getCanSpawnHere()))
                                                             {
                                                                 ++j2;
                                                                 par1WorldServer.spawnEntityInWorld(entityliving);
-                                                                entitylivingdata = entityliving.onSpawnWithEgg(entitylivingdata);
-
-                                                                if (j2 >= entityliving.getMaxSpawnedInChunk())
+                                                                if (!ForgeEventFactory.doSpecialSpawn(entityliving, par1WorldServer, f, f1, f2))
+                                                                {
+                                                                    entitylivingdata = entityliving.onSpawnWithEgg(entitylivingdata);
+                                                                }
+
+                                                                if (j2 >= ForgeEventFactory.getMaxSpawnPackSize(entityliving))
                                                                 {
                                                                     continue label110;
                                                                 }
@@ -217,7 +230,8 @@
         else
         {
             int l = par1World.getBlockId(par2, par3 - 1, par4);
-            return l != Block.bedrock.blockID && !par1World.isBlockNormalCube(par2, par3, par4) && !par1World.getBlockMaterial(par2, par3, par4).isLiquid() && !par1World.isBlockNormalCube(par2, par3 + 1, par4);
+            boolean spawnBlock = (Block.blocksList[l] != null && Block.blocksList[l].canCreatureSpawn(par0EnumCreatureType, par1World, par2, par3 - 1, par4));
+            return spawnBlock && l != Block.bedrock.blockID && !par1World.isBlockNormalCube(par2, par3, par4) && !par1World.getBlockMaterial(par2, par3, par4).isLiquid() && !par1World.isBlockNormalCube(par2, par3 + 1, par4);
         }
     }
 
