--- a/net/minecraft/world/level/block/Block.java
+++ b/net/minecraft/world/level/block/Block.java
@@ -62,9 +_,10 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class Block extends BlockBehaviour implements ItemLike {
+public class Block extends BlockBehaviour implements ItemLike, net.minecraftforge.common.extensions.IForgeBlock {
    protected static final Logger f_49790_ = LogManager.getLogger();
-   public static final IdMapper<BlockState> f_49791_ = new IdMapper<>();
+   @Deprecated //Forge: Do not use, use GameRegistry
+   public static final IdMapper<BlockState> f_49791_ = net.minecraftforge.registries.GameData.getBlockStateIDMap();
    private static final LoadingCache<VoxelShape, Boolean> f_49785_ = CacheBuilder.newBuilder().maximumSize(512L).weakKeys().build(new CacheLoader<VoxelShape, Boolean>() {
       public Boolean load(VoxelShape p_49972_) {
          return !Shapes.m_83157_(Shapes.m_83144_(), p_49972_, BooleanOp.f_82687_);
@@ -177,7 +_,7 @@
             f_49790_.error("Block classes should end with Block and {} doesn't.", (Object)s);
          }
       }
-
+      initClient();
    }
 
    public static boolean m_152463_(BlockState p_152464_) {
@@ -323,7 +_,7 @@
    }
 
    private static void m_152440_(Level p_152441_, Supplier<ItemEntity> p_152442_, ItemStack p_152443_) {
-      if (!p_152441_.f_46443_ && !p_152443_.m_41619_() && p_152441_.m_46469_().m_46207_(GameRules.f_46136_)) {
+      if (!p_152441_.f_46443_ && !p_152443_.m_41619_() && p_152441_.m_46469_().m_46207_(GameRules.f_46136_) && !p_152441_.restoringBlockSnapshots) {
          ItemEntity itementity = p_152442_.get();
          itementity.m_32060_();
          p_152441_.m_7967_(itementity);
@@ -331,12 +_,13 @@
    }
 
    public void m_49805_(ServerLevel p_49806_, BlockPos p_49807_, int p_49808_) {
-      if (p_49806_.m_46469_().m_46207_(GameRules.f_46136_)) {
+      if (p_49806_.m_46469_().m_46207_(GameRules.f_46136_) && !p_49806_.restoringBlockSnapshots) {
          ExperienceOrb.m_147082_(p_49806_, Vec3.m_82512_(p_49807_), p_49808_);
       }
 
    }
 
+   @Deprecated //Forge: Use more sensitive version
    public float m_7325_() {
       return this.f_60444_;
    }
@@ -383,8 +_,10 @@
 
    public void m_5548_(BlockGetter p_49821_, Entity p_49822_) {
       p_49822_.m_20256_(p_49822_.m_20184_().m_82542_(1.0D, 0.0D, 1.0D));
+      p_49822_.m_20256_(p_49822_.m_20184_().m_82542_(1.0D, 0.0D, 1.0D));
    }
 
+   @Deprecated //Forge: Use more sensitive version
    public ItemStack m_7397_(BlockGetter p_49823_, BlockPos p_49824_, BlockState p_49825_) {
       return new ItemStack(this);
    }
@@ -421,6 +_,7 @@
    public void m_141997_(BlockState p_152450_, Level p_152451_, BlockPos p_152452_, Biome.Precipitation p_152453_) {
    }
 
+   @Deprecated //Forge: Use more sensitive version
    public boolean m_6903_(Explosion p_49826_) {
       return true;
    }
@@ -456,6 +_,7 @@
       return p_152456_.m_61124_(p_152457_, p_152455_.m_61143_(p_152457_));
    }
 
+   @Deprecated //Forge: Use more sensitive version {@link IForgeBlockState#getSoundType(IWorldReader, BlockPos, Entity) }
    public SoundType m_49962_(BlockState p_49963_) {
       return this.f_60446_;
    }
@@ -465,7 +_,7 @@
          this.f_49788_ = Item.m_41439_(this);
       }
 
-      return this.f_49788_;
+      return this.f_49788_.delegate.get(); //Forge: Vanilla caches the items, update with registry replacements.
    }
 
    public boolean m_49967_() {
@@ -473,7 +_,7 @@
    }
 
    public String toString() {
-      return "Block{" + Registry.f_122824_.m_7981_(this) + "}";
+      return "Block{" + getRegistryName() + "}";
    }
 
    public void m_5871_(ItemStack p_49816_, @Nullable BlockGetter p_49817_, List<Component> p_49818_, TooltipFlag p_49819_) {
@@ -486,6 +_,81 @@
    protected ImmutableMap<BlockState, VoxelShape> m_152458_(Function<BlockState, VoxelShape> p_152459_) {
       return this.f_49792_.m_61056_().stream().collect(ImmutableMap.toImmutableMap(Function.identity(), p_152459_));
    }
+
+   /* ======================================== FORGE START =====================================*/
+   protected Random RANDOM = new Random();
+   private final net.minecraftforge.common.util.ReverseTagWrapper<Block> reverseTags = new net.minecraftforge.common.util.ReverseTagWrapper<>(this, BlockTags::m_13115_);
+   private Object renderProperties;
+
+   /*
+      DO NOT CALL, IT WILL DISAPPEAR IN THE FUTURE
+      Call RenderProperties.get instead
+    */
+   public Object getRenderPropertiesInternal() {
+      return renderProperties;
+   }
+
+   private void initClient() {
+      if (net.minecraftforge.fml.loading.FMLEnvironment.dist == net.minecraftforge.api.distmarker.Dist.CLIENT) {
+         initializeClient(properties -> {
+            if (properties == this)
+               throw new IllegalStateException("Don't extend IBlockRenderProperties in your block, use an anonymous class instead.");
+            this.renderProperties = properties;
+         });
+      }
+   }
+
+   public void initializeClient(java.util.function.Consumer<net.minecraftforge.client.IBlockRenderProperties> consumer) {
+   }
+
+   @Override
+   public boolean canSustainPlant(BlockState state, BlockGetter world, BlockPos pos, Direction facing, net.minecraftforge.common.IPlantable plantable) {
+      BlockState plant = plantable.getPlant(world, pos.m_142300_(facing));
+      net.minecraftforge.common.PlantType type = plantable.getPlantType(world, pos.m_142300_(facing));
+
+      if (plant.m_60734_() == Blocks.f_50128_)
+         return state.m_60713_(Blocks.f_50128_) || state.m_60713_(Blocks.f_49992_) || state.m_60713_(Blocks.f_49993_);
+
+      if (plant.m_60734_() == Blocks.f_50130_ && this == Blocks.f_50130_)
+         return true;
+
+      if (plantable instanceof BushBlock && ((BushBlock)plantable).m_6266_(state, world, pos))
+         return true;
+
+      if (net.minecraftforge.common.PlantType.DESERT.equals(type)) {
+         return this == Blocks.f_49992_ || this == Blocks.f_50352_ || this instanceof GlazedTerracottaBlock;
+      } else if (net.minecraftforge.common.PlantType.NETHER.equals(type)) {
+         return this == Blocks.f_50135_;
+      } else if (net.minecraftforge.common.PlantType.CROP.equals(type)) {
+         return state.m_60713_(Blocks.f_50093_);
+      } else if (net.minecraftforge.common.PlantType.CAVE.equals(type)) {
+         return state.m_60783_(world, pos, Direction.UP);
+      } else if (net.minecraftforge.common.PlantType.PLAINS.equals(type)) {
+         return this == Blocks.f_50440_ || net.minecraftforge.common.Tags.Blocks.DIRT.m_8110_(this) || this == Blocks.f_50093_;
+      } else if (net.minecraftforge.common.PlantType.WATER.equals(type)) {
+         return state.m_60767_() == net.minecraft.world.level.material.Material.f_76305_; //&& state.getValue(BlockLiquidWrapper)
+      } else if (net.minecraftforge.common.PlantType.BEACH.equals(type)) {
+         boolean isBeach = state.m_60713_(Blocks.f_50440_) || net.minecraftforge.common.Tags.Blocks.DIRT.m_8110_(this) || state.m_60713_(Blocks.f_49992_) || state.m_60713_(Blocks.f_49993_);
+         boolean hasWater = false;
+         for (Direction face : Direction.Plane.HORIZONTAL) {
+            BlockState blockState = world.m_8055_(pos.m_142300_(face));
+            net.minecraft.world.level.material.FluidState fluidState = world.m_6425_(pos.m_142300_(face));
+            hasWater |= blockState.m_60713_(Blocks.f_50449_);
+            hasWater |= fluidState.m_76153_(net.minecraft.tags.FluidTags.f_13131_);
+            if (hasWater)
+               break; //No point continuing.
+         }
+         return isBeach && hasWater;
+      }
+      return false;
+   }
+
+   @Override
+   public final java.util.Set<net.minecraft.resources.ResourceLocation> getTags() {
+      return reverseTags.getTagNames();
+   }
+
+   /* ========================================= FORGE END ======================================*/
 
    public static final class BlockStatePairKey {
       private final BlockState f_49980_;
