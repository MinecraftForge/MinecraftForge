--- a/net/minecraft/world/level/levelgen/WorldGenSettings.java
+++ b/net/minecraft/world/level/levelgen/WorldGenSettings.java
@@ -39,6 +_,7 @@
       return p_64626_.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::m_64619_), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::m_64657_), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::m_64660_), RegistryCodecs.m_206318_(Registry.f_122820_, Lifecycle.stable(), LevelStem.f_63970_).xmap(LevelStem::m_204525_, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::m_204655_), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((p_158959_) -> {
          return p_158959_.f_64606_;
       })).apply(p_64626_, p_64626_.stable(WorldGenSettings::new));
+   }).xmap(net.minecraftforge.common.ForgeHooks::loadDimensionsWithServerSeed, wgs -> {return wgs; // forge: when loading/registering json dimensions, replace hardcoded seeds of custom dimensions with the server/overworld's seed, where requested; fixes MC-195717
    }).comapFlatMap(WorldGenSettings::m_64674_, Function.identity());
    private static final Logger f_64601_ = LogUtils.getLogger();
    private final long f_64602_;
@@ -194,6 +_,8 @@
       Registry<StructureSet> registry2 = p_209717_.m_175515_(Registry.f_211073_);
       Registry<LevelStem> registry3 = DimensionType.m_204490_(p_209717_, i);
       String s = p_209718_.f_207545_();
+      net.minecraftforge.common.world.ForgeWorldPreset type = net.minecraftforge.registries.ForgeRegistries.WORLD_TYPES.get().getValue(new net.minecraft.resources.ResourceLocation(s));
+      if (type != null) return type.createSettings(p_209717_, i, p_209718_.f_207544_(), false, s);
       switch(s) {
       case "flat":
          Dynamic<JsonElement> dynamic = new Dynamic<>(JsonOps.INSTANCE, p_209718_.f_207543_());
