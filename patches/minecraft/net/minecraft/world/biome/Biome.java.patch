--- ../src-base/minecraft/net/minecraft/world/biome/Biome.java
+++ ../src-work/minecraft/net/minecraft/world/biome/Biome.java
@@ -50,7 +50,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public abstract class Biome
+public abstract class Biome extends net.minecraftforge.registries.IForgeRegistryEntry.Impl<Biome>
 {
     private static final Logger field_150586_aC = LogManager.getLogger();
     protected static final IBlockState field_185365_a = Blocks.field_150348_b.func_176223_P();
@@ -68,7 +68,7 @@
     protected static final WorldGenTrees field_76757_N = new WorldGenTrees(false);
     protected static final WorldGenBigTree field_76758_O = new WorldGenBigTree(false);
     protected static final WorldGenSwamp field_76763_Q = new WorldGenSwamp();
-    public static final RegistryNamespaced<ResourceLocation, Biome> field_185377_q = new RegistryNamespaced<ResourceLocation, Biome>();
+    public static final RegistryNamespaced<ResourceLocation, Biome> field_185377_q = net.minecraftforge.registries.GameData.getWrapper(Biome.class);
     private final String field_76791_y;
     private final float field_76748_D;
     private final float field_76749_E;
@@ -86,6 +86,8 @@
     protected List<Biome.SpawnListEntry> field_76762_K = Lists.<Biome.SpawnListEntry>newArrayList();
     protected List<Biome.SpawnListEntry> field_76755_L = Lists.<Biome.SpawnListEntry>newArrayList();
     protected List<Biome.SpawnListEntry> field_82914_M = Lists.<Biome.SpawnListEntry>newArrayList();
+    // Forge: Stores the spawnable lists for non-vanilla EnumCreatureTypes. Can't be an EnumMap as that doesn't handle new enum values being added after it's created.
+    protected java.util.Map<EnumCreatureType, List<Biome.SpawnListEntry>> modSpawnableLists = com.google.common.collect.Maps.newHashMap();
 
     public static int func_185362_a(Biome p_185362_0_)
     {
@@ -130,11 +132,12 @@
         this.field_76761_J.add(new Biome.SpawnListEntry(EntityWitch.class, 5, 1, 1));
         this.field_76755_L.add(new Biome.SpawnListEntry(EntitySquid.class, 10, 4, 4));
         this.field_82914_M.add(new Biome.SpawnListEntry(EntityBat.class, 10, 8, 8));
+        this.addDefaultFlowers();
     }
 
     public BiomeDecorator func_76729_a()
     {
-        return new BiomeDecorator();
+        return getModdedBiomeDecorator(new BiomeDecorator());
     }
 
     public boolean func_185363_b()
@@ -178,7 +181,9 @@
             case AMBIENT:
                 return this.field_82914_M;
             default:
-                return Collections.<Biome.SpawnListEntry>emptyList();
+                // Forge: Return a non-empty list for non-vanilla EnumCreatureTypes
+                if (!this.modSpawnableLists.containsKey(p_76747_1_)) this.modSpawnableLists.put(p_76747_1_, Lists.<Biome.SpawnListEntry>newArrayList());
+                return this.modSpawnableLists.get(p_76747_1_);
         }
     }
 
@@ -230,7 +235,7 @@
     {
         double d0 = (double)MathHelper.func_76131_a(this.func_180626_a(p_180627_1_), 0.0F, 1.0F);
         double d1 = (double)MathHelper.func_76131_a(this.func_76727_i(), 0.0F, 1.0F);
-        return ColorizerGrass.func_77480_a(d0, d1);
+        return getModdedBiomeGrassColor(ColorizerGrass.func_77480_a(d0, d1));
     }
 
     public final void func_180628_b(World p_180628_1_, Random p_180628_2_, ChunkPrimer p_180628_3_, int p_180628_4_, int p_180628_5_, double p_180628_6_)
@@ -323,7 +328,7 @@
     {
         double d0 = (double)MathHelper.func_76131_a(this.func_180626_a(p_180625_1_), 0.0F, 1.0F);
         double d1 = (double)MathHelper.func_76131_a(this.func_76727_i(), 0.0F, 1.0F);
-        return ColorizerFoliage.func_77470_a(d0, d1);
+        return getModdedBiomeFoliageColor(ColorizerFoliage.func_77470_a(d0, d1));
     }
 
     public Class <? extends Biome > func_150562_l()
@@ -389,7 +394,7 @@
     @SideOnly(Side.CLIENT)
     public final int func_185361_o()
     {
-        return this.field_76759_H;
+        return getWaterColorMultiplier();
     }
 
     public final boolean func_150559_j()
@@ -397,6 +402,84 @@
         return this.field_76766_R;
     }
 
+    /* ========================================= FORGE START ======================================*/
+    protected List<FlowerEntry> flowers = new java.util.ArrayList<FlowerEntry>();
+
+    public BiomeDecorator getModdedBiomeDecorator(BiomeDecorator original)
+    {
+        return new net.minecraftforge.event.terraingen.DeferredBiomeDecorator(original);
+    }
+
+    public int getWaterColorMultiplier()
+    {
+        net.minecraftforge.event.terraingen.BiomeEvent.GetWaterColor event = new net.minecraftforge.event.terraingen.BiomeEvent.GetWaterColor(this, field_76759_H);
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event);
+        return event.getNewColor();
+    }
+
+    public int getModdedBiomeGrassColor(int original)
+    {
+        net.minecraftforge.event.terraingen.BiomeEvent.GetGrassColor event = new net.minecraftforge.event.terraingen.BiomeEvent.GetGrassColor(this, original);
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event);
+        return event.getNewColor();
+    }
+
+    public int getModdedBiomeFoliageColor(int original)
+    {
+        net.minecraftforge.event.terraingen.BiomeEvent.GetFoliageColor event = new net.minecraftforge.event.terraingen.BiomeEvent.GetFoliageColor(this, original);
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event);
+        return event.getNewColor();
+    }
+
+    /**
+     * Weighted random holder class used to hold possible flowers
+     * that can spawn in this biome when bonemeal is used on grass.
+     */
+    public static class FlowerEntry extends WeightedRandom.Item
+    {
+        public final net.minecraft.block.state.IBlockState state;
+        public FlowerEntry(net.minecraft.block.state.IBlockState state, int weight)
+        {
+            super(weight);
+            this.state = state;
+        }
+    }
+
+    /**
+     * Adds the default flowers, as of 1.7, it is 2 yellow, and 1 red. I chose 10 to allow some wiggle room in the numbers.
+     */
+    public void addDefaultFlowers()
+    {
+        addFlower(Blocks.field_150327_N.func_176223_P().func_177226_a(Blocks.field_150327_N.func_176494_l(), BlockFlower.EnumFlowerType.DANDELION), 20);
+        addFlower(Blocks.field_150328_O.func_176223_P().func_177226_a(Blocks.field_150328_O.func_176494_l(), BlockFlower.EnumFlowerType.POPPY), 10);
+    }
+
+    /** Register a new plant to be planted when bonemeal is used on grass.
+     * @param state The block to place.
+     * @param weight The weight of the plant, where red flowers are
+     *               10 and yellow flowers are 20.
+     */
+    public void addFlower(IBlockState state, int weight)
+    {
+        this.flowers.add(new FlowerEntry(state, weight));
+    }
+
+    public void plantFlower(World world, Random rand, BlockPos pos)
+    {
+        if (flowers.isEmpty()) return;
+        FlowerEntry flower = (FlowerEntry)WeightedRandom.func_76271_a(rand, flowers);
+        if (flower == null || flower.state == null ||
+            (flower.state.func_177230_c() instanceof net.minecraft.block.BlockBush &&
+              !((net.minecraft.block.BlockBush)flower.state.func_177230_c()).func_180671_f(world, pos, flower.state)))
+        {
+            return;
+        }
+
+        world.func_180501_a(pos, flower.state, 3);
+    }
+
+    /* ========================================= FORGE END ======================================*/
+
     public static void func_185358_q()
     {
         func_185354_a(0, "ocean", new BiomeOcean((new Biome.BiomeProperties("Ocean")).func_185398_c(-1.0F).func_185400_d(0.1F)));
@@ -552,6 +635,7 @@
             public Class <? extends EntityLiving > field_76300_b;
             public int field_76301_c;
             public int field_76299_d;
+            private final java.lang.reflect.Constructor<? extends EntityLiving> ctr;
 
             public SpawnListEntry(Class <? extends EntityLiving > p_i1970_1_, int p_i1970_2_, int p_i1970_3_, int p_i1970_4_)
             {
@@ -559,12 +643,26 @@
                 this.field_76300_b = p_i1970_1_;
                 this.field_76301_c = p_i1970_3_;
                 this.field_76299_d = p_i1970_4_;
+
+                try
+                {
+                    ctr = p_i1970_1_.getConstructor(World.class);
+                }
+                catch (NoSuchMethodException e)
+                {
+                    throw new RuntimeException(e);
+                }
             }
 
             public String toString()
             {
                 return this.field_76300_b.getSimpleName() + "*(" + this.field_76301_c + "-" + this.field_76299_d + "):" + this.field_76292_a;
             }
+
+            public EntityLiving newInstance(World world) throws Exception
+            {
+                return ctr.newInstance(world);
+            }
         }
 
     public static enum TempCategory
