--- ../src_base/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
+++ ../src_work/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
@@ -6,6 +6,9 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
+
+import net.minecraftforge.common.DimensionManager;
+import net.minecraftforge.common.ForgeChunkManager;
 
 import cpw.mods.fml.common.registry.GameRegistry;
 import net.minecraft.crash.CrashReport;
@@ -66,7 +69,7 @@
      */
     public void unloadChunksIfNotNearSpawn(int par1, int par2)
     {
-        if (this.worldObj.provider.canRespawnHere())
+        if (this.worldObj.provider.canRespawnHere() && DimensionManager.shouldLoadSpawn(this.worldObj.provider.dimensionId))
         {
             ChunkCoordinates chunkcoordinates = this.worldObj.getSpawnPoint();
             int k = par1 * 16 + 8 - chunkcoordinates.posX;
@@ -109,7 +112,11 @@
 
         if (chunk == null)
         {
-            chunk = this.safeLoadChunk(par1, par2);
+            chunk = ForgeChunkManager.fetchDormantChunk(k, this.worldObj);
+            if (chunk == null)
+            {
+                chunk = this.safeLoadChunk(par1, par2);
+            }
 
             if (chunk == null)
             {
@@ -307,6 +314,11 @@
     {
         if (!this.worldObj.canNotSave)
         {
+            for (ChunkCoordIntPair forced : this.worldObj.getPersistentChunks().keySet())
+            {
+                this.chunksToUnload.remove(ChunkCoordIntPair.chunkXZ2Int(forced.chunkXPos, forced.chunkZPos));
+            }
+
             for (int i = 0; i < 100; ++i)
             {
                 if (!this.chunksToUnload.isEmpty())
@@ -319,6 +331,11 @@
                     this.chunksToUnload.remove(olong);
                     this.loadedChunkHashMap.remove(olong.longValue());
                     this.loadedChunks.remove(chunk);
+                    ForgeChunkManager.putDormantChunk(ChunkCoordIntPair.chunkXZ2Int(chunk.xPosition, chunk.zPosition), chunk);
+                    if(loadedChunks.size() == 0 && ForgeChunkManager.getPersistentChunksFor(this.worldObj).size() == 0 && !DimensionManager.shouldLoadSpawn(this.worldObj.provider.dimensionId)) {
+                        DimensionManager.unloadWorld(this.worldObj.provider.dimensionId);
+                        return currentChunkProvider.unloadQueuedChunks();
+                    }
                 }
             }
 
