--- ../src_base/minecraft/net/minecraft/world/gen/feature/WorldGenBigTree.java
+++ ../src_work/minecraft/net/minecraft/world/gen/feature/WorldGenBigTree.java
@@ -2,10 +2,14 @@
 
 import java.util.Random;
 import net.minecraft.block.Block;
+import net.minecraft.block.BlockSapling;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
-
-public class WorldGenBigTree extends WorldGenerator
+import net.minecraftforge.common.ForgeDirection;
+
+import org.bukkit.BlockChangeDelegate; // CraftBukkit
+
+public class WorldGenBigTree extends WorldGenerator implements net.minecraft.block.BlockSapling.TreeGenerator   // CraftBukkit add interface
 {
     /**
      * Contains three sets of two values that provide complimentary indices for a given 'major' index - 1 and 2 for 0, 0
@@ -17,7 +21,7 @@
     Random rand = new Random();
 
     /** Reference to the World object. */
-    World worldObj;
+    BlockChangeDelegate worldObj; // CraftBukkit
     int[] basePos = new int[] {0, 0, 0};
     int heightLimit;
     int height;
@@ -162,15 +166,18 @@
                 else
                 {
                     aint1[b2] = aint[b2] + k1;
-                    int l1 = this.worldObj.getBlockId(aint1[0], aint1[1], aint1[2]);
-
-                    if (l1 != 0 && l1 != Block.leaves.blockID)
+                    int l1 = this.worldObj.getTypeId(aint1[0], aint1[1], aint1[2]);
+                    Block block = Block.blocksList[l1];
+
+                    if (block != null &&
+                       !block.isAirBlock(worldObj, aint1[0], aint1[1], aint1[2]) &&
+                       !block.isLeaves(worldObj, aint1[0], aint1[1], aint1[2]))
                     {
                         ++k1;
                     }
                     else
                     {
-                        this.setBlockAndMetadata(this.worldObj, aint1[0], aint1[1], aint1[2], par6, 0);
+                        this.setTypeAndData(this.worldObj, aint1[0], aint1[1], aint1[2], par6, 0);
                         ++k1;
                     }
                 }
@@ -291,7 +298,7 @@
                     }
                 }
 
-                this.setBlockAndMetadata(this.worldObj, aint3[0], aint3[1], aint3[2], par3, b5);
+                this.setTypeAndData(this.worldObj, aint3[0], aint3[1], aint3[2], par3, b5);
             }
         }
     }
@@ -420,9 +427,13 @@
                 aint3[b1] = par1ArrayOfInteger[b1] + i;
                 aint3[b2] = MathHelper.floor_double((double)par1ArrayOfInteger[b2] + (double)i * d0);
                 aint3[b3] = MathHelper.floor_double((double)par1ArrayOfInteger[b3] + (double)i * d1);
-                int k = this.worldObj.getBlockId(aint3[0], aint3[1], aint3[2]);
-
-                if (k != 0 && k != Block.leaves.blockID)
+                int k = this.worldObj.getTypeId(aint3[0], aint3[1], aint3[2]);
+                Block block = Block.blocksList[k];
+
+                if ((block != null &&
+                   !block.isAirBlock(worldObj, aint3[0], aint3[1], aint3[2]) && 
+                   !block.isLeaves(worldObj, aint3[0], aint3[1], aint3[2]))
+                   || aint3[1] >= 256)   // CraftBukkit - fix trees wrapping around
                 {
                     break;
                 }
@@ -440,9 +451,11 @@
     {
         int[] aint = new int[] {this.basePos[0], this.basePos[1], this.basePos[2]};
         int[] aint1 = new int[] {this.basePos[0], this.basePos[1] + this.heightLimit - 1, this.basePos[2]};
-        int i = this.worldObj.getBlockId(this.basePos[0], this.basePos[1] - 1, this.basePos[2]);
-
-        if (i != 2 && i != 3)
+        int i = this.worldObj.getTypeId(this.basePos[0], this.basePos[1] - 1, this.basePos[2]);
+
+        Block soil = Block.blocksList[i];
+        boolean isValidSoil = (soil != null && soil.canSustainPlant(worldObj, basePos[0], basePos[1] - 1, basePos[2], ForgeDirection.UP, (BlockSapling)Block.sapling));
+        if (!isValidSoil)
         {
             return false;
         }
@@ -484,6 +497,17 @@
 
     public boolean generate(World par1World, Random par2Random, int par3, int par4, int par5)
     {
+        // CraftBukkit start - Moved to generate
+        // sk: The idea is to have (our) WorldServer implement
+        // BlockChangeDelegate and then we can implicitly cast World to
+        // WorldServer (a safe cast, AFAIK) and no code will be broken. This
+        // then allows plugins to catch manually-invoked generation events
+        return this.generate((BlockChangeDelegate) par1World, par2Random, par3, par4, par5);
+    }
+
+    public boolean generate(BlockChangeDelegate par1World, Random par2Random, int par3, int par4, int par5)
+    {
+        // CraftBukkit end
         this.worldObj = par1World;
         long l = par2Random.nextLong();
         this.rand.setSeed(l);
