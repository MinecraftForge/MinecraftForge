--- ../src_base/minecraft/net/minecraft/world/gen/feature/WorldGenHugeTrees.java
+++ ../src_work/minecraft/net/minecraft/world/gen/feature/WorldGenHugeTrees.java
@@ -2,10 +2,14 @@
 
 import java.util.Random;
 import net.minecraft.block.Block;
+import net.minecraft.block.BlockSapling;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.World;
-
-public class WorldGenHugeTrees extends WorldGenerator
+import net.minecraftforge.common.ForgeDirection;
+
+import org.bukkit.BlockChangeDelegate; // CraftBukkit
+
+public class WorldGenHugeTrees extends WorldGenerator implements net.minecraft.block.BlockSapling.TreeGenerator   // CraftBukkit add interface
 {
     /** The base height of the tree */
     private final int baseHeight;
@@ -26,6 +30,13 @@
 
     public boolean generate(World par1World, Random par2Random, int par3, int par4, int par5)
     {
+        // CraftBukkit start - Moved to generate
+        return this.generate((BlockChangeDelegate) par1World, par2Random, par3, par4, par5);
+    }
+
+    public boolean generate(BlockChangeDelegate par1World, Random par2Random, int par3, int par4, int par5)
+    {
+        // CraftBukkit end
         int l = par2Random.nextInt(3) + this.baseHeight;
         boolean flag = true;
 
@@ -56,9 +67,16 @@
                     {
                         if (i1 >= 0 && i1 < 256)
                         {
-                            l1 = par1World.getBlockId(j1, i1, k1);
-
-                            if (l1 != 0 && l1 != Block.leaves.blockID && l1 != Block.grass.blockID && l1 != Block.dirt.blockID && l1 != Block.wood.blockID && l1 != Block.sapling.blockID)
+                            l1 = par1World.getTypeId(j1, i1, k1);
+                            Block block = Block.blocksList[l1];
+
+                            if (block != null &&
+                               !block.isAirBlock(par1World, j1, i1, k1) &&
+                               !block.isLeaves(par1World, j1, i1, k1) &&
+                               !block.isWood(par1World, j1, i1, k1) &&
+                                block != Block.grass &&
+                                block != Block.dirt &&
+                                block != Block.sapling)
                             {
                                 flag = false;
                             }
@@ -77,14 +95,17 @@
             }
             else
             {
-                i1 = par1World.getBlockId(par3, par4 - 1, par5);
-
-                if ((i1 == Block.grass.blockID || i1 == Block.dirt.blockID) && par4 < 256 - l - 1)
-                {
-                    par1World.setBlock(par3, par4 - 1, par5, Block.dirt.blockID, 0, 2);
-                    par1World.setBlock(par3 + 1, par4 - 1, par5, Block.dirt.blockID, 0, 2);
-                    par1World.setBlock(par3, par4 - 1, par5 + 1, Block.dirt.blockID, 0, 2);
-                    par1World.setBlock(par3 + 1, par4 - 1, par5 + 1, Block.dirt.blockID, 0, 2);
+                i1 = par1World.getTypeId(par3, par4 - 1, par5);
+
+                Block soil = Block.blocksList[i1];
+                boolean isValidSoil = soil != null && soil.canSustainPlant(par1World, par3, par4 - 1, par5, ForgeDirection.UP, (BlockSapling)Block.sapling);
+
+                if (isValidSoil && par4 < 256 - l - 1)
+                {
+                    onPlantGrow(par1World, par3,     par4 - 1, par5,     par3, par4, par5);
+                    onPlantGrow(par1World, par3 + 1, par4 - 1, par5,     par3, par4, par5);
+                    onPlantGrow(par1World, par3,     par4 - 1, par5 + 1, par3, par4, par5);
+                    onPlantGrow(par1World, par3 + 1, par4 - 1, par5 + 1, par3, par4, par5);
                     this.growLeaves(par1World, par3, par5, par4 + l, 2, par2Random);
 
                     for (int i2 = par4 + l - 2 - par2Random.nextInt(4); i2 > par4 + l / 2; i2 -= 2 + par2Random.nextInt(4))
@@ -98,90 +119,90 @@
                         {
                             k1 = par3 + (int)(1.5F + MathHelper.cos(f) * (float)j2);
                             l1 = par5 + (int)(1.5F + MathHelper.sin(f) * (float)j2);
-                            this.setBlockAndMetadata(par1World, k1, i2 - 3 + j2 / 2, l1, Block.wood.blockID, this.woodMetadata);
+                            this.setTypeAndData(par1World, k1, i2 - 3 + j2 / 2, l1, Block.wood.blockID, this.woodMetadata);
                         }
                     }
 
                     for (j1 = 0; j1 < l; ++j1)
                     {
-                        k1 = par1World.getBlockId(par3, par4 + j1, par5);
-
-                        if (k1 == 0 || k1 == Block.leaves.blockID)
-                        {
-                            this.setBlockAndMetadata(par1World, par3, par4 + j1, par5, Block.wood.blockID, this.woodMetadata);
+                        k1 = par1World.getTypeId(par3, par4 + j1, par5);
+
+                        if (isReplaceable(par1World, par3, par4 + j1, par5))
+                        {
+                            this.setTypeAndData(par1World, par3, par4 + j1, par5, Block.wood.blockID, this.woodMetadata);
 
                             if (j1 > 0)
                             {
-                                if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3 - 1, par4 + j1, par5))
-                                {
-                                    this.setBlockAndMetadata(par1World, par3 - 1, par4 + j1, par5, Block.vine.blockID, 8);
-                                }
-
-                                if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3, par4 + j1, par5 - 1))
-                                {
-                                    this.setBlockAndMetadata(par1World, par3, par4 + j1, par5 - 1, Block.vine.blockID, 1);
+                                if (par2Random.nextInt(3) > 0 && par1World.isEmpty(par3 - 1, par4 + j1, par5))
+                                {
+                                    this.setTypeAndData(par1World, par3 - 1, par4 + j1, par5, Block.vine.blockID, 8);
+                                }
+
+                                if (par2Random.nextInt(3) > 0 && par1World.isEmpty(par3, par4 + j1, par5 - 1))
+                                {
+                                    this.setTypeAndData(par1World, par3, par4 + j1, par5 - 1, Block.vine.blockID, 1);
                                 }
                             }
                         }
 
                         if (j1 < l - 1)
                         {
-                            k1 = par1World.getBlockId(par3 + 1, par4 + j1, par5);
-
-                            if (k1 == 0 || k1 == Block.leaves.blockID)
-                            {
-                                this.setBlockAndMetadata(par1World, par3 + 1, par4 + j1, par5, Block.wood.blockID, this.woodMetadata);
+                            k1 = par1World.getTypeId(par3 + 1, par4 + j1, par5);
+
+                            if (isReplaceable(par1World, par3 + 1, par4 + j1, par5))
+                            {
+                                this.setTypeAndData(par1World, par3 + 1, par4 + j1, par5, Block.wood.blockID, this.woodMetadata);
 
                                 if (j1 > 0)
                                 {
-                                    if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3 + 2, par4 + j1, par5))
-                                    {
-                                        this.setBlockAndMetadata(par1World, par3 + 2, par4 + j1, par5, Block.vine.blockID, 2);
-                                    }
-
-                                    if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3 + 1, par4 + j1, par5 - 1))
-                                    {
-                                        this.setBlockAndMetadata(par1World, par3 + 1, par4 + j1, par5 - 1, Block.vine.blockID, 1);
-                                    }
-                                }
-                            }
-
-                            k1 = par1World.getBlockId(par3 + 1, par4 + j1, par5 + 1);
-
-                            if (k1 == 0 || k1 == Block.leaves.blockID)
-                            {
-                                this.setBlockAndMetadata(par1World, par3 + 1, par4 + j1, par5 + 1, Block.wood.blockID, this.woodMetadata);
+                                    if (par2Random.nextInt(3) > 0 && par1World.isEmpty(par3 + 2, par4 + j1, par5))
+                                    {
+                                        this.setTypeAndData(par1World, par3 + 2, par4 + j1, par5, Block.vine.blockID, 2);
+                                    }
+
+                                    if (par2Random.nextInt(3) > 0 && par1World.isEmpty(par3 + 1, par4 + j1, par5 - 1))
+                                    {
+                                        this.setTypeAndData(par1World, par3 + 1, par4 + j1, par5 - 1, Block.vine.blockID, 1);
+                                    }
+                                }
+                            }
+
+                            k1 = par1World.getTypeId(par3 + 1, par4 + j1, par5 + 1);
+
+                            if (isReplaceable(par1World, par3 + 1, par4 + j1, par5 + 1))
+                            {
+                                this.setTypeAndData(par1World, par3 + 1, par4 + j1, par5 + 1, Block.wood.blockID, this.woodMetadata);
 
                                 if (j1 > 0)
                                 {
-                                    if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3 + 2, par4 + j1, par5 + 1))
-                                    {
-                                        this.setBlockAndMetadata(par1World, par3 + 2, par4 + j1, par5 + 1, Block.vine.blockID, 2);
-                                    }
-
-                                    if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3 + 1, par4 + j1, par5 + 2))
-                                    {
-                                        this.setBlockAndMetadata(par1World, par3 + 1, par4 + j1, par5 + 2, Block.vine.blockID, 4);
-                                    }
-                                }
-                            }
-
-                            k1 = par1World.getBlockId(par3, par4 + j1, par5 + 1);
-
-                            if (k1 == 0 || k1 == Block.leaves.blockID)
-                            {
-                                this.setBlockAndMetadata(par1World, par3, par4 + j1, par5 + 1, Block.wood.blockID, this.woodMetadata);
+                                    if (par2Random.nextInt(3) > 0 && par1World.isEmpty(par3 + 2, par4 + j1, par5 + 1))
+                                    {
+                                        this.setTypeAndData(par1World, par3 + 2, par4 + j1, par5 + 1, Block.vine.blockID, 2);
+                                    }
+
+                                    if (par2Random.nextInt(3) > 0 && par1World.isEmpty(par3 + 1, par4 + j1, par5 + 2))
+                                    {
+                                        this.setTypeAndData(par1World, par3 + 1, par4 + j1, par5 + 2, Block.vine.blockID, 4);
+                                    }
+                                }
+                            }
+
+                            k1 = par1World.getTypeId(par3, par4 + j1, par5 + 1);
+
+                            if (isReplaceable(par1World, par3, par4 + j1, par5 + 1))
+                            {
+                                this.setTypeAndData(par1World, par3, par4 + j1, par5 + 1, Block.wood.blockID, this.woodMetadata);
 
                                 if (j1 > 0)
                                 {
-                                    if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3 - 1, par4 + j1, par5 + 1))
-                                    {
-                                        this.setBlockAndMetadata(par1World, par3 - 1, par4 + j1, par5 + 1, Block.vine.blockID, 8);
-                                    }
-
-                                    if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3, par4 + j1, par5 + 2))
-                                    {
-                                        this.setBlockAndMetadata(par1World, par3, par4 + j1, par5 + 2, Block.vine.blockID, 4);
+                                    if (par2Random.nextInt(3) > 0 && par1World.isEmpty(par3 - 1, par4 + j1, par5 + 1))
+                                    {
+                                        this.setTypeAndData(par1World, par3 - 1, par4 + j1, par5 + 1, Block.vine.blockID, 8);
+                                    }
+
+                                    if (par2Random.nextInt(3) > 0 && par1World.isEmpty(par3, par4 + j1, par5 + 2))
+                                    {
+                                        this.setTypeAndData(par1World, par3, par4 + j1, par5 + 2, Block.vine.blockID, 4);
                                     }
                                 }
                             }
@@ -202,34 +223,51 @@
         }
     }
 
-    private void growLeaves(World par1World, int par2, int par3, int par4, int par5, Random par6Random)
+    // CraftBukkit - Changed signature
+    private void growLeaves(BlockChangeDelegate world, int i, int j, int k, int l, Random random)
     {
         byte b0 = 2;
 
-        for (int i1 = par4 - b0; i1 <= par4; ++i1)
-        {
-            int j1 = i1 - par4;
-            int k1 = par5 + 1 - j1;
-
-            for (int l1 = par2 - k1; l1 <= par2 + k1 + 1; ++l1)
-            {
-                int i2 = l1 - par2;
-
-                for (int j2 = par3 - k1; j2 <= par3 + k1 + 1; ++j2)
-                {
-                    int k2 = j2 - par3;
-
-                    if ((i2 >= 0 || k2 >= 0 || i2 * i2 + k2 * k2 <= k1 * k1) && (i2 <= 0 && k2 <= 0 || i2 * i2 + k2 * k2 <= (k1 + 1) * (k1 + 1)) && (par6Random.nextInt(4) != 0 || i2 * i2 + k2 * k2 <= (k1 - 1) * (k1 - 1)))
-                    {
-                        int l2 = par1World.getBlockId(l1, i1, j2);
-
-                        if (l2 == 0 || l2 == Block.leaves.blockID)
-                        {
-                            this.setBlockAndMetadata(par1World, l1, i1, j2, Block.leaves.blockID, this.leavesMetadata);
-                        }
-                    }
-                }
-            }
-        }
+        for (int i1 = k - b0; i1 <= k; ++i1)
+        {
+            int j1 = i1 - k;
+            int k1 = l + 1 - j1;
+
+            for (int l1 = i - k1; l1 <= i + k1 + 1; ++l1)
+            {
+                int i2 = l1 - i;
+
+                for (int j2 = j - k1; j2 <= j + k1 + 1; ++j2)
+                {
+                    int k2 = j2 - j;
+
+                    if ((i2 >= 0 || k2 >= 0 || i2 * i2 + k2 * k2 <= k1 * k1) && (i2 <= 0 && k2 <= 0 || i2 * i2 + k2 * k2 <= (k1 + 1) * (k1 + 1)) && (random.nextInt(4) != 0 || i2 * i2 + k2 * k2 <= (k1 - 1) * (k1 - 1)))
+                    {
+                        int l2 = world.getTypeId(l1, i1, j2);
+                        Block block = Block.blocksList[l2];
+
+                        if (block == null || block.canBeReplacedByLeaves(world, l1, i1, j2))
+                        {
+                            this.setTypeAndData(world, l1, i1, j2, Block.leaves.blockID, this.leavesMetadata);
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    private void onPlantGrow(BlockChangeDelegate world, int x, int y, int z, int sourceX, int sourceY, int sourceZ)
+    {
+        Block block = Block.blocksList[world.getTypeId(x, y, z)];
+        if (block != null)
+        {
+            block.onPlantGrow(world, x, y, z, sourceX, sourceY, sourceZ);
+        }
+    }
+
+    private boolean isReplaceable(BlockChangeDelegate world, int x, int y, int z)
+    {
+        Block block = Block.blocksList[world.getTypeId(x, y, z)];
+        return (block == null || block.isAirBlock(world, x, y, z) || block.isLeaves(world, x, y, z));
     }
 }
