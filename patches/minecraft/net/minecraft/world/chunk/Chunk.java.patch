--- a/net/minecraft/world/chunk/Chunk.java
+++ b/net/minecraft/world/chunk/Chunk.java
@@ -58,7 +_,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class Chunk implements IChunk {
+public class Chunk extends net.minecraftforge.common.capabilities.CapabilityProvider<Chunk> implements IChunk, net.minecraftforge.common.extensions.IForgeChunk {
    private static final Logger LOGGER = LogManager.getLogger();
    @Nullable
    public static final ChunkSection EMPTY_SECTION = null;
@@ -92,6 +_,7 @@
    }
 
    public Chunk(World p_i225781_1_, ChunkPos p_i225781_2_, BiomeContainer p_i225781_3_, UpgradeData p_i225781_4_, ITickList<Block> p_i225781_5_, ITickList<Fluid> p_i225781_6_, long p_i225781_7_, @Nullable ChunkSection[] p_i225781_9_, @Nullable Consumer<Chunk> p_i225781_10_) {
+      super(Chunk.class);
       this.entitySections = new ClassInheritanceMultiMap[16];
       this.level = p_i225781_1_;
       this.chunkPos = p_i225781_2_;
@@ -119,7 +_,7 @@
             LOGGER.warn("Could not set level chunk sections, array length is {} instead of {}", p_i225781_9_.length, this.sections.length);
          }
       }
-
+      this.gatherCapabilities();
    }
 
    public Chunk(World p_i49947_1_, ChunkPrimer p_i49947_2_) {
@@ -264,28 +_,28 @@
 
          if (!this.level.isClientSide) {
             blockstate.onRemove(this.level, p_177436_1_, p_177436_2_, p_177436_3_);
-         } else if (block1 != block && block1 instanceof ITileEntityProvider) {
+         } else if ((block1 != block || !p_177436_2_.hasTileEntity()) && blockstate.hasTileEntity()) {
             this.level.removeBlockEntity(p_177436_1_);
          }
 
          if (!chunksection.getBlockState(i, j & 15, k).is(block)) {
             return null;
          } else {
-            if (block1 instanceof ITileEntityProvider) {
+            if (blockstate.hasTileEntity()) {
                TileEntity tileentity = this.getBlockEntity(p_177436_1_, Chunk.CreateEntityType.CHECK);
                if (tileentity != null) {
                   tileentity.clearCache();
                }
             }
 
-            if (!this.level.isClientSide) {
+            if (!this.level.isClientSide && !this.level.captureBlockSnapshots) {
                p_177436_2_.onPlace(this.level, p_177436_1_, blockstate, p_177436_3_);
             }
 
-            if (block instanceof ITileEntityProvider) {
+            if (p_177436_2_.hasTileEntity()) {
                TileEntity tileentity1 = this.getBlockEntity(p_177436_1_, Chunk.CreateEntityType.CHECK);
                if (tileentity1 == null) {
-                  tileentity1 = ((ITileEntityProvider)block).newBlockEntity(this.level);
+                  tileentity1 = p_177436_2_.createTileEntity(this.level);
                   this.level.setBlockEntity(p_177436_1_, tileentity1);
                } else {
                   tileentity1.clearCache();
@@ -321,11 +_,13 @@
          k = this.entitySections.length - 1;
       }
 
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityEvent.EnteringChunk(p_76612_1_, this.chunkPos.x, this.chunkPos.z, p_76612_1_.xChunk, p_76612_1_.zChunk));
       p_76612_1_.inChunk = true;
       p_76612_1_.xChunk = this.chunkPos.x;
       p_76612_1_.yChunk = k;
       p_76612_1_.zChunk = this.chunkPos.z;
       this.entitySections[k].add(p_76612_1_);
+      this.markUnsaved(); // Forge - ensure chunks are marked to save after an entity add
    }
 
    public void setHeightmap(Heightmap.Type p_201607_1_, long[] p_201607_2_) {
@@ -346,6 +_,7 @@
       }
 
       this.entitySections[p_76608_2_].remove(p_76608_1_);
+      this.markUnsaved(); // Forge - ensure chunks are marked to save after entity removals
    }
 
    public int getHeight(Heightmap.Type p_201576_1_, int p_201576_2_, int p_201576_3_) {
@@ -356,7 +_,7 @@
    private TileEntity createBlockEntity(BlockPos p_177422_1_) {
       BlockState blockstate = this.getBlockState(p_177422_1_);
       Block block = blockstate.getBlock();
-      return !block.isEntityBlock() ? null : ((ITileEntityProvider)block).newBlockEntity(this.level);
+      return !blockstate.hasTileEntity() ? null : blockstate.createTileEntity(this.level);
    }
 
    @Nullable
@@ -367,6 +_,10 @@
    @Nullable
    public TileEntity getBlockEntity(BlockPos p_177424_1_, Chunk.CreateEntityType p_177424_2_) {
       TileEntity tileentity = this.blockEntities.get(p_177424_1_);
+      if (tileentity != null && tileentity.isRemoved()) {
+         blockEntities.remove(p_177424_1_);
+         tileentity = null;
+      }
       if (tileentity == null) {
          CompoundNBT compoundnbt = this.pendingBlockEntities.remove(p_177424_1_);
          if (compoundnbt != null) {
@@ -382,9 +_,6 @@
             tileentity = this.createBlockEntity(p_177424_1_);
             this.level.setBlockEntity(p_177424_1_, tileentity);
          }
-      } else if (tileentity.isRemoved()) {
-         this.blockEntities.remove(p_177424_1_);
-         return null;
       }
 
       return tileentity;
@@ -399,7 +_,7 @@
    }
 
    public void setBlockEntity(BlockPos p_177426_1_, TileEntity p_177426_2_) {
-      if (this.getBlockState(p_177426_1_).getBlock() instanceof ITileEntityProvider) {
+      if (this.getBlockState(p_177426_1_).hasTileEntity()) {
          p_177426_2_.setLevelAndPosition(this.level, p_177426_1_);
          p_177426_2_.clearRemoved();
          TileEntity tileentity = this.blockEntities.put(p_177426_1_.immutable(), p_177426_2_);
@@ -418,9 +_,14 @@
    public CompoundNBT getBlockEntityNbtForSaving(BlockPos p_223134_1_) {
       TileEntity tileentity = this.getBlockEntity(p_223134_1_);
       if (tileentity != null && !tileentity.isRemoved()) {
+         try {
          CompoundNBT compoundnbt1 = tileentity.save(new CompoundNBT());
          compoundnbt1.putBoolean("keepPacked", false);
          return compoundnbt1;
+         } catch (Exception e) {
+            LogManager.getLogger().error("A TileEntity type {} has thrown an exception trying to write state. It will not persist, Report this to the mod author", tileentity.getClass().getName(), e);
+            return null;
+         }
       } else {
          CompoundNBT compoundnbt = this.pendingBlockEntities.get(p_223134_1_);
          if (compoundnbt != null) {
@@ -455,8 +_,8 @@
    }
 
    public void getEntities(@Nullable Entity p_177414_1_, AxisAlignedBB p_177414_2_, List<Entity> p_177414_3_, @Nullable Predicate<? super Entity> p_177414_4_) {
-      int i = MathHelper.floor((p_177414_2_.minY - 2.0D) / 16.0D);
-      int j = MathHelper.floor((p_177414_2_.maxY + 2.0D) / 16.0D);
+      int i = MathHelper.floor((p_177414_2_.minY - this.level.getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.floor((p_177414_2_.maxY + this.level.getMaxEntityRadius()) / 16.0D);
       i = MathHelper.clamp(i, 0, this.entitySections.length - 1);
       j = MathHelper.clamp(j, 0, this.entitySections.length - 1);
 
@@ -472,6 +_,7 @@
                   p_177414_3_.add(entity);
                }
 
+               if (false) // // Forge: Fix MC-158205: Moved into World.getEntities()
                if (entity instanceof EnderDragonEntity) {
                   for(EnderDragonPartEntity enderdragonpartentity : ((EnderDragonEntity)entity).getSubEntities()) {
                      if (enderdragonpartentity != p_177414_1_ && enderdragonpartentity.getBoundingBox().intersects(p_177414_2_) && (p_177414_4_ == null || p_177414_4_.test(enderdragonpartentity))) {
@@ -486,8 +_,8 @@
    }
 
    public <T extends Entity> void getEntities(@Nullable EntityType<?> p_217313_1_, AxisAlignedBB p_217313_2_, List<? super T> p_217313_3_, Predicate<? super T> p_217313_4_) {
-      int i = MathHelper.floor((p_217313_2_.minY - 2.0D) / 16.0D);
-      int j = MathHelper.floor((p_217313_2_.maxY + 2.0D) / 16.0D);
+      int i = MathHelper.floor((p_217313_2_.minY - this.level.getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.floor((p_217313_2_.maxY + this.level.getMaxEntityRadius()) / 16.0D);
       i = MathHelper.clamp(i, 0, this.entitySections.length - 1);
       j = MathHelper.clamp(j, 0, this.entitySections.length - 1);
 
@@ -502,8 +_,8 @@
    }
 
    public <T extends Entity> void getEntitiesOfClass(Class<? extends T> p_177430_1_, AxisAlignedBB p_177430_2_, List<T> p_177430_3_, @Nullable Predicate<? super T> p_177430_4_) {
-      int i = MathHelper.floor((p_177430_2_.minY - 2.0D) / 16.0D);
-      int j = MathHelper.floor((p_177430_2_.maxY + 2.0D) / 16.0D);
+      int i = MathHelper.floor((p_177430_2_.minY - this.level.getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.floor((p_177430_2_.maxY + this.level.getMaxEntityRadius()) / 16.0D);
       i = MathHelper.clamp(i, 0, this.entitySections.length - 1);
       j = MathHelper.clamp(j, 0, this.entitySections.length - 1);
 
@@ -535,6 +_,11 @@
       };
       Sets.newHashSet(this.blockEntities.keySet()).stream().filter(predicate).forEach(this.level::removeBlockEntity);
 
+      for (TileEntity tileEntity : blockEntities.values()) {
+         tileEntity.clearCache();
+         tileEntity.getBlockState();
+      }
+
       for(int i = 0; i < this.sections.length; ++i) {
          ChunkSection chunksection = this.sections[i];
          if ((p_227073_4_ & 1 << i) == 0) {
@@ -598,7 +_,7 @@
 
    public Stream<BlockPos> getLights() {
       return StreamSupport.stream(BlockPos.betweenClosed(this.chunkPos.getMinBlockX(), 0, this.chunkPos.getMinBlockZ(), this.chunkPos.getMaxBlockX(), 255, this.chunkPos.getMaxBlockZ()).spliterator(), false).filter((p_217312_1_) -> {
-         return this.getBlockState(p_217312_1_).getLightEmission() != 0;
+         return this.getBlockState(p_217312_1_).getLightValue(getLevel(), p_217312_1_) != 0;
       });
    }
 
@@ -704,9 +_,8 @@
       BlockState blockstate = this.getBlockState(p_212815_1_);
       TileEntity tileentity;
       if ("DUMMY".equals(p_212815_2_.getString("id"))) {
-         Block block = blockstate.getBlock();
-         if (block instanceof ITileEntityProvider) {
-            tileentity = ((ITileEntityProvider)block).newBlockEntity(this.level);
+         if (blockstate.hasTileEntity()) {
+            tileentity = blockstate.createTileEntity(this.level);
          } else {
             tileentity = null;
             LOGGER.warn("Tried to load a DUMMY block entity @ {} but found not block entity block {} at location", p_212815_1_, blockstate);
@@ -794,5 +_,31 @@
       IMMEDIATE,
       QUEUED,
       CHECK;
+   }
+
+   /**
+    * <strong>FOR INTERNAL USE ONLY</strong>
+    * <p>
+    * Only public for use in {@link AnvilChunkLoader}.
+    */
+   @java.lang.Deprecated
+   @javax.annotation.Nullable
+   public final CompoundNBT writeCapsToNBT() {
+      return this.serializeCaps();
+   }
+
+   /**
+    * <strong>FOR INTERNAL USE ONLY</strong>
+    * <p>
+    * Only public for use in {@link AnvilChunkLoader}.
+    */
+   @java.lang.Deprecated
+   public final void readCapsFromNBT(CompoundNBT tag) {
+      this.deserializeCaps(tag);
+   }
+
+   @Override
+   public World getWorldForge() {
+      return getLevel();
    }
 }
