--- ../src_base/minecraft/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
+++ ../src_work/minecraft/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
@@ -1,9 +1,6 @@
 package net.minecraft.world.chunk.storage;
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.File;
-import java.io.IOException;
+import java.io.*;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -27,11 +24,17 @@
 import net.minecraft.world.chunk.NibbleArray;
 import net.minecraft.world.storage.IThreadedFileIO;
 import net.minecraft.world.storage.ThreadedFileIOBase;
-
-public class AnvilChunkLoader implements IChunkLoader, IThreadedFileIO
+import net.minecraftforge.common.MinecraftForge;
+import java.io.DataInput;
+import java.io.DataOutput;
+
+import net.minecraftforge.event.world.ChunkDataEvent;
+import net.minecraftforge.event.world.ChunkDataEvent.Load;
+import net.minecraftforge.event.world.ChunkDataEvent.Save;
+
+public class AnvilChunkLoader implements IThreadedFileIO, IChunkLoader
 {
-    private List chunksToRemove = new ArrayList();
-    private Set pendingAnvilChunksCoordinates = new HashSet();
+    private java.util.LinkedHashMap<ChunkCoordIntPair, AnvilChunkLoaderPending> pendingSaves = new java.util.LinkedHashMap<ChunkCoordIntPair, AnvilChunkLoaderPending>(); // Spigot
     private Object syncLockObject = new Object();
 
     /** Save directory for chunks using the Anvil format */
@@ -42,79 +45,160 @@
         this.chunkSaveLocation = par1File;
     }
 
+    // CraftBukkit start
+    public boolean chunkExists(World world, int i, int j)
+    {
+        ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(i, j);
+
+        synchronized (this.syncLockObject)
+        {
+            // Spigot start
+            if (pendingSaves.containsKey(chunkcoordintpair))
+            {
+                return true;
+            }
+        }
+
+        // Spigot end
+        return RegionFileCache.createOrLoadRegionFile(this.chunkSaveLocation, i, j).chunkExists(i & 31, j & 31);
+    }
+    // CraftBukkit end
+
+    // CraftBukkit start - Add async variant, provide compatibility
+
     /**
      * Loads the specified(XZ) chunk into the specified world.
      */
-    public Chunk loadChunk(World par1World, int par2, int par3) throws IOException
-    {
+    public Chunk loadChunk(World par1World, int par2, int par3)
+    {
+        Object[] data = this.loadChunk__Async_CB(par1World, par2, par3);
+
+        if (data != null)
+        {
+            Chunk chunk = (Chunk) data[0];
+            NBTTagCompound nbttagcompound = (NBTTagCompound) data[1];
+            this.loadEntities(chunk, nbttagcompound.getCompoundTag("Level"), par1World);
+            MinecraftForge.EVENT_BUS.post(new ChunkDataEvent.Load(chunk, nbttagcompound)); // MCPC+ - Don't call ChunkDataEvent.Load async
+            return chunk;
+        }
+
+        return null;
+    }
+
+    public Object[] loadChunk__Async_CB(World world, int i, int j)
+    {
+        // CraftBukkit end
         NBTTagCompound nbttagcompound = null;
-        ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(par2, par3);
+        ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(i, j);
         Object object = this.syncLockObject;
 
         synchronized (this.syncLockObject)
         {
-            if (this.pendingAnvilChunksCoordinates.contains(chunkcoordintpair))
-            {
-                for (int k = 0; k < this.chunksToRemove.size(); ++k)
-                {
-                    if (((AnvilChunkLoaderPending)this.chunksToRemove.get(k)).chunkCoordinate.equals(chunkcoordintpair))
-                    {
-                        nbttagcompound = ((AnvilChunkLoaderPending)this.chunksToRemove.get(k)).nbtTags;
+            // Spigot start
+            AnvilChunkLoaderPending anvilchunkloaderpending = pendingSaves.get(chunkcoordintpair);
+
+            if (anvilchunkloaderpending != null)
+            {
+                nbttagcompound = anvilchunkloaderpending.nbtTags;
+            }
+
+            /*
+            if (this.b.contains(chunkcoordintpair)) {
+                for (int k = 0; k < this.a.size(); ++k) {
+                    if (((PendingChunkToSave) this.a.get(k)).a.equals(chunkcoordintpair)) {
+                        nbttagcompound = ((PendingChunkToSave) this.a.get(k)).b;
                         break;
                     }
                 }
             }
+            */// Spigot end
         }
 
         if (nbttagcompound == null)
         {
-            DataInputStream datainputstream = RegionFileCache.getChunkInputStream(this.chunkSaveLocation, par2, par3);
+            DataInputStream datainputstream = RegionFileCache.getChunkInputStream(this.chunkSaveLocation, i, j);
 
             if (datainputstream == null)
             {
                 return null;
             }
 
-            nbttagcompound = CompressedStreamTools.read(datainputstream);
-        }
-
-        return this.checkedReadChunkFromNBT(par1World, par2, par3, nbttagcompound);
-    }
-
-    /**
-     * Wraps readChunkFromNBT. Checks the coordinates and several NBT tags.
-     */
-    protected Chunk checkedReadChunkFromNBT(World par1World, int par2, int par3, NBTTagCompound par4NBTTagCompound)
-    {
-        if (!par4NBTTagCompound.hasKey("Level"))
-        {
-            par1World.getWorldLogAgent().logSevere("Chunk file at " + par2 + "," + par3 + " is missing level data, skipping");
+            // MCPC+ start - catch exception for MCP binary compatibility
+            try {
+                nbttagcompound = CompressedStreamTools.read((DataInput) datainputstream);
+            } catch (Throwable t) {
+                t.printStackTrace();
+            }
+            // MCPC+ end
+        }
+
+        return this.a(world, i, j, nbttagcompound);
+    }
+
+    protected Object[] a(World world, int i, int j, NBTTagCompound nbttagcompound)   // CraftBukkit - return Chunk -> Object[]
+    {
+        if (!nbttagcompound.hasKey("Level"))
+        {
+            world.getWorldLogAgent().logSevere("Chunk file at " + i + "," + j + " is missing level data, skipping");
             return null;
         }
-        else if (!par4NBTTagCompound.getCompoundTag("Level").hasKey("Sections"))
-        {
-            par1World.getWorldLogAgent().logSevere("Chunk file at " + par2 + "," + par3 + " is missing block data, skipping");
+        else if (!nbttagcompound.getCompoundTag("Level").hasKey("Sections"))
+        {
+            world.getWorldLogAgent().logSevere("Chunk file at " + i + "," + j + " is missing block data, skipping");
             return null;
         }
         else
         {
-            Chunk chunk = this.readChunkFromNBT(par1World, par4NBTTagCompound.getCompoundTag("Level"));
-
-            if (!chunk.isAtLocation(par2, par3))
-            {
-                par1World.getWorldLogAgent().logSevere("Chunk file at " + par2 + "," + par3 + " is in the wrong location; relocating. (Expected " + par2 + ", " + par3 + ", got " + chunk.xPosition + ", " + chunk.zPosition + ")");
-                par4NBTTagCompound.setInteger("xPos", par2);
-                par4NBTTagCompound.setInteger("zPos", par3);
-                chunk = this.readChunkFromNBT(par1World, par4NBTTagCompound.getCompoundTag("Level"));
-            }
-
-            return chunk;
-        }
-    }
-
-    public void saveChunk(World par1World, Chunk par2Chunk) throws MinecraftException, IOException
-    {
-        par1World.checkSessionLock();
+            Chunk chunk = this.readChunkFromNBT(world, nbttagcompound.getCompoundTag("Level"));
+
+            if (!chunk.isAtLocation(i, j))
+            {
+                world.getWorldLogAgent().logSevere("Chunk file at " + i + "," + j + " is in the wrong location; relocating. (Expected " + i + ", " + j + ", got " + chunk.xPosition + ", " + chunk.zPosition + ")");
+                nbttagcompound.getCompoundTag("Level").setInteger("xPos", i); // CraftBukkit - .getCompound("Level")
+                nbttagcompound.getCompoundTag("Level").setInteger("zPos", j); // CraftBukkit - .getCompound("Level")
+                // CraftBukkit start - Have to move tile entities since we don't load them at this stage
+                NBTTagList tileEntities = nbttagcompound.getCompoundTag("Level").getTagList("TileEntities");
+
+                if (tileEntities != null)
+                {
+                    for (int te = 0; te < tileEntities.tagCount(); te++)
+                    {
+                        NBTTagCompound tileEntity = (NBTTagCompound) tileEntities.tagAt(te);
+                        int x = tileEntity.getInteger("x") - chunk.xPosition * 16;
+                        int z = tileEntity.getInteger("z") - chunk.zPosition * 16;
+                        tileEntity.setInteger("x", i * 16 + x);
+                        tileEntity.setInteger("z", j * 16 + z);
+                    }
+                }
+
+                // CraftBukkit end
+                chunk = this.readChunkFromNBT(world, nbttagcompound.getCompoundTag("Level"));
+            }
+
+            // CraftBukkit start
+            Object[] data = new Object[2];
+            data[0] = chunk;
+            data[1] = nbttagcompound;
+            // MCPC+ - Don't call ChunkDataEvent.Load async
+            return data;
+            // CraftBukkit end
+        }
+    }
+
+    public void saveChunk(World par1World, Chunk par2Chunk)
+    {
+        // CraftBukkit start - "handle" exception
+        try
+        {
+            par1World.checkSessionLock();
+        }
+        catch (MinecraftException ex)
+        {
+            // MCPC+ disable this for now.
+            //ex.printStackTrace();
+        }
+
+        // CraftBukkit end
 
         try
         {
@@ -122,6 +206,7 @@
             NBTTagCompound nbttagcompound1 = new NBTTagCompound();
             nbttagcompound.setTag("Level", nbttagcompound1);
             this.writeChunkToNBT(par2Chunk, par1World, nbttagcompound1);
+            MinecraftForge.EVENT_BUS.post(new ChunkDataEvent.Save(par2Chunk, nbttagcompound));
             this.addChunkToPending(par2Chunk.getChunkCoordIntPair(), nbttagcompound);
         }
         catch (Exception exception)
@@ -136,6 +221,12 @@
 
         synchronized (this.syncLockObject)
         {
+            // Spigot start
+            if (this.pendingSaves.put(par1ChunkCoordIntPair, new AnvilChunkLoaderPending(par1ChunkCoordIntPair, par2NBTTagCompound)) != null)
+            {
+                return;
+            }
+            /*
             if (this.pendingAnvilChunksCoordinates.contains(par1ChunkCoordIntPair))
             {
                 for (int i = 0; i < this.chunksToRemove.size(); ++i)
@@ -150,6 +241,7 @@
 
             this.chunksToRemove.add(new AnvilChunkLoaderPending(par1ChunkCoordIntPair, par2NBTTagCompound));
             this.pendingAnvilChunksCoordinates.add(par1ChunkCoordIntPair);
+            */// Spigot end
             ThreadedFileIOBase.threadedIOInstance.queueIO(this);
         }
     }
@@ -164,6 +256,15 @@
 
         synchronized (this.syncLockObject)
         {
+            // Spigot start
+            if (this.pendingSaves.isEmpty())
+            {
+                return false;
+            }
+
+            anvilchunkloaderpending = this.pendingSaves.values().iterator().next();
+            this.pendingSaves.remove(anvilchunkloaderpending.chunkCoordinate);
+            /*
             if (this.chunksToRemove.isEmpty())
             {
                 return false;
@@ -171,6 +272,7 @@
 
             anvilchunkloaderpending = (AnvilChunkLoaderPending)this.chunksToRemove.remove(0);
             this.pendingAnvilChunksCoordinates.remove(anvilchunkloaderpending.chunkCoordinate);
+            */// Spigot end
         }
 
         if (anvilchunkloaderpending != null)
@@ -188,10 +290,10 @@
         return true;
     }
 
-    private void writeChunkNBTTags(AnvilChunkLoaderPending par1AnvilChunkLoaderPending) throws IOException
+    public void writeChunkNBTTags(AnvilChunkLoaderPending par1AnvilChunkLoaderPending) throws java.io.IOException   // CraftBukkit - public -> private, added throws
     {
         DataOutputStream dataoutputstream = RegionFileCache.getChunkOutputStream(this.chunkSaveLocation, par1AnvilChunkLoaderPending.chunkCoordinate.chunkXPos, par1AnvilChunkLoaderPending.chunkCoordinate.chunkZPos);
-        CompressedStreamTools.write(par1AnvilChunkLoaderPending.nbtTags, dataoutputstream);
+        CompressedStreamTools.write(par1AnvilChunkLoaderPending.nbtTags, (DataOutput) dataoutputstream);
         dataoutputstream.close();
     }
 
@@ -249,19 +351,19 @@
 
                 if (extendedblockstorage.getBlockMSBArray() != null)
                 {
-                    nbttagcompound1.setByteArray("Add", extendedblockstorage.getBlockMSBArray().data);
-                }
-
-                nbttagcompound1.setByteArray("Data", extendedblockstorage.getMetadataArray().data);
-                nbttagcompound1.setByteArray("BlockLight", extendedblockstorage.getBlocklightArray().data);
+                    nbttagcompound1.setByteArray("Add", extendedblockstorage.getBlockMSBArray().getValueArray()); // Spigot
+                }
+
+                nbttagcompound1.setByteArray("Data", extendedblockstorage.getMetadataArray().getValueArray()); // Spigot
+                nbttagcompound1.setByteArray("BlockLight", extendedblockstorage.getBlocklightArray().getValueArray()); // Spigot
 
                 if (flag)
                 {
-                    nbttagcompound1.setByteArray("SkyLight", extendedblockstorage.getSkylightArray().data);
+                    nbttagcompound1.setByteArray("SkyLight", extendedblockstorage.getSkylightArray().getValueArray()); // Spigot
                 }
                 else
                 {
-                    nbttagcompound1.setByteArray("SkyLight", new byte[extendedblockstorage.getBlocklightArray().data.length]);
+                    nbttagcompound1.setByteArray("SkyLight", new byte[extendedblockstorage.getBlocklightArray().getValueArray().length]); // Spigot
                 }
 
                 nbttaglist.appendTag(nbttagcompound1);
@@ -294,8 +396,10 @@
                 catch (Exception e)
                 {
                     FMLLog.log(Level.SEVERE, e,
-                            "An Entity type %s has thrown an exception trying to write state. It will not persist. Report this to the mod author",
-                            entity.getClass().getName());
+                            "An Entity type %s at %s,%f,%f,%f has thrown an exception trying to write state. It will not persist. Report this to the mod author",
+                            entity.getClass().getName(),
+                            entity.worldObj.getWorld().getName(),
+                            entity.posX, entity.posY, entity.posZ); // MCPC+ - add location
                 }
             }
         }
@@ -316,8 +420,10 @@
             catch (Exception e)
             {
                 FMLLog.log(Level.SEVERE, e,
-                        "A TileEntity type %s has throw an exception trying to write state. It will not persist. Report this to the mod author",
-                        tileentity.getClass().getName());
+                        "A TileEntity type %s at %s,%d,%d,%d has throw an exception trying to write state. It will not persist. Report this to the mod author",
+                        tileentity.getClass().getName(),
+                        tileentity.worldObj.getWorld().getName(),
+                        tileentity.xCoord, tileentity.yCoord, tileentity.zCoord); // MCPC+ - add location
             }
         }
 
@@ -395,14 +501,21 @@
             chunk.setBiomeArray(par2NBTTagCompound.getByteArray("Biomes"));
         }
 
-        NBTTagList nbttaglist1 = par2NBTTagCompound.getTagList("Entities");
+        // CraftBukkit start - End this method here and split off entity loading to another method
+        return chunk;
+    }
+
+    public void loadEntities(Chunk chunk, NBTTagCompound nbttagcompound, World world)
+    {
+        // CraftBukkit end
+        NBTTagList nbttaglist1 = nbttagcompound.getTagList("Entities");
 
         if (nbttaglist1 != null)
         {
             for (int l = 0; l < nbttaglist1.tagCount(); ++l)
             {
                 NBTTagCompound nbttagcompound2 = (NBTTagCompound)nbttaglist1.tagAt(l);
-                Entity entity = EntityList.createEntityFromNBT(nbttagcompound2, par1World);
+                Entity entity = EntityList.createEntityFromNBT(nbttagcompound2, world);
                 chunk.hasEntities = true;
 
                 if (entity != null)
@@ -412,7 +525,7 @@
 
                     for (NBTTagCompound nbttagcompound3 = nbttagcompound2; nbttagcompound3.hasKey("Riding"); nbttagcompound3 = nbttagcompound3.getCompoundTag("Riding"))
                     {
-                        Entity entity2 = EntityList.createEntityFromNBT(nbttagcompound3.getCompoundTag("Riding"), par1World);
+                        Entity entity2 = EntityList.createEntityFromNBT(nbttagcompound3.getCompoundTag("Riding"), world);
 
                         if (entity2 != null)
                         {
@@ -426,7 +539,7 @@
             }
         }
 
-        NBTTagList nbttaglist2 = par2NBTTagCompound.getTagList("TileEntities");
+        NBTTagList nbttaglist2 = nbttagcompound.getTagList("TileEntities");
 
         if (nbttaglist2 != null)
         {
@@ -442,20 +555,20 @@
             }
         }
 
-        if (par2NBTTagCompound.hasKey("TileTicks"))
-        {
-            NBTTagList nbttaglist3 = par2NBTTagCompound.getTagList("TileTicks");
+        if (nbttagcompound.hasKey("TileTicks"))
+        {
+            NBTTagList nbttaglist3 = nbttagcompound.getTagList("TileTicks");
 
             if (nbttaglist3 != null)
             {
                 for (int j1 = 0; j1 < nbttaglist3.tagCount(); ++j1)
                 {
                     NBTTagCompound nbttagcompound5 = (NBTTagCompound)nbttaglist3.tagAt(j1);
-                    par1World.scheduleBlockUpdateFromLoad(nbttagcompound5.getInteger("x"), nbttagcompound5.getInteger("y"), nbttagcompound5.getInteger("z"), nbttagcompound5.getInteger("i"), nbttagcompound5.getInteger("t"), nbttagcompound5.getInteger("p"));
-                }
-            }
-        }
-
-        return chunk;
+                    world.scheduleBlockUpdateFromLoad(nbttagcompound5.getInteger("x"), nbttagcompound5.getInteger("y"), nbttagcompound5.getInteger("z"), nbttagcompound5.getInteger("i"), nbttagcompound5.getInteger("t"), nbttagcompound5.getInteger("p"));
+                }
+            }
+        }
+
+        // return chunk; // CraftBukkit
     }
 }
