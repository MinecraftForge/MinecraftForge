--- a/net/minecraft/resources/HolderSetCodec.java
+++ b/net/minecraft/resources/HolderSetCodec.java
@@ -21,6 +_,8 @@
     private final Codec<Holder<E>> elementCodec;
     private final Codec<List<Holder<E>>> homogenousListCodec;
     private final Codec<Either<TagKey<E>, List<Holder<E>>>> registryAwareCodec;
+    private final Codec<net.minecraftforge.registries.holdersets.ICustomHolderSet<E>> forgeDispatchCodec;
+    private final Codec<Either<net.minecraftforge.registries.holdersets.ICustomHolderSet<E>, Either<TagKey<E>, List<Holder<E>>>>> combinedCodec;
 
     private static <E> Codec<List<Holder<E>>> homogenousList(Codec<Holder<E>> p_206668_, boolean p_206669_) {
         Codec<List<Holder<E>>> codec = p_206668_.listOf().validate(ExtraCodecs.ensureHomogenous(Holder::kind));
@@ -42,6 +_,10 @@
         this.elementCodec = p_206661_;
         this.homogenousListCodec = homogenousList(p_206661_, p_206662_);
         this.registryAwareCodec = Codec.either(TagKey.hashedCodec(p_206660_), this.homogenousListCodec);
+        // FORGE: make registry-specific dispatch codec and make forge-or-vanilla either codec
+        this.forgeDispatchCodec = Codec.lazyInitialized(() -> net.minecraftforge.registries.ForgeRegistries.HOLDER_SET_TYPES.get().getCodec())
+            .dispatch(net.minecraftforge.registries.holdersets.ICustomHolderSet::type, type -> type.makeCodec(p_206660_, p_206661_, p_206662_));
+        this.combinedCodec = Codec.either(this.forgeDispatchCodec, this.registryAwareCodec);
     }
 
     @Override
@@ -50,14 +_,17 @@
             Optional<HolderGetter<E>> optional = registryops.getter(this.registryKey);
             if (optional.isPresent()) {
                 HolderGetter<E> holdergetter = optional.get();
-                return this.registryAwareCodec
+                return this.combinedCodec
                     .decode(p_206696_, p_206697_)
                     .flatMap(
                         p_326147_ -> {
                             DataResult<HolderSet<E>> dataresult = p_326147_.getFirst()
+                                .map(custom -> DataResult.success(custom),
+                                tagOrList -> tagOrList
                                 .map(
                                     p_326145_ -> lookupTag(holdergetter, (TagKey<E>)p_326145_),
                                     p_326140_ -> DataResult.success(HolderSet.direct((List<? extends Holder<E>>)p_326140_))
+                                )
                                 );
                             return dataresult.map(p_326149_ -> Pair.of((HolderSet<E>)p_326149_, (T)p_326147_.getSecond()));
                         }
@@ -90,7 +_,7 @@
     }
 
     private <T> DataResult<Pair<HolderSet<E>, T>> decodeWithoutRegistry(DynamicOps<T> p_206671_, T p_206672_) {
-        return this.elementCodec.listOf().decode(p_206671_, p_206672_).flatMap(p_206666_ -> {
+        return this.homogenousListCodec.decode(p_206671_, p_206672_).flatMap(p_206666_ -> { // Forge: Match encodeWithoutRegistry's use of the homogenousListCodec
             List<Holder.Direct<E>> list = new ArrayList<>();
 
             for (Holder<E> holder : p_206666_.getFirst()) {
@@ -106,6 +_,9 @@
     }
 
     private <T> DataResult<T> encodeWithoutRegistry(HolderSet<E> p_206690_, DynamicOps<T> p_206691_, T p_206692_) {
+        // FORGE: use the dispatch codec to encode custom holdersets, otherwise fall back to vanilla tag/list
+        if (p_206690_ instanceof net.minecraftforge.registries.holdersets.ICustomHolderSet<E> customHolderSet)
+            return this.forgeDispatchCodec.encode(customHolderSet, p_206691_, p_206692_);
         return this.homogenousListCodec.encode(p_206690_.stream().toList(), p_206691_, p_206692_);
     }
 }
