--- a/net/minecraft/resources/RegistryLoader.java
+++ b/net/minecraft/resources/RegistryLoader.java
@@ -26,7 +_,7 @@
       Map<ResourceKey<E>, RegistryResourceAccess.EntryThunk<E>> map = this.f_206750_.m_214030_(p_206764_);
       DataResult<WritableRegistry<E>> dataresult = DataResult.success(p_206763_, Lifecycle.stable());
 
-      for(Map.Entry<ResourceKey<E>, RegistryResourceAccess.EntryThunk<E>> entry : map.entrySet()) {
+      for(Map.Entry<ResourceKey<E>, RegistryResourceAccess.EntryThunk<E>> entry : net.minecraftforge.common.ForgeHooks.filterThunks(map)) {
          dataresult = dataresult.flatMap((p_214227_) -> {
             return this.m_214228_(p_214227_, p_206764_, p_206765_, entry.getKey(), Optional.of(entry.getValue()), p_206766_).map((p_206761_) -> {
                return p_214227_;
@@ -48,7 +_,12 @@
       if (dataresult != null) {
          return dataresult;
       } else {
-         Holder<E> holder = p_214229_.m_214121_(p_214232_);
+         // Prevents an exception from disrupting codec decoding when calling this with prematurely frozen registries - see comment in LevelStorageSource
+         DataResult<Holder<E>> maybeHolder = p_214229_.m_214185_(p_214232_);
+         if (maybeHolder.error().isPresent()) {
+            return maybeHolder;
+         }
+         Holder<E> holder = maybeHolder.result().get();
          readcache.f_206803_.put(p_214232_, DataResult.success(holder));
          DataResult<Holder<E>> dataresult1;
          if (p_214233_.isEmpty()) {
