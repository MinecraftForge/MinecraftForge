--- a/net/minecraft/resources/ResourceLocation.java
+++ b/net/minecraft/resources/ResourceLocation.java
@@ -38,6 +_,7 @@
         this.path = p_249394_;
     }
 
+    /** Forge: Consider using {@link #fromNamespaceAndPath(String, String)} instead, as Mojang made this constructor private in Vanilla 1.21 */
     public ResourceLocation(String p_135811_, String p_135812_) {
         this(assertValidNamespace(p_135811_, p_135812_), assertValidPath(p_135811_, p_135812_), null);
     }
@@ -46,6 +_,7 @@
         this(p_135814_[0], p_135814_[1]);
     }
 
+    /** Forge: Consider using {@link #parse(String)} instead, as Mojang made this constructor private in Vanilla 1.21 */
     public ResourceLocation(String p_135809_) {
         this(decompose(p_135809_, ':'));
     }
@@ -147,6 +_,12 @@
         return i;
     }
 
+    /** Normal compare sorts by path first, this compares namespace first. */
+    public int compareNamespaced(ResourceLocation o) {
+        int ret = this.namespace.compareTo(o.namespace);
+        return ret != 0 ? ret : this.path.compareTo(o.path);
+    }
+
     public String toDebugFileName() {
         return this.toString().replace('/', '_').replace(':', '_');
     }
@@ -279,5 +_,15 @@
         public JsonElement serialize(ResourceLocation p_135855_, Type p_135856_, JsonSerializationContext p_135857_) {
             return new JsonPrimitive(p_135855_.toString());
         }
+    }
+
+    /** Forge: Backport of Vanilla 1.21 method */
+    public static ResourceLocation fromNamespaceAndPath(String namespace, String path) {
+        return new ResourceLocation(namespace, path);
+    }
+
+    /** Forge: Backport of Vanilla 1.21 method */
+    public static ResourceLocation parse(String location) {
+        return new ResourceLocation(location);
     }
 }
