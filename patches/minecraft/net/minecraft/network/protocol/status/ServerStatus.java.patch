--- a/net/minecraft/network/protocol/status/ServerStatus.java
+++ b/net/minecraft/network/protocol/status/ServerStatus.java
@@ -21,6 +_,16 @@
    private ServerStatus.Players f_134901_;
    private ServerStatus.Version f_134902_;
    private String f_134903_;
+   private transient net.minecraftforge.fmllegacy.network.FMLStatusPing forgeData;
+
+   public net.minecraftforge.fmllegacy.network.FMLStatusPing getForgeData() {
+      return this.forgeData;
+   }
+
+   public void setForgeData(net.minecraftforge.fmllegacy.network.FMLStatusPing data){
+      this.forgeData = data;
+      invalidateJson();
+   }
 
    public Component m_134905_() {
       return this.f_134900_;
@@ -28,6 +_,7 @@
 
    public void m_134908_(Component p_134909_) {
       this.f_134900_ = p_134909_;
+      invalidateJson();
    }
 
    public ServerStatus.Players m_134914_() {
@@ -36,6 +_,7 @@
 
    public void m_134910_(ServerStatus.Players p_134911_) {
       this.f_134901_ = p_134911_;
+      invalidateJson();
    }
 
    public ServerStatus.Version m_134915_() {
@@ -44,16 +_,51 @@
 
    public void m_134912_(ServerStatus.Version p_134913_) {
       this.f_134902_ = p_134913_;
+      invalidateJson();
    }
 
    public void m_134906_(String p_134907_) {
       this.f_134903_ = p_134907_;
+      invalidateJson();
    }
 
    public String m_134916_() {
       return this.f_134903_;
    }
 
+   private java.util.concurrent.Semaphore mutex = new java.util.concurrent.Semaphore(1);
+   private String json = null;
+   /**
+    * Returns this object as a Json string.
+    * Converting to JSON if a cached version is not available.
+    *
+    * Also to prevent potentially large memory allocations on the server
+    * this is moved from the SPacketServerInfo writePacket function
+    *
+    * As this method is called from the network threads so thread safety is important!
+    */
+   public String getJson() {
+      String ret = this.json;
+      if (ret == null) {
+         mutex.acquireUninterruptibly();
+         ret = this.json;
+         if (ret == null) {
+            ret = net.minecraft.network.protocol.status.ClientboundStatusResponsePacket.f_134885_.toJson(this);
+            this.json = ret;
+         }
+         mutex.release();
+      }
+      return ret;
+   }
+
+   /**
+    * Invalidates the cached json, causing the next call to getJson to rebuild it.
+    * This is needed externally because PlayerCountData.setPlayer's is public.
+    */
+   public void invalidateJson() {
+      this.json = null;
+   }
+
    public static class Players {
       private final int f_134917_;
       private final int f_134918_;
@@ -145,6 +_,10 @@
             serverstatus.m_134906_(GsonHelper.m_13906_(jsonobject, "favicon"));
          }
 
+         if (jsonobject.has("forgeData")) {
+            serverstatus.setForgeData(net.minecraftforge.fmllegacy.network.FMLStatusPing.Serializer.deserialize(GsonHelper.m_13930_(jsonobject, "forgeData"), p_134949_));
+         }
+
          return serverstatus;
       }
 
@@ -164,6 +_,10 @@
 
          if (p_134951_.m_134916_() != null) {
             jsonobject.addProperty("favicon", p_134951_.m_134916_());
+         }
+
+         if(p_134951_.getForgeData() != null){
+            jsonobject.add("forgeData", net.minecraftforge.fmllegacy.network.FMLStatusPing.Serializer.serialize(p_134951_.getForgeData(), p_134953_));
          }
 
          return jsonobject;
