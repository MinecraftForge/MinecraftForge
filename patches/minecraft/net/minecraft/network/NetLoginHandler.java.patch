--- ../src_base/minecraft/net/minecraft/network/NetLoginHandler.java
+++ ../src_work/minecraft/net/minecraft/network/NetLoginHandler.java
@@ -10,6 +10,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
+import java.util.logging.Logger;
 import javax.crypto.SecretKey;
 
 import cpw.mods.fml.common.network.FMLNetworkHandler;
@@ -47,11 +48,12 @@
     private volatile boolean field_72544_i;
 
     /** server ID that is randomly generated by this login handler. */
-    private String loginServerId = "";
+    private String loginServerId = Long.toString(rand.nextLong(), 16); // CraftBukkit - Security fix
     private boolean field_92079_k;
 
     /** Secret AES key obtained from the client's Packet252SharedKey */
     private SecretKey sharedKey;
+    public String hostname = ""; // CraftBukkit - add field
 
     public NetLoginHandler(MinecraftServer par1MinecraftServer, Socket par2Socket, String par3Str) throws IOException
     {
@@ -59,6 +61,13 @@
         this.myTCPConnection = new TcpConnection(par1MinecraftServer.getLogAgent(), par2Socket, par3Str, this, par1MinecraftServer.getKeyPair().getPrivate());
         this.myTCPConnection.field_74468_e = 0;
     }
+
+    // CraftBukkit start
+    public Socket getSocket()
+    {
+        return this.myTCPConnection.getSocket();
+    }
+    // CraftBukkit end
 
     /**
      * Logs the user in if a login packet is found, otherwise keeps processing network packets unless the timeout has
@@ -96,6 +105,7 @@
         }
     }
 
+    private static final java.util.regex.Pattern validName = java.util.regex.Pattern.compile("^[a-zA-Z0-9_-]{2,16}$"); // Spigot
     public void handleClientProtocol(Packet2ClientProtocol par1Packet2ClientProtocol)
     {
         if (this.clientUsername != null)
@@ -104,9 +114,10 @@
         }
         else
         {
+            this.hostname = par1Packet2ClientProtocol.serverHost + ':' + par1Packet2ClientProtocol.serverPort; // CraftBukkit - initialize field
             this.clientUsername = par1Packet2ClientProtocol.getUsername();
 
-            if (!this.clientUsername.equals(StringUtils.stripControlCodes(this.clientUsername)))
+            if (!this.clientUsername.equals(StringUtils.stripControlCodes(this.clientUsername)) || !validName.matcher( this.clientUsername ).matches() ) // Spigot
             {
                 this.raiseErrorAndDisconnect("Invalid username!");
             }
@@ -118,11 +129,11 @@
                 {
                     if (par1Packet2ClientProtocol.getProtocolVersion() > 78)
                     {
-                        this.raiseErrorAndDisconnect("Outdated server!");
+                        this.raiseErrorAndDisconnect(org.spigotmc.SpigotConfig.outdatedServerMessage); // Spigot
                     }
                     else
                     {
-                        this.raiseErrorAndDisconnect("Outdated client!");
+                        this.raiseErrorAndDisconnect(org.spigotmc.SpigotConfig.outdatedClientMessage); // Spigot
                     }
                 }
                 else
@@ -163,7 +174,7 @@
 
             if (this.mcServer.isServerInOnlineMode())
             {
-                (new ThreadLoginVerifier(this)).start();
+                (new ThreadLoginVerifier(this, mcServer.server)).start(); // CraftBukkit - add CraftServer
             }
             else
             {
@@ -187,18 +198,26 @@
 
     public void completeConnection(String s)
     {
-
         if (s != null)
         {
             this.raiseErrorAndDisconnect(s);
         }
+
+        // CraftBukkit start
+        EntityPlayerMP entityplayermp = this.mcServer.getConfigurationManager().attemptLogin(this, this.clientUsername, this.hostname);
+
+        if (entityplayermp == null)
+        {
+            return;
+            // CraftBukkit end
+        }
         else
         {
-            EntityPlayerMP entityplayermp = this.mcServer.getConfigurationManager().createPlayerForUser(this.clientUsername);
+            entityplayermp = this.mcServer.getConfigurationManager().processLogin(entityplayermp); // CraftBukkit - this.h -> s // MCPC+ - reuse variable
 
             if (entityplayermp != null)
             {
-                this.mcServer.getConfigurationManager().initializeConnectionToPlayer(this.myTCPConnection, entityplayermp);
+                this.mcServer.getConfigurationManager().initializeConnectionToPlayer((INetworkManager) this.myTCPConnection, entityplayermp);
             }
         }
 
@@ -216,40 +235,52 @@
      */
     public void handleServerPing(Packet254ServerPing par1Packet254ServerPing)
     {
+        if (this.getSocket() == null) // MCPC+ - remove myTCPConnection
+        {
+            return;    // CraftBukkit - fix NPE when a client queries a server that is unable to handle it.
+        }
+
         try
         {
             ServerConfigurationManager serverconfigurationmanager = this.mcServer.getConfigurationManager();
             String s = null;
+            // CraftBukkit
+            org.bukkit.event.server.ServerListPingEvent pingEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callServerListPingEvent(this.mcServer.server, getSocket().getInetAddress(), this.mcServer.getMOTD(), serverconfigurationmanager.getCurrentPlayerCount(), serverconfigurationmanager.getMaxPlayers());
 
             if (par1Packet254ServerPing.func_140050_d())
             {
-                s = this.mcServer.getMOTD() + "\u00a7" + serverconfigurationmanager.getCurrentPlayerCount() + "\u00a7" + serverconfigurationmanager.getMaxPlayers();
+                // CraftBukkit
+                s = pingEvent.getMotd() + "\u00A7" + serverconfigurationmanager.getCurrentPlayerCount() + "\u00A7" + pingEvent.getMaxPlayers();
             }
             else
             {
-                List list = Arrays.asList(new Serializable[] {Integer.valueOf(1), Integer.valueOf(78), this.mcServer.getMinecraftVersion(), this.mcServer.getMOTD(), Integer.valueOf(serverconfigurationmanager.getCurrentPlayerCount()), Integer.valueOf(serverconfigurationmanager.getMaxPlayers())});
-                Object object;
-
-                for (Iterator iterator = list.iterator(); iterator.hasNext(); s = s + object.toString().replaceAll("\u0000", ""))
+                // CraftBukkit start - Don't create a list from an array
+                Object[] list = new Object[] { 1, 78, this.mcServer.getMinecraftVersion(), pingEvent.getMotd(), serverconfigurationmanager.getCurrentPlayerCount(), pingEvent.getMaxPlayers() };
+                StringBuilder builder = new StringBuilder();
+
+                for (Object object : list)
                 {
-                    object = iterator.next();
-
-                    if (s == null)
+                    if (builder.length() == 0)
                     {
-                        s = "\u00a7";
+                        builder.append('\u00A7');
                     }
                     else
                     {
-                        s = s + "\u0000";
+                        builder.append('\0');
                     }
+
+                    builder.append(org.apache.commons.lang.StringUtils.replace(object.toString(), "\0", ""));
                 }
+
+                s = builder.toString();
+                // CraftBukkit end
             }
 
             InetAddress inetaddress = null;
 
-            if (this.myTCPConnection.getSocket() != null)
-            {
-                inetaddress = this.myTCPConnection.getSocket().getInetAddress();
+            if (this.getSocket() != null)
+            {
+                inetaddress = this.getSocket().getInetAddress();
             }
 
             this.myTCPConnection.addToSendQueue(new Packet255KickDisconnect(s));
@@ -332,11 +363,24 @@
         return par0NetLoginHandler.field_72544_i = par1;
     }
     
-
+    // Spigot start
+    @Override
     public void handleCustomPayload(Packet250CustomPayload par1Packet250CustomPayload)
     {
-        FMLNetworkHandler.handlePacket250Packet(par1Packet250CustomPayload, myTCPConnection, this);
-    }
+        if (par1Packet250CustomPayload.channel.equals("BungeeCord") && org.spigotmc.SpigotConfig.bungee && org.spigotmc.SpigotConfig.bungeeAddresses.contains(getSocket().getInetAddress().getHostAddress()))
+        {
+            com.google.common.io.ByteArrayDataInput in = com.google.common.io.ByteStreams.newDataInput(par1Packet250CustomPayload.data);
+            String subTag = in.readUTF();
+
+            if (subTag.equals("Login"))
+            {
+                myTCPConnection.setSocketAddress(new java.net.InetSocketAddress(in.readUTF(), in.readInt()));
+            }
+        }
+            
+        FMLNetworkHandler.handlePacket250Packet(par1Packet250CustomPayload, myTCPConnection, this);  // MCPC+
+    }
+    // Spigot end    
 
     @Override
     public void handleVanilla250Packet(Packet250CustomPayload payload)
