--- a/net/minecraft/network/PacketBuffer.java
+++ b/net/minecraft/network/PacketBuffer.java
@@ -37,7 +_,7 @@
 import net.minecraft.util.math.vector.Vector3d;
 import net.minecraft.util.text.ITextComponent;
 
-public class PacketBuffer extends ByteBuf {
+public class PacketBuffer extends ByteBuf implements net.minecraftforge.common.extensions.IForgePacketBuffer {
    private final ByteBuf source;
 
    public PacketBuffer(ByteBuf p_i45154_1_) {
@@ -287,6 +_,15 @@
    }
 
    public PacketBuffer writeItem(ItemStack p_150788_1_) {
+      return writeItemStack(p_150788_1_, true);
+   }
+
+   /**
+    * Most ItemStack serialization is Server to Client,and doesn't need to know the FULL tag details.
+    * One exception is items from the creative menu, which must be sent from Client to Server with their full NBT.
+    * If you want to send the FULL tag set limitedTag to false
+    */
+   public PacketBuffer writeItemStack(ItemStack p_150788_1_, boolean limitedTag) {
       if (p_150788_1_.isEmpty()) {
          this.writeBoolean(false);
       } else {
@@ -295,8 +_,8 @@
          this.writeVarInt(Item.getId(item));
          this.writeByte(p_150788_1_.getCount());
          CompoundNBT compoundnbt = null;
-         if (item.canBeDepleted() || item.shouldOverrideMultiplayerNbt()) {
-            compoundnbt = p_150788_1_.getTag();
+         if (item.isDamageable(p_150788_1_) || item.shouldOverrideMultiplayerNbt()) {
+            compoundnbt = limitedTag ? p_150788_1_.getShareTag() : p_150788_1_.getTag();
          }
 
          this.writeNbt(compoundnbt);
@@ -312,7 +_,7 @@
          int i = this.readVarInt();
          int j = this.readByte();
          ItemStack itemstack = new ItemStack(Item.byId(i), j);
-         itemstack.setTag(this.readNbt());
+         itemstack.readShareTag(this.readNbt());
          return itemstack;
       }
    }
