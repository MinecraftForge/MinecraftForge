--- ../src-base/minecraft/net/minecraft/network/NetHandlerPlayServer.java
+++ ../src-work/minecraft/net/minecraft/network/NetHandlerPlayServer.java
@@ -2,9 +2,11 @@
 
 import com.google.common.base.Charsets;
 import com.google.common.collect.Lists;
+
 import io.netty.buffer.Unpooled;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
+
 import java.io.ByteArrayInputStream;
 import java.io.DataInputStream;
 import java.io.IOException;
@@ -12,6 +14,7 @@
 import java.util.Iterator;
 import java.util.Random;
 import java.util.concurrent.Callable;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.command.server.CommandBlockLogic;
 import net.minecraft.crash.CrashReport;
@@ -80,11 +83,21 @@
 import net.minecraft.util.IChatComponent;
 import net.minecraft.util.IntHashMap;
 import net.minecraft.util.ReportedException;
+import net.minecraft.util.Util;
 import net.minecraft.world.WorldServer;
+
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.common.MinecraftForge;
+import cpw.mods.fml.common.eventhandler.Event;
+import net.minecraftforge.event.ForgeEventFactory;
+import net.minecraftforge.event.ServerChatEvent;
+import net.minecraftforge.event.entity.player.PlayerInteractEvent;
+import net.minecraftforge.event.entity.player.PlayerInteractEvent.Action;
+
 public class NetHandlerPlayServer implements INetHandlerPlayServer
 {
     private static final Logger logger = LogManager.getLogger();
@@ -229,6 +242,11 @@
                         this.playerEntity.ridingEntity.updateRiderPosition();
                     }
 
+                    if (!this.hasMoved) //Fixes teleportation kick while riding entities
+                    {
+                        return;
+                    }
+
                     this.serverController.getConfigurationManager().updatePlayerPertinentChunks(this.playerEntity);
 
                     if (this.hasMoved)
@@ -306,9 +324,10 @@
                 d4 = d1 - this.playerEntity.posX;
                 double d5 = d2 - this.playerEntity.posY;
                 double d6 = d3 - this.playerEntity.posZ;
-                double d7 = Math.min(Math.abs(d4), Math.abs(this.playerEntity.motionX));
-                double d8 = Math.min(Math.abs(d5), Math.abs(this.playerEntity.motionY));
-                double d9 = Math.min(Math.abs(d6), Math.abs(this.playerEntity.motionZ));
+                //BUGFIX: min -> max, grabs the highest distance
+                double d7 = Math.max(Math.abs(d4), Math.abs(this.playerEntity.motionX));
+                double d8 = Math.max(Math.abs(d5), Math.abs(this.playerEntity.motionY));
+                double d9 = Math.max(Math.abs(d6), Math.abs(this.playerEntity.motionZ));
                 double d10 = d7 * d7 + d8 * d8 + d9 * d9;
 
                 if (d10 > 100.0D && (!this.serverController.isSinglePlayer() || !this.serverController.getServerOwner().equals(this.playerEntity.getCommandSenderName())))
@@ -326,6 +345,11 @@
                     this.playerEntity.jump();
                 }
 
+                if (!this.hasMoved) //Fixes "Moved Too Fast" kick when being teleported while moving
+                {
+                    return;
+                }
+
                 this.playerEntity.moveEntity(d4, d5, d6);
                 this.playerEntity.onGround = p_147347_1_.func_149465_i();
                 this.playerEntity.addMovementStat(d4, d5, d6);
@@ -348,10 +372,15 @@
                     logger.warn(this.playerEntity.getCommandSenderName() + " moved wrongly!");
                 }
 
+                if (!this.hasMoved) //Fixes "Moved Too Fast" kick when being teleported while moving
+                {
+                    return;
+                }
+
                 this.playerEntity.setPositionAndRotation(d1, d2, d3, f1, f2);
                 boolean flag2 = worldserver.getCollidingBoundingBoxes(this.playerEntity, this.playerEntity.boundingBox.copy().contract((double)f3, (double)f3, (double)f3)).isEmpty();
 
-                if (flag && (flag1 || !flag2) && !this.playerEntity.isPlayerSleeping())
+                if (flag && (flag1 || !flag2) && !this.playerEntity.isPlayerSleeping() && !this.playerEntity.noClip)
                 {
                     this.setPlayerLocation(this.lastPosX, this.lastPosY, this.lastPosZ, f1, f2);
                     return;
@@ -359,7 +388,7 @@
 
                 AxisAlignedBB axisalignedbb = this.playerEntity.boundingBox.copy().expand((double)f3, (double)f3, (double)f3).addCoord(0.0D, -0.55D, 0.0D);
 
-                if (!this.serverController.isFlightAllowed() && !this.playerEntity.theItemInWorldManager.isCreative() && !worldserver.checkBlockCollision(axisalignedbb))
+                if (!this.serverController.isFlightAllowed() && !this.playerEntity.theItemInWorldManager.isCreative() && !worldserver.checkBlockCollision(axisalignedbb) && !this.playerEntity.capabilities.allowFlying)
                 {
                     if (d11 >= -0.03125D)
                     {
@@ -378,6 +407,11 @@
                     this.floatingTickCount = 0;
                 }
 
+                if (!this.hasMoved) //Fixes "Moved Too Fast" kick when being teleported while moving
+                {
+                    return;
+                }
+
                 this.playerEntity.onGround = p_147347_1_.func_149465_i();
                 this.serverController.getConfigurationManager().updatePlayerPertinentChunks(this.playerEntity);
                 this.playerEntity.handleFalling(this.playerEntity.posY - d0, p_147347_1_.func_149465_i());
@@ -448,7 +482,10 @@
                 double d2 = this.playerEntity.posZ - ((double)k + 0.5D);
                 double d3 = d0 * d0 + d1 * d1 + d2 * d2;
 
-                if (d3 > 36.0D)
+                double dist = playerEntity.theItemInWorldManager.getBlockReachDistance() + 1;
+                dist *= dist;
+
+                if (d3 > dist)
                 {
                     return;
                 }
@@ -510,7 +547,11 @@
                 return;
             }
 
-            this.playerEntity.theItemInWorldManager.tryUseItem(this.playerEntity, worldserver, itemstack);
+            PlayerInteractEvent event = ForgeEventFactory.onPlayerInteract(playerEntity, PlayerInteractEvent.Action.RIGHT_CLICK_AIR, 0, 0, 0, -1);
+            if (event.useItem != Event.Result.DENY)
+            {
+                this.playerEntity.theItemInWorldManager.tryUseItem(this.playerEntity, worldserver, itemstack);
+            }
         }
         else if (p_147346_1_.func_149571_d() >= this.serverController.getBuildLimit() - 1 && (p_147346_1_.func_149568_f() == 1 || p_147346_1_.func_149571_d() >= this.serverController.getBuildLimit()))
         {
@@ -521,7 +562,9 @@
         }
         else
         {
-            if (this.hasMoved && this.playerEntity.getDistanceSq((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D) < 64.0D && !this.serverController.isBlockProtected(worldserver, i, j, k, this.playerEntity))
+            double dist = playerEntity.theItemInWorldManager.getBlockReachDistance() + 1;
+            dist *= dist;
+            if (this.hasMoved && this.playerEntity.getDistanceSq((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D) < dist && !this.serverController.isBlockProtected(worldserver, i, j, k, this.playerEntity))
             {
                 this.playerEntity.theItemInWorldManager.activateBlockOrUseItem(this.playerEntity, worldserver, itemstack, i, j, k, l, p_147346_1_.func_149573_h(), p_147346_1_.func_149569_i(), p_147346_1_.func_149575_j());
             }
@@ -690,6 +733,8 @@
             else
             {
                 ChatComponentTranslation chatcomponenttranslation1 = new ChatComponentTranslation("chat.type.text", new Object[] {this.playerEntity.func_145748_c_(), s});
+                chatcomponenttranslation1 = ForgeHooks.onServerChatEvent(this, s, chatcomponenttranslation1);
+                if (chatcomponenttranslation1 == null) return;
                 this.serverController.getConfigurationManager().sendChatMsgImpl(chatcomponenttranslation1, false);
             }
 
@@ -831,7 +876,7 @@
                         return;
                     }
 
-                    this.playerEntity = this.serverController.getConfigurationManager().respawnPlayer(this.playerEntity, 0, false);
+                    this.playerEntity = this.serverController.getConfigurationManager().respawnPlayer(this.playerEntity, playerEntity.dimension, false);
                 }
 
                 break;
@@ -950,13 +995,11 @@
 
         if (worldserver.blockExists(p_147343_1_.func_149588_c(), p_147343_1_.func_149586_d(), p_147343_1_.func_149585_e()))
         {
-            TileEntity tileentity = worldserver.getTileEntity(p_147343_1_.func_149588_c(), p_147343_1_.func_149586_d(), p_147343_1_.func_149585_e());
+            TileEntitySign tile = Util.getTileBehavior(worldserver, p_147343_1_.func_149588_c(), p_147343_1_.func_149586_d(), p_147343_1_.func_149585_e(), TileEntitySign.class);
 
-            if (tileentity instanceof TileEntitySign)
+            if (tile != null)
             {
-                TileEntitySign tileentitysign = (TileEntitySign)tileentity;
-
-                if (!tileentitysign.func_145914_a() || tileentitysign.func_145911_b() != this.playerEntity)
+                if (!tile.func_145914_a() || tile.func_145911_b() != this.playerEntity)
                 {
                     this.serverController.logWarning("Player " + this.playerEntity.getCommandSenderName() + " just tried to change non-editable sign");
                     return;
@@ -991,14 +1034,13 @@
                 }
             }
 
-            if (tileentity instanceof TileEntitySign)
+            if (tile != null)
             {
                 j = p_147343_1_.func_149588_c();
                 int k = p_147343_1_.func_149586_d();
                 i = p_147343_1_.func_149585_e();
-                TileEntitySign tileentitysign1 = (TileEntitySign)tileentity;
-                System.arraycopy(p_147343_1_.func_149589_f(), 0, tileentitysign1.signText, 0, 4);
-                tileentitysign1.markDirty();
+                System.arraycopy(p_147343_1_.func_149589_f(), 0, tile.signText, 0, 4);
+                tile.markDirty();
                 worldserver.markBlockForUpdate(j, k, i);
             }
         }
@@ -1140,11 +1182,11 @@
 
                         if (b0 == 0)
                         {
-                            TileEntity tileentity = this.playerEntity.worldObj.getTileEntity(packetbuffer.readInt(), packetbuffer.readInt(), packetbuffer.readInt());
+                            TileEntityCommandBlock tile = Util.getTileBehavior(this.playerEntity.worldObj, packetbuffer.readInt(), packetbuffer.readInt(), packetbuffer.readInt(), TileEntityCommandBlock.class);
 
-                            if (tileentity instanceof TileEntityCommandBlock)
+                            if (tile != null)
                             {
-                                commandblocklogic = ((TileEntityCommandBlock)tileentity).func_145993_a();
+                                commandblocklogic = tile.func_145993_a();
                             }
                         }
                         else if (b0 == 1)
