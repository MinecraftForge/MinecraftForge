--- a/net/minecraft/network/NetworkManager.java
+++ b/net/minecraft/network/NetworkManager.java
@@ -74,6 +_,7 @@
    private float averageSentPackets;
    private int tickCount;
    private boolean handlingFault;
+   private java.util.function.Consumer<NetworkManager> activationHandler;
 
    public NetworkManager(PacketDirection p_i46004_1_) {
       this.receiving = p_i46004_1_;
@@ -83,6 +_,7 @@
       super.channelActive(p_channelActive_1_);
       this.channel = p_channelActive_1_.channel();
       this.address = this.channel.remoteAddress();
+      if (activationHandler != null) activationHandler.accept(this);
 
       try {
          this.setProtocol(ProtocolType.HANDSHAKING);
@@ -171,7 +_,7 @@
       ++this.sentPackets;
       if (protocoltype1 != protocoltype) {
          LOGGER.debug("Disabled auto read");
-         this.channel.config().setAutoRead(false);
+         this.channel.eventLoop().execute(()->this.channel.config().setAutoRead(false));
       }
 
       if (this.channel.eventLoop().inEventLoop()) {
@@ -259,7 +_,9 @@
 
    @OnlyIn(Dist.CLIENT)
    public static NetworkManager connectToServer(InetAddress p_181124_0_, int p_181124_1_, boolean p_181124_2_) {
+      if (p_181124_0_ instanceof java.net.Inet6Address) System.setProperty("java.net.preferIPv4Stack", "false");
       final NetworkManager networkmanager = new NetworkManager(PacketDirection.CLIENTBOUND);
+      networkmanager.activationHandler = net.minecraftforge.fml.network.NetworkHooks::registerClientLoginChannel;
       Class<? extends SocketChannel> oclass;
       LazyValue<? extends EventLoopGroup> lazyvalue;
       if (Epoll.isAvailable() && p_181124_2_) {
@@ -286,6 +_,7 @@
    @OnlyIn(Dist.CLIENT)
    public static NetworkManager connectToLocalServer(SocketAddress p_150722_0_) {
       final NetworkManager networkmanager = new NetworkManager(PacketDirection.CLIENTBOUND);
+      networkmanager.activationHandler = net.minecraftforge.fml.network.NetworkHooks::registerClientLoginChannel;
       (new Bootstrap()).group(LOCAL_WORKER_GROUP.get()).handler(new ChannelInitializer<Channel>() {
          protected void initChannel(Channel p_initChannel_1_) throws Exception {
             p_initChannel_1_.pipeline().addLast("packet_handler", networkmanager);
@@ -374,6 +_,14 @@
    @OnlyIn(Dist.CLIENT)
    public float getAverageSentPackets() {
       return this.averageSentPackets;
+   }
+
+   public Channel channel() {
+      return channel;
+   }
+
+   public PacketDirection getDirection() {
+      return this.receiving;
    }
 
    static class QueuedPacket {
