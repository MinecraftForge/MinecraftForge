--- ../src_base/minecraft/net/minecraft/network/TcpConnection.java
+++ ../src_work/minecraft/net/minecraft/network/TcpConnection.java
@@ -16,8 +16,6 @@
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Queue;
-import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.atomic.AtomicInteger;
 import javax.crypto.SecretKey;
 import net.minecraft.logging.ILogAgent;
@@ -27,6 +25,8 @@
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.CryptManager;
 
+import java.io.IOException; // CraftBukkit
+
 public class TcpConnection implements INetworkManager
 {
     public static AtomicInteger field_74471_a = new AtomicInteger();
@@ -34,13 +34,15 @@
 
     /** The object used for synchronization on the send queue. */
     private final Object sendQueueLock;
-    private final ILogAgent field_98215_i;
+
+    /** Log agent for TCP connection */
+    private final ILogAgent tcpConLogAgent;
 
     /** The socket used by this network manager. */
-    private Socket networkSocket;
+    public Socket networkSocket; // CraftBukkit - private -> public
 
     /** The InetSocketAddress of the remote endpoint */
-    private final SocketAddress remoteSocketAddress;
+    private SocketAddress remoteSocketAddress; // Spigot - remove final
 
     /** The input stream connected to the socket. */
     private volatile DataInputStream socketInputStream;
@@ -59,13 +61,13 @@
     /**
      * Linked list of packets that have been read and are awaiting processing.
      */
-    private Queue readPackets;
+    private java.util.Queue readPackets; // CraftBukkit - Concurrent linked queue
 
     /** Linked list of packets awaiting sending. */
-    private List dataPackets;
+    private List dataPackets = Collections.synchronizedList(new ArrayList());
 
     /** Linked list of packets with chunk data that are awaiting sending. */
-    private List chunkDataPackets;
+    private List chunkDataPackets = Collections.synchronizedList(new ArrayList());
 
     /** A reference to the NetHandler object. */
     private NetHandler theNetHandler;
@@ -83,7 +85,9 @@
 
     /** A String indicating why the network has shutdown. */
     private String terminationReason;
-    private Object[] field_74480_w;
+
+    /** Contains shutdown description (internal error, etc.) as string array */
+    private Object[] shutdownDescription;
     private int field_74490_x;
 
     /**
@@ -113,14 +117,14 @@
     {
         this.sendQueueLock = new Object();
         this.isRunning = true;
-        this.readPackets = new ConcurrentLinkedQueue();
+        this.readPackets = new java.util.concurrent.ConcurrentLinkedQueue();
         this.dataPackets = Collections.synchronizedList(new ArrayList());
         this.chunkDataPackets = Collections.synchronizedList(new ArrayList());
         this.terminationReason = "";
         this.chunkDataPacketsDelay = 50;
         this.field_74463_A = par5PrivateKey;
         this.networkSocket = par2Socket;
-        this.field_98215_i = par1ILogAgent;
+        this.tcpConLogAgent = par1ILogAgent;
         this.remoteSocketAddress = par2Socket.getRemoteSocketAddress();
         this.theNetHandler = par4NetHandler;
 
@@ -189,7 +193,7 @@
             int i;
             int[] aint;
 
-            if (this.field_74468_e == 0 || !this.dataPackets.isEmpty() && MinecraftServer.func_130071_aq() - ((Packet)this.dataPackets.get(0)).creationTimeMillis >= (long)this.field_74468_e)
+            if (this.field_74468_e == 0 || !this.dataPackets.isEmpty() && MinecraftServer.getSystemTimeMillis() - ((Packet)this.dataPackets.get(0)).creationTimeMillis >= (long)this.field_74468_e)
             {
                 packet = this.func_74460_a(false);
 
@@ -214,7 +218,8 @@
                 }
             }
 
-            if (this.chunkDataPacketsDelay-- <= 0 && (this.field_74468_e == 0 || !this.chunkDataPackets.isEmpty() && MinecraftServer.func_130071_aq() - ((Packet)this.chunkDataPackets.get(0)).creationTimeMillis >= (long)this.field_74468_e))
+            // CraftBukkit - don't allow low priority packet to be sent unless it was placed in the queue before the first packet on the high priority queue TODO: is this still right?
+            if ((flag || this.chunkDataPacketsDelay-- <= 0) && !this.chunkDataPackets.isEmpty() && (this.dataPackets.isEmpty() || ((Packet) this.dataPackets.get(0)).creationTimeMillis > ((Packet) this.chunkDataPackets.get(0)).creationTimeMillis))
             {
                 packet = this.func_74460_a(true);
 
@@ -318,7 +323,7 @@
 
         try
         {
-            Packet packet = Packet.readPacket(this.field_98215_i, this.socketInputStream, this.theNetHandler.isServerHandler(), this.networkSocket);
+            Packet packet = Packet.readPacket(this.tcpConLogAgent, this.socketInputStream, this.theNetHandler.isServerHandler(), this.networkSocket);
 
             if (packet != null)
             {
@@ -374,7 +379,7 @@
      */
     private void onNetworkError(Exception par1Exception)
     {
-        par1Exception.printStackTrace();
+        // exception.printStackTrace(); // CraftBukkit - Remove console spam
         this.networkShutdown("disconnect.genericReason", new Object[] {"Internal exception: " + par1Exception.toString()});
     }
 
@@ -388,7 +393,7 @@
         {
             this.isTerminating = true;
             this.terminationReason = par1Str;
-            this.field_74480_w = par2ArrayOfObj;
+            this.shutdownDescription = par2ArrayOfObj;
             this.isRunning = false;
             (new TcpMasterThread(this)).start();
 
@@ -449,21 +454,25 @@
 
         int i = 1000;
 
-        while (i-- >= 0)
-        {
-            Packet packet = (Packet)this.readPackets.poll();
-
-            if (packet != null && !this.theNetHandler.func_142032_c())
-            {
-                packet.processPacket(this.theNetHandler);
-            }
+        while (!this.readPackets.isEmpty() && i-- >= 0)
+        {
+            Packet packet = (Packet) this.readPackets.poll(); // CraftBukkit - remove -> poll
+
+            // CraftBukkit start
+            if (this.theNetHandler instanceof NetLoginHandler ? ((NetLoginHandler) this.theNetHandler).connectionComplete : ((NetServerHandler) this.theNetHandler).connectionClosed)
+            {
+                continue;
+            }
+
+            // CraftBukkit end
+            packet.processPacket(this.theNetHandler);
         }
 
         this.wakeThreads();
 
         if (this.isTerminating && this.readPackets.isEmpty())
         {
-            this.theNetHandler.handleErrorMessage(this.terminationReason, this.field_74480_w);
+            this.theNetHandler.handleErrorMessage(this.terminationReason, this.shutdownDescription);
             FMLNetworkHandler.onConnectionClosed(this, this.theNetHandler.getPlayer());
         }
     }
@@ -589,4 +598,9 @@
     {
         return par0TcpConnection.writeThread;
     }
+
+    public void setSocketAddress(SocketAddress address)
+    {
+        remoteSocketAddress = address;    // Spigot
+    }
 }
