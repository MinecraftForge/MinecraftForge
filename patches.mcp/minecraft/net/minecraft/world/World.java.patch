--- ../src-base/minecraft/net/minecraft/world/World.java
+++ ../src-work/minecraft/net/minecraft/world/World.java
@@ -56,8 +56,30 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import net.minecraftforge.fml.common.FMLLog;
+import com.google.common.collect.ImmutableSetMultimap;
+import net.minecraftforge.client.ForgeHooksClient;
+import net.minecraftforge.common.ForgeChunkManager;
+import net.minecraftforge.common.ForgeChunkManager.Ticket;
+import net.minecraftforge.common.ForgeModContainer;
+import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.common.WorldSpecificSaveHandler;
+import net.minecraftforge.event.entity.EntityEvent;
+import net.minecraftforge.event.entity.EntityJoinWorldEvent;
+import net.minecraftforge.event.world.WorldEvent;
+import net.minecraftforge.event.entity.PlaySoundAtEntityEvent;
+import net.minecraft.entity.EnumCreatureType;
+
 public abstract class World implements IBlockAccess
 {
+   /**
+     * Used in the getEntitiesWithinAABB functions to expand the search area for entities.
+     * Modders should change this variable to a higher value if it is less then the radius
+     * of one of there entities.
+     */
+    public static double MAX_ENTITY_RADIUS = 2.0D;
+
     protected boolean scheduledUpdatesAreImmediate;
     public final List loadedEntityList = Lists.newArrayList();
     protected final List unloadedEntityList = Lists.newArrayList();
@@ -99,6 +121,10 @@
     int[] lightUpdateBlockList;
     private static final String __OBFID = "CL_00000140";
 
+    public boolean restoringBlockSnapshots = false;
+    public boolean captureBlockSnapshots = false;
+    public ArrayList<net.minecraftforge.common.util.BlockSnapshot> capturedBlockSnapshots = new ArrayList<net.minecraftforge.common.util.BlockSnapshot>();
+
     protected World(ISaveHandler saveHandlerIn, WorldInfo info, WorldProvider providerIn, Profiler profilerIn, boolean client)
     {
         this.ambientTickCountdown = this.rand.nextInt(12000);
@@ -111,6 +137,7 @@
         this.provider = providerIn;
         this.isRemote = client;
         this.worldBorder = providerIn.getWorldBorder();
+        perWorldStorage = new MapStorage((ISaveHandler)null);
     }
 
     public World init()
@@ -120,6 +147,11 @@
 
     public BiomeGenBase getBiomeGenForCoords(final BlockPos pos)
     {
+        return this.provider.getBiomeGenForCoords(pos);
+    }
+
+    public BiomeGenBase getBiomeGenForCoordsBody(final BlockPos pos)
+    {
         if (this.isBlockLoaded(pos))
         {
             Chunk chunk = this.getChunkFromBlockCoords(pos);
@@ -186,7 +218,7 @@
 
     public boolean isAirBlock(BlockPos pos)
     {
-        return this.getBlockState(pos).getBlock().getMaterial() == Material.air;
+        return this.getBlockState(pos).getBlock().isAir(this, pos);
     }
 
     public boolean isBlockLoaded(BlockPos pos)
@@ -286,39 +318,58 @@
         {
             Chunk chunk = this.getChunkFromBlockCoords(pos);
             Block block = newState.getBlock();
+
+            net.minecraftforge.common.util.BlockSnapshot blockSnapshot = null;
+            if (this.captureBlockSnapshots && !this.isRemote)
+            {
+                blockSnapshot = net.minecraftforge.common.util.BlockSnapshot.getBlockSnapshot(this, pos, flags);
+                this.capturedBlockSnapshots.add(blockSnapshot);
+            }
+            int oldLight = getBlockState(pos).getBlock().getLightValue(this, pos);
+
             IBlockState iblockstate1 = chunk.setBlockState(pos, newState);
 
             if (iblockstate1 == null)
             {
+                if (blockSnapshot != null) this.capturedBlockSnapshots.remove(blockSnapshot);
                 return false;
             }
             else
             {
                 Block block1 = iblockstate1.getBlock();
 
-                if (block.getLightOpacity() != block1.getLightOpacity() || block.getLightValue() != block1.getLightValue())
+                if (block.getLightOpacity() != block1.getLightOpacity() || block.getLightValue(this, pos) != oldLight)
                 {
                     this.theProfiler.startSection("checkLight");
                     this.checkLight(pos);
                     this.theProfiler.endSection();
                 }
 
-                if ((flags & 2) != 0 && (!this.isRemote || (flags & 4) == 0) && chunk.isPopulated())
+                if (blockSnapshot == null) // Don't notify clients or update physics while capturing blockstates
                 {
-                    this.markBlockForUpdate(pos);
+                    this.markAndNotifyBlock(pos, chunk, iblockstate1, newState, flags); // Modularize client and physic updates
                 }
 
-                if (!this.isRemote && (flags & 1) != 0)
-                {
-                    this.notifyNeighborsRespectDebug(pos, iblockstate1.getBlock());
+                return true;
+            }
+        }
+    }
 
-                    if (block.hasComparatorInputOverride())
-                    {
-                        this.updateComparatorOutputLevel(pos, block);
-                    }
-                }
+    // Split off from original setBlockState(BlockPos, IBlockState Block p_147465_4_, int) method in order to directly send client and physic updates
+    public void markAndNotifyBlock(BlockPos pos, Chunk chunk, IBlockState old, IBlockState new_, int flags)
+    {
+        if ((flags & 2) != 0 && (!this.isRemote || (flags & 4) == 0) && (chunk == null || chunk.isPopulated()))
+        {
+            this.markBlockForUpdate(pos);
+        }
 
-                return true;
+        if (!this.isRemote && (flags & 1) != 0)
+        {
+            this.notifyNeighborsRespectDebug(pos, old.getBlock());
+
+            if (new_.getBlock().hasComparatorInputOverride())
+            {
+                this.updateComparatorOutputLevel(pos, new_.getBlock());
             }
         }
     }
@@ -408,6 +459,9 @@
 
     public void notifyNeighborsOfStateChange(BlockPos pos, Block blockType)
     {
+        if(net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, pos, this.getBlockState(pos), java.util.EnumSet.allOf(EnumFacing.class)).isCanceled())
+            return;
+        
         this.notifyBlockOfStateChange(pos.west(), blockType);
         this.notifyBlockOfStateChange(pos.east(), blockType);
         this.notifyBlockOfStateChange(pos.down(), blockType);
@@ -418,6 +472,11 @@
 
     public void notifyNeighborsOfStateExcept(BlockPos pos, Block blockType, EnumFacing skipSide)
     {
+        java.util.EnumSet<EnumFacing> directions = java.util.EnumSet.allOf(EnumFacing.class);
+        directions.remove(skipSide);
+        if(net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, pos, this.getBlockState(pos), directions).isCanceled())
+            return;
+        
         if (skipSide != EnumFacing.WEST)
         {
             this.notifyBlockOfStateChange(pos.west(), blockType);
@@ -782,7 +841,7 @@
 
     public boolean isDaytime()
     {
-        return this.skylightSubtracted < 4;
+        return this.provider.isDaytime();
     }
 
     public MovingObjectPosition rayTraceBlocks(Vec3 p_72933_1_, Vec3 p_72933_2_)
@@ -978,6 +1037,11 @@
 
     public void playSoundAtEntity(Entity p_72956_1_, String p_72956_2_, float p_72956_3_, float p_72956_4_)
     {
+        PlaySoundAtEntityEvent event = net.minecraftforge.event.ForgeEventFactory.onPlaySoundAtEntity(p_72956_1_, p_72956_2_, p_72956_3_, p_72956_4_);
+        if (event.isCanceled() || event.name == null) return;
+        p_72956_2_ = event.name;
+        p_72956_3_ = event.newVolume;
+        p_72956_4_ = event.newPitch;
         for (int i = 0; i < this.worldAccesses.size(); ++i)
         {
             ((IWorldAccess)this.worldAccesses.get(i)).playSound(p_72956_2_, p_72956_1_.posX, p_72956_1_.posY, p_72956_1_.posZ, p_72956_3_, p_72956_4_);
@@ -986,6 +1050,11 @@
 
     public void playSoundToNearExcept(EntityPlayer p_85173_1_, String p_85173_2_, float p_85173_3_, float p_85173_4_)
     {
+        PlaySoundAtEntityEvent event = net.minecraftforge.event.ForgeEventFactory.onPlaySoundAtEntity(p_85173_1_, p_85173_2_, p_85173_3_, p_85173_4_);
+        if (event.isCanceled() || event.name == null) return;
+        p_85173_2_ = event.name;
+        p_85173_3_ = event.newVolume;
+        p_85173_4_ = event.newPitch;
         for (int i = 0; i < this.worldAccesses.size(); ++i)
         {
             ((IWorldAccess)this.worldAccesses.get(i)).playSoundToNearExcept(p_85173_1_, p_85173_2_, p_85173_1_.posX, p_85173_1_.posY, p_85173_1_.posZ, p_85173_3_, p_85173_4_);
@@ -1037,6 +1106,9 @@
 
     public boolean spawnEntityInWorld(Entity p_72838_1_)
     {
+        // do not drop any items while restoring blocksnapshots. Prevents dupes
+        if (!this.isRemote && (p_72838_1_ == null || (p_72838_1_ instanceof net.minecraft.entity.item.EntityItem && this.restoringBlockSnapshots))) return false;
+
         int i = MathHelper.floor_double(p_72838_1_.posX / 16.0D);
         int j = MathHelper.floor_double(p_72838_1_.posZ / 16.0D);
         boolean flag = p_72838_1_.forceSpawn;
@@ -1059,6 +1131,8 @@
                 this.updateAllPlayersSleepingFlag();
             }
 
+            if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(p_72838_1_, this)) && !flag) return false;
+
             this.getChunkFromChunkCoords(i, j).addEntity(p_72838_1_);
             this.loadedEntityList.add(p_72838_1_);
             this.onEntityAdded(p_72838_1_);
@@ -1271,17 +1345,29 @@
 
     public int calculateSkylightSubtracted(float p_72967_1_)
     {
+        float f2 = provider.getSunBrightnessFactor(p_72967_1_);
+        f2 = 1.0F - f2;
+        return (int)(f2 * 11.0F);
+    }
+
+    /**
+     * The current sun brightness factor for this dimension.
+     * 0.0f means no light at all, and 1.0f means maximum sunlight.
+     * Highly recommended for sunlight detection like solar panel.
+     *
+     * @return The current brightness factor
+     * */
+    public float getSunBrightnessFactor(float p_72967_1_)
+    {
         float f1 = this.getCelestialAngle(p_72967_1_);
         float f2 = 1.0F - (MathHelper.cos(f1 * (float)Math.PI * 2.0F) * 2.0F + 0.5F);
         f2 = MathHelper.clamp_float(f2, 0.0F, 1.0F);
         f2 = 1.0F - f2;
         f2 = (float)((double)f2 * (1.0D - (double)(this.getRainStrength(p_72967_1_) * 5.0F) / 16.0D));
         f2 = (float)((double)f2 * (1.0D - (double)(this.getThunderStrength(p_72967_1_) * 5.0F) / 16.0D));
-        f2 = 1.0F - f2;
-        return (int)(f2 * 11.0F);
+        return f2;
     }
 
-    @SideOnly(Side.CLIENT)
     public void removeWorldAccess(IWorldAccess p_72848_1_)
     {
         this.worldAccesses.remove(p_72848_1_);
@@ -1290,6 +1376,12 @@
     @SideOnly(Side.CLIENT)
     public float getSunBrightness(float p_72971_1_)
     {
+        return this.provider.getSunBrightness(p_72971_1_);
+    }
+
+    @SideOnly(Side.CLIENT)
+    public float getSunBrightnessBody(float p_72971_1_)
+    {
         float f1 = this.getCelestialAngle(p_72971_1_);
         float f2 = 1.0F - (MathHelper.cos(f1 * (float)Math.PI * 2.0F) * 2.0F + 0.2F);
         f2 = MathHelper.clamp_float(f2, 0.0F, 1.0F);
@@ -1302,6 +1394,12 @@
     @SideOnly(Side.CLIENT)
     public Vec3 getSkyColor(Entity p_72833_1_, float p_72833_2_)
     {
+        return this.provider.getSkyColor(p_72833_1_, p_72833_2_);
+    }
+
+    @SideOnly(Side.CLIENT)
+    public Vec3 getSkyColorBody(Entity p_72833_1_, float p_72833_2_)
+    {
         float f1 = this.getCelestialAngle(p_72833_2_);
         float f2 = MathHelper.cos(f1 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
         f2 = MathHelper.clamp_float(f2, 0.0F, 1.0F);
@@ -1309,9 +1407,7 @@
         int j = MathHelper.floor_double(p_72833_1_.posY);
         int k = MathHelper.floor_double(p_72833_1_.posZ);
         BlockPos blockpos = new BlockPos(i, j, k);
-        BiomeGenBase biomegenbase = this.getBiomeGenForCoords(blockpos);
-        float f3 = biomegenbase.getFloatTemperature(blockpos);
-        int l = biomegenbase.getSkyColorByTemp(f3);
+        int l = net.minecraftforge.client.ForgeHooksClient.getSkyBlendColour(this, blockpos);
         float f4 = (float)(l >> 16 & 255) / 255.0F;
         float f5 = (float)(l >> 8 & 255) / 255.0F;
         float f6 = (float)(l & 255) / 255.0F;
@@ -1373,6 +1469,11 @@
 
     public float getCurrentMoonPhaseFactor()
     {
+        return provider.getCurrentMoonPhaseFactor();
+    }
+
+    public float getCurrentMoonPhaseFactorBody()
+    {
         return WorldProvider.moonPhaseFactors[this.provider.getMoonPhase(this.worldInfo.getWorldTime())];
     }
 
@@ -1385,6 +1486,12 @@
     @SideOnly(Side.CLIENT)
     public Vec3 getCloudColour(float p_72824_1_)
     {
+        return this.provider.drawClouds(p_72824_1_);
+    }
+
+    @SideOnly(Side.CLIENT)
+    public Vec3 drawCloudsBody(float p_72824_1_)
+    {
         float f1 = this.getCelestialAngle(p_72824_1_);
         float f2 = MathHelper.cos(f1 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
         f2 = MathHelper.clamp_float(f2, 0.0F, 1.0F);
@@ -1442,9 +1549,9 @@
         for (blockpos1 = new BlockPos(pos.getX(), chunk.getTopFilledSegment() + 16, pos.getZ()); blockpos1.getY() >= 0; blockpos1 = blockpos2)
         {
             blockpos2 = blockpos1.down();
-            Material material = chunk.getBlock(blockpos2).getMaterial();
+            Block block = chunk.getBlock(blockpos2);
 
-            if (material.blocksMovement() && material != Material.leaves)
+            if (block.getMaterial().blocksMovement() && !block.isLeaves(this, blockpos2) && !block.isFoliage(this, blockpos2))
             {
                 break;
             }
@@ -1456,6 +1563,12 @@
     @SideOnly(Side.CLIENT)
     public float getStarBrightness(float p_72880_1_)
     {
+        return this.provider.getStarBrightness(p_72880_1_);
+    }
+
+    @SideOnly(Side.CLIENT)
+    public float getStarBrightnessBody(float p_72880_1_)
+    {
         float f1 = this.getCelestialAngle(p_72880_1_);
         float f2 = 1.0F - (MathHelper.cos(f1 * (float)Math.PI * 2.0F) * 2.0F + 0.25F);
         f2 = MathHelper.clamp_float(f2, 0.0F, 1.0F);
@@ -1500,7 +1613,15 @@
                     entity.addEntityCrashInfo(crashreportcategory);
                 }
 
-                throw new ReportedException(crashreport);
+                if (ForgeModContainer.removeErroringEntities)
+                {
+                    FMLLog.severe(crashreport.getCompleteReport());
+                    removeEntity(entity);
+                }
+                else
+                {
+                    throw new ReportedException(crashreport);
+                }
             }
 
             if (entity.isDead)
@@ -1562,7 +1683,16 @@
                     crashreport = CrashReport.makeCrashReport(throwable1, "Ticking entity");
                     crashreportcategory = crashreport.makeCategory("Entity being ticked");
                     entity.addEntityCrashInfo(crashreportcategory);
-                    throw new ReportedException(crashreport);
+                    if (ForgeModContainer.removeErroringEntities)
+                    {
+                        FMLLog.severe(crashreport.getCompleteReport());
+                        removeEntity(entity);
+                    }
+                    else
+                    {
+                        throw new ReportedException(crashreport);
+                    }
+
                 }
             }
 
@@ -1609,7 +1739,16 @@
                         CrashReport crashreport1 = CrashReport.makeCrashReport(throwable, "Ticking block entity");
                         CrashReportCategory crashreportcategory1 = crashreport1.makeCategory("Block entity being ticked");
                         tileentity.addInfoToCrashReport(crashreportcategory1);
-                        throw new ReportedException(crashreport1);
+                        if (ForgeModContainer.removeErroringTileEntities)
+                        {
+                            FMLLog.severe(crashreport1.getCompleteReport());
+                            tileentity.invalidate();
+                            this.removeTileEntity(tileentity.getPos());
+                        }
+                        else
+                        {
+                            throw new ReportedException(crashreport1);
+                        }
                     }
                 }
             }
@@ -1626,15 +1765,19 @@
             }
         }
 
-        this.processingLoadedTiles = false;
-
         if (!this.tileEntitiesToBeRemoved.isEmpty())
         {
+            for (Object tile : tileEntitiesToBeRemoved)
+            {
+               ((TileEntity)tile).onChunkUnload();
+            }
             this.tickableTileEntities.removeAll(this.tileEntitiesToBeRemoved);
             this.loadedTileEntityList.removeAll(this.tileEntitiesToBeRemoved);
             this.tileEntitiesToBeRemoved.clear();
         }
 
+        this.processingLoadedTiles = false;  //FML Move below remove to prevent CMEs
+
         this.theProfiler.endStartSection("pendingBlockEntities");
 
         if (!this.addedTileEntityList.isEmpty())
@@ -1668,7 +1811,8 @@
 
     public boolean addTileEntity(TileEntity tile)
     {
-        boolean flag = this.loadedTileEntityList.add(tile);
+        List dest = processingLoadedTiles ? addedTileEntityList : loadedTileEntityList;
+        boolean flag = dest.add(tile);
 
         if (flag && tile instanceof IUpdatePlayerListBox)
         {
@@ -1710,9 +1854,12 @@
     {
         int i = MathHelper.floor_double(p_72866_1_.posX);
         int j = MathHelper.floor_double(p_72866_1_.posZ);
-        byte b0 = 32;
+        boolean isForced = getPersistentChunks().containsKey(new ChunkCoordIntPair(i >> 4, j >> 4));
+        byte b0 = isForced ? (byte)0 : 32;
+        boolean canUpdate = !p_72866_2_ || this.isAreaLoaded(i - b0, 0, j - b0, i + b0, 0, j + b0, true);
+        if (!canUpdate) canUpdate = net.minecraftforge.event.ForgeEventFactory.canEntityUpdate(p_72866_1_);
 
-        if (!p_72866_2_ || this.isAreaLoaded(i - b0, 0, j - b0, i + b0, 0, j + b0, true))
+        if (canUpdate)
         {
             p_72866_1_.lastTickPosX = p_72866_1_.posX;
             p_72866_1_.lastTickPosY = p_72866_1_.posY;
@@ -1839,7 +1986,7 @@
                 {
                     Block block = this.getBlockState(new BlockPos(k1, l1, i2)).getBlock();
 
-                    if (block.getMaterial() != Material.air)
+                    if (!block.isAir(this, new BlockPos(k1, l1, i2)))
                     {
                         return true;
                     }
@@ -1901,6 +2048,10 @@
                         {
                             return true;
                         }
+                        else if (block.isBurning(this, new BlockPos(k1, l1, i2)))
+                        {
+                            return true;
+                        }
                     }
                 }
             }
@@ -2039,6 +2190,7 @@
     public Explosion newExplosion(Entity p_72885_1_, double p_72885_2_, double p_72885_4_, double p_72885_6_, float p_72885_8_, boolean p_72885_9_, boolean p_72885_10_)
     {
         Explosion explosion = new Explosion(this, p_72885_1_, p_72885_2_, p_72885_4_, p_72885_6_, p_72885_8_, p_72885_9_, p_72885_10_);
+        if (net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this, explosion)) return explosion;
         explosion.doExplosionA();
         explosion.doExplosionB(true);
         return explosion;
@@ -2185,19 +2337,28 @@
             else
             {
                 this.addTileEntity(tileEntityIn);
-                this.getChunkFromBlockCoords(pos).addTileEntity(pos, tileEntityIn);
+                Chunk chunk = this.getChunkFromBlockCoords(pos); //Forge add NPE protection
+                if (chunk != null) chunk.addTileEntity(pos, tileEntityIn);
             }
+            this.updateComparatorOutputLevel(pos, getBlockState(pos).getBlock()); //Notify neighbors of changes
         }
     }
 
     public void removeTileEntity(BlockPos pos)
     {
+        //Chunk chunk = this.getChunkFromBlockCoords(pos);
+        //if (chunk != null) chunk.removeTileEntity(pos);
+        //Forge ToDO: Are these patches needed anymore?
+
         TileEntity tileentity = this.getTileEntity(pos);
 
         if (tileentity != null && this.processingLoadedTiles)
         {
             tileentity.invalidate();
             this.addedTileEntityList.remove(tileentity);
+            if (!(tileentity instanceof IUpdatePlayerListBox)) //Forge: If they are not tickable they wont be removed in the update loop.
+                this.loadedTileEntityList.remove(tileentity);
+
         }
         else
         {
@@ -2210,6 +2371,7 @@
 
             this.getChunkFromBlockCoords(pos).removeTileEntity(pos);
         }
+        this.updateComparatorOutputLevel(pos, getBlockState(pos).getBlock()); //Notify neighbors of changes
     }
 
     public void markTileEntityForRemoval(TileEntity tileEntityIn)
@@ -2228,7 +2390,7 @@
     {
         IBlockState iblockstate = p_175683_0_.getBlockState(p_175683_1_);
         Block block = iblockstate.getBlock();
-        return block.getMaterial().isOpaque() && block.isFullCube() ? true : (block instanceof BlockStairs ? iblockstate.getValue(BlockStairs.HALF) == BlockStairs.EnumHalf.TOP : (block instanceof BlockSlab ? iblockstate.getValue(BlockSlab.HALF) == BlockSlab.EnumBlockHalf.TOP : (block instanceof BlockHopper ? true : (block instanceof BlockSnow ? ((Integer)iblockstate.getValue(BlockSnow.LAYERS)).intValue() == 7 : false))));
+        return block.isSideSolid(p_175683_0_, p_175683_1_, EnumFacing.UP);
     }
 
     public boolean isBlockNormalCube(BlockPos p_175677_1_, boolean p_175677_2_)
@@ -2248,7 +2410,7 @@
             else
             {
                 Block block = this.getBlockState(p_175677_1_).getBlock();
-                return block.getMaterial().isOpaque() && block.isFullCube();
+                return block.isNormalCube(this, p_175677_1_);
             }
         }
     }
@@ -2265,8 +2427,7 @@
 
     public void setAllowedSpawnTypes(boolean hostile, boolean peaceful)
     {
-        this.spawnHostileMobs = hostile;
-        this.spawnPeacefulMobs = peaceful;
+        this.provider.setAllowedSpawnTypes(hostile, peaceful);
     }
 
     public void tick()
@@ -2276,6 +2437,11 @@
 
     protected void calculateInitialWeather()
     {
+        this.provider.calculateInitialWeather();
+    }
+
+    public void calculateInitialWeatherBody()
+    {
         if (this.worldInfo.isRaining())
         {
             this.rainingStrength = 1.0F;
@@ -2289,6 +2455,11 @@
 
     protected void updateWeather()
     {
+        this.provider.updateWeather();
+    }
+
+    public void updateWeatherBody()
+    {
         if (!this.provider.getHasNoSky())
         {
             if (!this.isRemote)
@@ -2383,6 +2554,7 @@
     {
         this.activeChunkSet.clear();
         this.theProfiler.startSection("buildList");
+        this.activeChunkSet.addAll(getPersistentChunks().keySet());
         int i;
         EntityPlayer entityplayer;
         int j;
@@ -2445,7 +2617,7 @@
             l += p_147467_1_;
             i1 += p_147467_2_;
 
-            if (block.getMaterial() == Material.air && this.getLight(blockpos) <= this.rand.nextInt(8) && this.getLightFor(EnumSkyBlock.SKY, blockpos) <= 0)
+            if (block.isAir(this, blockpos) && this.getLight(blockpos) <= this.rand.nextInt(8) && this.getLightFor(EnumSkyBlock.SKY, blockpos) <= 0)
             {
                 EntityPlayer entityplayer = this.getClosestPlayer((double)l + 0.5D, (double)j1 + 0.5D, (double)i1 + 0.5D, 8.0D);
 
@@ -2485,6 +2657,11 @@
 
     public boolean canBlockFreeze(BlockPos pos, boolean noWaterAdj)
     {
+        return this.provider.canBlockFreeze(pos, noWaterAdj);
+    }
+
+    public boolean canBlockFreezeBody(BlockPos pos, boolean noWaterAdj)
+    {
         BiomeGenBase biomegenbase = this.getBiomeGenForCoords(pos);
         float f = biomegenbase.getFloatTemperature(pos);
 
@@ -2526,6 +2703,11 @@
 
     public boolean canSnowAt(BlockPos pos, boolean checkLight)
     {
+        return this.provider.canSnowAt(pos, checkLight);
+    }
+
+    public boolean canSnowAtBody(BlockPos pos, boolean checkLight)
+    {
         BiomeGenBase biomegenbase = this.getBiomeGenForCoords(pos);
         float f = biomegenbase.getFloatTemperature(pos);
 
@@ -2543,7 +2725,7 @@
             {
                 Block block = this.getBlockState(pos).getBlock();
 
-                if (block.getMaterial() == Material.air && Blocks.snow_layer.canPlaceBlockAt(this, pos))
+                if (block.isAir(this, pos) && Blocks.snow_layer.canPlaceBlockAt(this, pos))
                 {
                     return true;
                 }
@@ -2575,10 +2757,11 @@
         else
         {
             Block block = this.getBlockState(pos).getBlock();
-            int i = lightType == EnumSkyBlock.SKY ? 0 : block.getLightValue();
-            int j = block.getLightOpacity();
+            int blockLight = block.getLightValue(this, pos);
+            int i = lightType == EnumSkyBlock.SKY ? 0 : blockLight;
+            int j = block.getLightOpacity(this, pos);
 
-            if (j >= 15 && block.getLightValue() > 0)
+            if (j >= 15 && blockLight > 0)
             {
                 j = 1;
             }
@@ -2792,10 +2975,10 @@
     public List func_175674_a(Entity entityIn, AxisAlignedBB p_175674_2_, Predicate p_175674_3_)
     {
         ArrayList arraylist = Lists.newArrayList();
-        int i = MathHelper.floor_double((p_175674_2_.minX - 2.0D) / 16.0D);
-        int j = MathHelper.floor_double((p_175674_2_.maxX + 2.0D) / 16.0D);
-        int k = MathHelper.floor_double((p_175674_2_.minZ - 2.0D) / 16.0D);
-        int l = MathHelper.floor_double((p_175674_2_.maxZ + 2.0D) / 16.0D);
+        int i = MathHelper.floor_double((p_175674_2_.minX - MAX_ENTITY_RADIUS) / 16.0D);
+        int j = MathHelper.floor_double((p_175674_2_.maxX + MAX_ENTITY_RADIUS) / 16.0D);
+        int k = MathHelper.floor_double((p_175674_2_.minZ - MAX_ENTITY_RADIUS) / 16.0D);
+        int l = MathHelper.floor_double((p_175674_2_.maxZ + MAX_ENTITY_RADIUS) / 16.0D);
 
         for (int i1 = i; i1 <= j; ++i1)
         {
@@ -2854,10 +3037,10 @@
 
     public List getEntitiesWithinAABB(Class clazz, AxisAlignedBB aabb, Predicate filter)
     {
-        int i = MathHelper.floor_double((aabb.minX - 2.0D) / 16.0D);
-        int j = MathHelper.floor_double((aabb.maxX + 2.0D) / 16.0D);
-        int k = MathHelper.floor_double((aabb.minZ - 2.0D) / 16.0D);
-        int l = MathHelper.floor_double((aabb.maxZ + 2.0D) / 16.0D);
+        int i = MathHelper.floor_double((aabb.minX - MAX_ENTITY_RADIUS) / 16.0D);
+        int j = MathHelper.floor_double((aabb.maxX + MAX_ENTITY_RADIUS) / 16.0D);
+        int k = MathHelper.floor_double((aabb.minZ - MAX_ENTITY_RADIUS) / 16.0D);
+        int l = MathHelper.floor_double((aabb.maxZ + MAX_ENTITY_RADIUS) / 16.0D);
         ArrayList arraylist = Lists.newArrayList();
 
         for (int i1 = i; i1 <= j; ++i1)
@@ -2938,13 +3121,16 @@
 
     public void loadEntities(Collection entityCollection)
     {
-        this.loadedEntityList.addAll(entityCollection);
         Iterator iterator = entityCollection.iterator();
 
         while (iterator.hasNext())
         {
             Entity entity = (Entity)iterator.next();
-            this.onEntityAdded(entity);
+            if (!net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(entity, this)))
+            {
+                loadedEntityList.add(entity);
+                this.onEntityAdded(entity);
+            }
         }
     }
 
@@ -2957,7 +3143,9 @@
     {
         Block block1 = this.getBlockState(p_175716_2_).getBlock();
         AxisAlignedBB axisalignedbb = p_175716_3_ ? null : p_175716_1_.getCollisionBoundingBox(this, p_175716_2_, p_175716_1_.getDefaultState());
-        return axisalignedbb != null && !this.checkNoEntityCollision(axisalignedbb, p_175716_5_) ? false : (block1.getMaterial() == Material.circuits && p_175716_1_ == Blocks.anvil ? true : block1.getMaterial().isReplaceable() && p_175716_1_.canReplace(this, p_175716_2_, p_175716_4_, p_175716_6_));
+        if (axisalignedbb != null && !this.checkNoEntityCollision(axisalignedbb, p_175716_5_)) return false;
+        if (block1.getMaterial() == Material.circuits && p_175716_1_ == Blocks.anvil) return true;
+        return block1.isReplaceable(this, p_175716_2_) && p_175716_1_.canReplace(this, p_175716_2_, p_175716_4_, p_175716_6_);
     }
 
     public int getStrongPower(BlockPos pos, EnumFacing direction)
@@ -3032,7 +3220,7 @@
     {
         IBlockState iblockstate = this.getBlockState(pos);
         Block block = iblockstate.getBlock();
-        return block.isNormalCube() ? this.getStrongPower(pos) : block.isProvidingWeakPower(this, pos, iblockstate, facing);
+        return block.shouldCheckWeakPower(this, pos, facing) ? this.getStrongPower(pos) : block.isProvidingWeakPower(this, pos, iblockstate, facing);
     }
 
     public boolean isBlockPowered(BlockPos pos)
@@ -3160,7 +3348,7 @@
 
     public long getSeed()
     {
-        return this.worldInfo.getSeed();
+        return this.provider.getSeed();
     }
 
     public long getTotalWorldTime()
@@ -3170,17 +3358,17 @@
 
     public long getWorldTime()
     {
-        return this.worldInfo.getWorldTime();
+        return this.provider.getWorldTime();
     }
 
     public void setWorldTime(long time)
     {
-        this.worldInfo.setWorldTime(time);
+        this.provider.setWorldTime(time);
     }
 
     public BlockPos getSpawnPoint()
     {
-        BlockPos blockpos = new BlockPos(this.worldInfo.getSpawnX(), this.worldInfo.getSpawnY(), this.worldInfo.getSpawnZ());
+        BlockPos blockpos = this.provider.getSpawnPoint();
 
         if (!this.getWorldBorder().contains(blockpos))
         {
@@ -3192,7 +3380,7 @@
 
     public void setSpawnPoint(BlockPos pos)
     {
-        this.worldInfo.setSpawn(pos);
+        this.provider.setSpawnPoint(pos);
     }
 
     @SideOnly(Side.CLIENT)
@@ -3212,12 +3400,18 @@
 
         if (!this.loadedEntityList.contains(entityIn))
         {
+            if (!net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(entityIn, this)))
             this.loadedEntityList.add(entityIn);
         }
     }
 
     public boolean isBlockModifiable(EntityPlayer player, BlockPos pos)
     {
+        return this.provider.canMineBlock(player, pos);
+    }
+
+    public boolean canMineBlockBody(EntityPlayer player, BlockPos pos)
+    {
         return true;
     }
 
@@ -3307,8 +3501,7 @@
 
     public boolean isBlockinHighHumidity(BlockPos pos)
     {
-        BiomeGenBase biomegenbase = this.getBiomeGenForCoords(pos);
-        return biomegenbase.isHighHumidity();
+        return this.provider.isBlockHighHumidity(pos);
     }
 
     public MapStorage getMapStorage()
@@ -3367,12 +3560,12 @@
 
     public int getHeight()
     {
-        return 256;
+        return this.provider.getHeight();
     }
 
     public int getActualHeight()
     {
-        return this.provider.getHasNoSky() ? 128 : 256;
+        return this.provider.getActualHeight();
     }
 
     public Random setRandomSeed(int p_72843_1_, int p_72843_2_, int p_72843_3_)
@@ -3429,7 +3622,7 @@
     @SideOnly(Side.CLIENT)
     public double getHorizon()
     {
-        return this.worldInfo.getTerrainType() == WorldType.FLAT ? 0.0D : 63.0D;
+        return provider.getHorizon();
     }
 
     public void sendBlockBreakProgress(int breakerId, BlockPos pos, int progress)
@@ -3461,29 +3654,21 @@
 
     public void updateComparatorOutputLevel(BlockPos pos, Block blockIn)
     {
-        Iterator iterator = EnumFacing.Plane.HORIZONTAL.iterator();
-
-        while (iterator.hasNext())
+        for (EnumFacing enumfacing : EnumFacing.values())
         {
-            EnumFacing enumfacing = (EnumFacing)iterator.next();
             BlockPos blockpos1 = pos.offset(enumfacing);
 
             if (this.isBlockLoaded(blockpos1))
             {
                 IBlockState iblockstate = this.getBlockState(blockpos1);
-
-                if (Blocks.unpowered_comparator.isAssociated(iblockstate.getBlock()))
+                iblockstate.getBlock().onNeighborChange(this, blockpos1, pos);
+                if (iblockstate.getBlock().isNormalCube(this, blockpos1))
                 {
-                    iblockstate.getBlock().onNeighborBlockChange(this, blockpos1, iblockstate, blockIn);
-                }
-                else if (iblockstate.getBlock().isNormalCube())
-                {
-                    blockpos1 = blockpos1.offset(enumfacing);
-                    iblockstate = this.getBlockState(blockpos1);
-
-                    if (Blocks.unpowered_comparator.isAssociated(iblockstate.getBlock()))
+                    BlockPos posOther = blockpos1.offset(enumfacing);
+                    Block other = getBlockState(posOther).getBlock();
+                    if (other.getWeakChanges(this, posOther))
                     {
-                        iblockstate.getBlock().onNeighborBlockChange(this, blockpos1, iblockstate, blockIn);
+                        other.onNeighborChange(this, posOther, pos);
                     }
                 }
             }
@@ -3553,4 +3738,82 @@
         short short1 = 128;
         return k >= -short1 && k <= short1 && l >= -short1 && l <= short1;
     }
+
+
+    /* ======================================== FORGE START =====================================*/
+    /**
+     * Determine if the given block is considered solid on the
+     * specified side.  Used by placement logic.
+     *
+     * @param pos Block Position
+     * @param side The Side in question
+     * @return True if the side is solid
+    */
+    public boolean isSideSolid(BlockPos pos, EnumFacing side)
+    {
+       return isSideSolid(pos, side, false);
+    }
+
+    /**
+     * Determine if the given block is considered solid on the
+     * specified side.  Used by placement logic.
+     *
+     * @param pos Block Position
+     * @param side The Side in question
+     * @param _default The default to return if the block doesn't exist.
+     * @return True if the side is solid
+     */
+    @Override
+    public boolean isSideSolid(BlockPos pos, EnumFacing side, boolean _default)
+    {
+        if (!this.isValid(pos)) return _default;
+
+        Chunk chunk = getChunkFromBlockCoords(pos);
+        if (chunk == null || chunk.isEmpty()) return _default;
+        return getBlockState(pos).getBlock().isSideSolid(this, pos, side);
+    }
+
+    /**
+     * Get the persistent chunks for this world
+     *
+     * @return
+     */
+    public ImmutableSetMultimap<ChunkCoordIntPair, Ticket> getPersistentChunks()
+    {
+        return ForgeChunkManager.getPersistentChunksFor(this);
+    }
+
+    /**
+     * Readded as it was removed, very useful helper function
+     *
+     * @param pos Block position
+     * @return The blocks light opacity
+     */
+    public int getBlockLightOpacity(BlockPos pos)
+    {
+        if (!this.isValid(pos)) return 0;
+        return getChunkFromBlockCoords(pos).getBlockLightOpacity(pos);
+    }
+
+    /**
+     * Returns a count of entities that classify themselves as the specified creature type.
+     */
+    public int countEntities(EnumCreatureType type, boolean forSpawnCount)
+    {
+        int count = 0;
+        for (int x = 0; x < loadedEntityList.size(); x++)
+        {
+            if (((Entity)loadedEntityList.get(x)).isCreatureType(type, forSpawnCount))
+            {
+                count++;
+            }
+        }
+        return count;
+    }
+
+    protected MapStorage perWorldStorage; //Moved to a getter to simulate final without being final so we can load in subclasses.
+    public MapStorage getPerWorldStorage()
+    {
+        return perWorldStorage;
+    }
 }
