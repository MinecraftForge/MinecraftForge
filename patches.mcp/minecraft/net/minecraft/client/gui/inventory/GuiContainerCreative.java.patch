--- ../src-base/minecraft/net/minecraft/client/gui/inventory/GuiContainerCreative.java
+++ ../src-work/minecraft/net/minecraft/client/gui/inventory/GuiContainerCreative.java
@@ -49,6 +49,8 @@
     private boolean field_147057_D;
     private CreativeCrafting field_147059_E;
     private static final String __OBFID = "CL_00000752";
+    private static int tabPage = 0;
+    private int maxPages = 0;
 
     public GuiContainerCreative(EntityPlayer p_i1088_1_)
     {
@@ -187,7 +189,7 @@
                         return;
                     }
 
-                    if (itemstack1 != null && itemstack2 != null && itemstack1.isItemEqual(itemstack2))
+                    if (itemstack1 != null && itemstack2 != null && itemstack1.isItemEqual(itemstack2) && ItemStack.areItemStackTagsEqual(itemstack1, itemstack2)) //Forge: Bugfix, Compare NBT data, allow for deletion of enchanted books, MC-12770
                     {
                         if (clickedButton == 0)
                         {
@@ -262,6 +264,13 @@
             this.setCurrentCreativeTab(CreativeTabs.creativeTabArray[i]);
             this.field_147059_E = new CreativeCrafting(this.mc);
             this.mc.thePlayer.inventoryContainer.addCraftingToCrafters(this.field_147059_E);
+            int tabCount = CreativeTabs.creativeTabArray.length;
+            if (tabCount > 12)
+            {
+                buttonList.add(new GuiButton(101, guiLeft,              guiTop - 50, 20, 20, "<"));
+                buttonList.add(new GuiButton(102, guiLeft + xSize - 20, guiTop - 50, 20, 20, ">"));
+                maxPages = ((tabCount - 12) / 10) + 1;
+            }
         }
         else
         {
@@ -283,7 +292,7 @@
 
     protected void keyTyped(char typedChar, int keyCode) throws IOException
     {
-        if (selectedTabIndex != CreativeTabs.tabAllSearch.getTabIndex())
+        if (!CreativeTabs.creativeTabArray[selectedTabIndex].hasSearchBar())
         {
             if (GameSettings.isKeyDown(this.mc.gameSettings.keyBindChat))
             {
@@ -320,6 +329,15 @@
     {
         GuiContainerCreative.ContainerCreative containercreative = (GuiContainerCreative.ContainerCreative)this.inventorySlots;
         containercreative.itemList.clear();
+
+        CreativeTabs tab = CreativeTabs.creativeTabArray[selectedTabIndex];
+        if (tab.hasSearchBar() && tab != CreativeTabs.tabAllSearch)
+        {
+            tab.displayAllReleventItems(containercreative.itemList);
+            updateFilteredItems(containercreative);
+            return;
+        }
+
         Iterator iterator = Item.itemRegistry.iterator();
 
         while (iterator.hasNext())
@@ -331,10 +349,17 @@
                 item.getSubItems(item, (CreativeTabs)null, containercreative.itemList);
             }
         }
+        updateFilteredItems(containercreative);
+    }
 
+    //split from above for custom search tabs
+    private void updateFilteredItems(GuiContainerCreative.ContainerCreative containercreative)
+    {
+        Iterator iterator;
         Enchantment[] aenchantment = Enchantment.enchantmentsBookList;
         int j = aenchantment.length;
 
+        if (CreativeTabs.creativeTabArray[selectedTabIndex] != CreativeTabs.tabAllSearch) j = 0; //Forge: Don't add enchants to custom tabs.
         for (int i = 0; i < j; ++i)
         {
             Enchantment enchantment = aenchantment[i];
@@ -385,7 +410,7 @@
     {
         CreativeTabs creativetabs = CreativeTabs.creativeTabArray[selectedTabIndex];
 
-        if (creativetabs.drawInForegroundOfTab())
+        if (creativetabs != null && creativetabs.drawInForegroundOfTab())
         {
             GlStateManager.disableBlend();
             this.fontRendererObj.drawString(I18n.format(creativetabs.getTranslatedTabLabel(), new Object[0]), 8, 6, 4210752);
@@ -428,7 +453,7 @@
             {
                 CreativeTabs creativetabs = acreativetabs[k1];
 
-                if (this.func_147049_a(creativetabs, l, i1))
+                if (creativetabs != null && this.func_147049_a(creativetabs, l, i1))
                 {
                     this.setCurrentCreativeTab(creativetabs);
                     return;
@@ -441,11 +466,13 @@
 
     private boolean needsScrollBars()
     {
+        if (CreativeTabs.creativeTabArray[selectedTabIndex] == null) return false;
         return selectedTabIndex != CreativeTabs.tabInventory.getTabIndex() && CreativeTabs.creativeTabArray[selectedTabIndex].shouldHidePlayerInventory() && ((GuiContainerCreative.ContainerCreative)this.inventorySlots).func_148328_e();
     }
 
     private void setCurrentCreativeTab(CreativeTabs p_147050_1_)
     {
+        if (p_147050_1_ == null) return;
         int i = selectedTabIndex;
         selectedTabIndex = p_147050_1_.getTabIndex();
         GuiContainerCreative.ContainerCreative containercreative = (GuiContainerCreative.ContainerCreative)this.inventorySlots;
@@ -514,12 +541,14 @@
 
         if (this.searchField != null)
         {
-            if (p_147050_1_ == CreativeTabs.tabAllSearch)
+            if (p_147050_1_.hasSearchBar())
             {
                 this.searchField.setVisible(true);
                 this.searchField.setCanLoseFocus(false);
                 this.searchField.setFocused(true);
                 this.searchField.setText("");
+                this.searchField.width = p_147050_1_.getSearchbarWidth();
+                this.searchField.xPosition = this.guiLeft + (82 /*default left*/ + 89 /*default width*/) - this.searchField.width;
                 this.updateCreativeSearch();
             }
             else
@@ -590,23 +619,45 @@
 
         super.drawScreen(mouseX, mouseY, partialTicks);
         CreativeTabs[] acreativetabs = CreativeTabs.creativeTabArray;
-        int i2 = acreativetabs.length;
+        int start = tabPage * 10;
+        int i2 = Math.min(acreativetabs.length, ((tabPage + 1) * 10) + 2);
+        if (tabPage != 0) start += 2;
+        boolean rendered = false;
 
-        for (int j2 = 0; j2 < i2; ++j2)
+        for (int j2 = start; j2 < i2; ++j2)
         {
             CreativeTabs creativetabs = acreativetabs[j2];
 
+            if (creativetabs == null) continue;
             if (this.renderCreativeInventoryHoveringText(creativetabs, mouseX, mouseY))
             {
+                rendered = true;
                 break;
             }
         }
 
+        if (!rendered && renderCreativeInventoryHoveringText(CreativeTabs.tabAllSearch, mouseX, mouseY))
+        {
+            renderCreativeInventoryHoveringText(CreativeTabs.tabInventory, mouseX, mouseY);
+        }
+
         if (this.field_147064_C != null && selectedTabIndex == CreativeTabs.tabInventory.getTabIndex() && this.isPointInRegion(this.field_147064_C.xDisplayPosition, this.field_147064_C.yDisplayPosition, 16, 16, mouseX, mouseY))
         {
             this.drawCreativeTabHoveringText(I18n.format("inventory.binSlot", new Object[0]), mouseX, mouseY);
         }
 
+        if (maxPages != 0)
+        {
+            String page = String.format("%d / %d", tabPage + 1, maxPages + 1);
+            int width = fontRendererObj.getStringWidth(page);
+            GlStateManager.disableLighting();
+            this.zLevel = 300.0F;
+            itemRender.zLevel = 300.0F;
+            fontRendererObj.drawString(page, guiLeft + (xSize / 2) - (width / 2), guiTop - 44, -1);
+            this.zLevel = 0.0F;
+            itemRender.zLevel = 0.0F;
+        }
+
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         GlStateManager.disableLighting();
     }
@@ -675,17 +726,36 @@
         int k = acreativetabs.length;
         int l;
 
-        for (l = 0; l < k; ++l)
+        int start = tabPage * 10;
+        k = Math.min(acreativetabs.length, ((tabPage + 1) * 10 + 2));
+        if (tabPage != 0) start += 2;
+
+        for (l = start; l < k; ++l)
         {
             CreativeTabs creativetabs1 = acreativetabs[l];
             this.mc.getTextureManager().bindTexture(creativeInventoryTabs);
 
+            if (creativetabs1 == null) continue;
             if (creativetabs1.getTabIndex() != selectedTabIndex)
             {
                 this.func_147051_a(creativetabs1);
             }
         }
 
+        if (tabPage != 0)
+        {
+            if (creativetabs != CreativeTabs.tabAllSearch)
+            {
+                this.mc.getTextureManager().bindTexture(creativeInventoryTabs);
+                func_147051_a(CreativeTabs.tabAllSearch);
+            }
+            if (creativetabs != CreativeTabs.tabInventory)
+            {
+                this.mc.getTextureManager().bindTexture(creativeInventoryTabs);
+                func_147051_a(CreativeTabs.tabInventory);
+            }
+        }
+
         this.mc.getTextureManager().bindTexture(new ResourceLocation("textures/gui/container/creative_inventory/tab_" + creativetabs.getBackgroundImageName()));
         this.drawTexturedModalRect(this.guiLeft, this.guiTop, 0, 0, this.xSize, this.ySize);
         this.searchField.drawTextBox();
@@ -700,6 +770,14 @@
             this.drawTexturedModalRect(i1, k + (int)((float)(l - k - 17) * this.currentScroll), 232 + (this.needsScrollBars() ? 0 : 12), 0, 12, 15);
         }
 
+        if (creativetabs == null || creativetabs.getTabPage() != tabPage)
+        {
+            if (creativetabs != CreativeTabs.tabAllSearch && creativetabs != CreativeTabs.tabInventory)
+            {
+                return;
+            }
+        }
+
         this.func_147051_a(creativetabs);
 
         if (creativetabs == CreativeTabs.tabInventory)
@@ -710,6 +788,15 @@
 
     protected boolean func_147049_a(CreativeTabs p_147049_1_, int p_147049_2_, int p_147049_3_)
     {
+        if (p_147049_1_.getTabPage() != tabPage)
+        {
+            if (p_147049_1_ != CreativeTabs.tabAllSearch &&
+                p_147049_1_ != CreativeTabs.tabInventory)
+            {
+                return false;
+            }
+        }
+
         int k = p_147049_1_.getTabColumn();
         int l = 28 * k;
         byte b0 = 0;
@@ -810,6 +897,8 @@
         }
 
         GlStateManager.disableLighting();
+        GlStateManager.color(1F, 1F, 1F); //Forge: Reset color in case Items change it.
+        GlStateManager.enableBlend(); //Forge: Make sure blend is enabled else tabs show a white border.
         this.drawTexturedModalRect(l, i1, j, k, 28, b0);
         this.zLevel = 100.0F;
         this.itemRender.zLevel = 100.0F;
@@ -836,6 +925,15 @@
         {
             this.mc.displayGuiScreen(new GuiStats(this, this.mc.thePlayer.getStatFileWriter()));
         }
+
+        if (button.id == 101)
+        {
+            tabPage = Math.max(tabPage - 1, 0);
+        }
+        else if (button.id == 102)
+        {
+            tabPage = Math.min(tabPage + 1, maxPages);
+        }
     }
 
     public int getSelectedTabIndex()
