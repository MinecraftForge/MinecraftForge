--- ../src-base/minecraft/net/minecraft/client/gui/inventory/GuiContainerCreative.java
+++ ../src-work/minecraft/net/minecraft/client/gui/inventory/GuiContainerCreative.java
@@ -49,6 +49,8 @@
     private Slot field_147064_C;
     private boolean field_147057_D;
     private CreativeCrafting field_147059_E;
+    private static int tabPage = 0;
+    private int maxPages = 0;
 
     public GuiContainerCreative(EntityPlayer p_i1088_1_)
     {
@@ -258,6 +260,13 @@
             this.setCurrentCreativeTab(CreativeTabs.creativeTabArray[i]);
             this.field_147059_E = new CreativeCrafting(this.mc);
             this.mc.thePlayer.inventoryContainer.onCraftGuiOpened(this.field_147059_E);
+            int tabCount = CreativeTabs.creativeTabArray.length;
+            if (tabCount > 12)
+            {
+                buttonList.add(new GuiButton(101, guiLeft,              guiTop - 50, 20, 20, "<"));
+                buttonList.add(new GuiButton(102, guiLeft + xSize - 20, guiTop - 50, 20, 20, ">"));
+                maxPages = ((tabCount - 12) / 10) + 1;
+            }
         }
         else
         {
@@ -279,7 +288,7 @@
 
     protected void keyTyped(char typedChar, int keyCode) throws IOException
     {
-        if (selectedTabIndex != CreativeTabs.tabAllSearch.getTabIndex())
+        if (!CreativeTabs.creativeTabArray[selectedTabIndex].hasSearchBar())
         {
             if (GameSettings.isKeyDown(this.mc.gameSettings.keyBindChat))
             {
@@ -317,6 +326,14 @@
         GuiContainerCreative.ContainerCreative guicontainercreative$containercreative = (GuiContainerCreative.ContainerCreative)this.inventorySlots;
         guicontainercreative$containercreative.itemList.clear();
 
+        CreativeTabs tab = CreativeTabs.creativeTabArray[selectedTabIndex];
+        if (tab.hasSearchBar() && tab != CreativeTabs.tabAllSearch)
+        {
+            tab.displayAllReleventItems(guicontainercreative$containercreative.itemList);
+            updateFilteredItems(guicontainercreative$containercreative);
+            return;
+        }
+
         for (Item item : Item.itemRegistry)
         {
             if (item != null && item.getCreativeTab() != null)
@@ -324,7 +341,13 @@
                 item.getSubItems(item, (CreativeTabs)null, guicontainercreative$containercreative.itemList);
             }
         }
+        updateFilteredItems(guicontainercreative$containercreative);
+    }
 
+    //split from above for custom search tabs
+    private void updateFilteredItems(GuiContainerCreative.ContainerCreative guicontainercreative$containercreative)
+    {
+    	if (CreativeTabs.creativeTabArray[selectedTabIndex] == CreativeTabs.tabAllSearch) // FORGE: Only add enchanted books to the regular search
         for (Enchantment enchantment : Enchantment.field_185264_b)
         {
             if (enchantment != null && enchantment.type != null)
@@ -332,7 +355,6 @@
                 Items.enchanted_book.getAll(enchantment, guicontainercreative$containercreative.itemList);
             }
         }
-
         Iterator<ItemStack> iterator = guicontainercreative$containercreative.itemList.iterator();
         String s1 = this.searchField.getText().toLowerCase();
 
@@ -364,7 +386,7 @@
     {
         CreativeTabs creativetabs = CreativeTabs.creativeTabArray[selectedTabIndex];
 
-        if (creativetabs.drawInForegroundOfTab())
+        if (creativetabs != null && creativetabs.drawInForegroundOfTab())
         {
             GlStateManager.disableBlend();
             this.fontRendererObj.drawString(I18n.format(creativetabs.getTranslatedTabLabel(), new Object[0]), 8, 6, 4210752);
@@ -399,7 +421,7 @@
 
             for (CreativeTabs creativetabs : CreativeTabs.creativeTabArray)
             {
-                if (this.func_147049_a(creativetabs, i, j))
+                if (creativetabs != null && this.func_147049_a(creativetabs, i, j))
                 {
                     this.setCurrentCreativeTab(creativetabs);
                     return;
@@ -412,11 +434,13 @@
 
     private boolean needsScrollBars()
     {
+        if (CreativeTabs.creativeTabArray[selectedTabIndex] == null) return false;
         return selectedTabIndex != CreativeTabs.tabInventory.getTabIndex() && CreativeTabs.creativeTabArray[selectedTabIndex].shouldHidePlayerInventory() && ((GuiContainerCreative.ContainerCreative)this.inventorySlots).func_148328_e();
     }
 
     private void setCurrentCreativeTab(CreativeTabs p_147050_1_)
     {
+        if (p_147050_1_ == null) return;
         int i = selectedTabIndex;
         selectedTabIndex = p_147050_1_.getTabIndex();
         GuiContainerCreative.ContainerCreative guicontainercreative$containercreative = (GuiContainerCreative.ContainerCreative)this.inventorySlots;
@@ -487,12 +511,14 @@
 
         if (this.searchField != null)
         {
-            if (p_147050_1_ == CreativeTabs.tabAllSearch)
+            if (p_147050_1_.hasSearchBar())
             {
                 this.searchField.setVisible(true);
                 this.searchField.setCanLoseFocus(false);
                 this.searchField.setFocused(true);
                 this.searchField.setText("");
+                this.searchField.width = p_147050_1_.getSearchbarWidth();
+                this.searchField.xPosition = this.guiLeft + (82 /*default left*/ + 89 /*default width*/) - this.searchField.width;
                 this.updateCreativeSearch();
             }
             else
@@ -562,20 +588,43 @@
         }
 
         super.drawScreen(mouseX, mouseY, partialTicks);
+        int start = tabPage * 10;
+        int end = Math.min(CreativeTabs.creativeTabArray.length, ((tabPage + 1) * 10) + 2);
+        if (tabPage != 0) start += 2;
+        boolean rendered = false;
 
-        for (CreativeTabs creativetabs : CreativeTabs.creativeTabArray)
+        for (CreativeTabs creativetabs : java.util.Arrays.copyOfRange(CreativeTabs.creativeTabArray,start,end))
         {
+            if (creativetabs == null) continue;
             if (this.renderCreativeInventoryHoveringText(creativetabs, mouseX, mouseY))
             {
+                rendered = true;
                 break;
             }
         }
 
+        if (!rendered && renderCreativeInventoryHoveringText(CreativeTabs.tabAllSearch, mouseX, mouseY))
+        {
+            renderCreativeInventoryHoveringText(CreativeTabs.tabInventory, mouseX, mouseY);
+        }
+
         if (this.field_147064_C != null && selectedTabIndex == CreativeTabs.tabInventory.getTabIndex() && this.isPointInRegion(this.field_147064_C.xDisplayPosition, this.field_147064_C.yDisplayPosition, 16, 16, mouseX, mouseY))
         {
             this.drawCreativeTabHoveringText(I18n.format("inventory.binSlot", new Object[0]), mouseX, mouseY);
         }
 
+        if (maxPages != 0)
+        {
+            String page = String.format("%d / %d", tabPage + 1, maxPages + 1);
+            int width = fontRendererObj.getStringWidth(page);
+            GlStateManager.disableLighting();
+            this.zLevel = 300.0F;
+            itemRender.zLevel = 300.0F;
+            fontRendererObj.drawString(page, guiLeft + (xSize / 2) - (width / 2), guiTop - 44, -1);
+            this.zLevel = 0.0F;
+            itemRender.zLevel = 0.0F;
+        }
+
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         GlStateManager.disableLighting();
     }
@@ -637,16 +686,35 @@
         RenderHelper.enableGUIStandardItemLighting();
         CreativeTabs creativetabs = CreativeTabs.creativeTabArray[selectedTabIndex];
 
-        for (CreativeTabs creativetabs1 : CreativeTabs.creativeTabArray)
+        int start = tabPage * 10;
+        int end = Math.min(CreativeTabs.creativeTabArray.length, ((tabPage + 1) * 10 + 2));
+        if (tabPage != 0) start += 2;
+
+        for (CreativeTabs creativetabs1 : java.util.Arrays.copyOfRange(CreativeTabs.creativeTabArray,start,end))
         {
             this.mc.getTextureManager().bindTexture(creativeInventoryTabs);
 
+            if (creativetabs1 == null) continue;
             if (creativetabs1.getTabIndex() != selectedTabIndex)
             {
                 this.func_147051_a(creativetabs1);
             }
         }
 
+        if (tabPage != 0)
+        {
+            if (creativetabs != CreativeTabs.tabAllSearch)
+            {
+                this.mc.getTextureManager().bindTexture(creativeInventoryTabs);
+                func_147051_a(CreativeTabs.tabAllSearch);
+            }
+            if (creativetabs != CreativeTabs.tabInventory)
+            {
+                this.mc.getTextureManager().bindTexture(creativeInventoryTabs);
+                func_147051_a(CreativeTabs.tabInventory);
+            }
+        }
+
         this.mc.getTextureManager().bindTexture(new ResourceLocation("textures/gui/container/creative_inventory/tab_" + creativetabs.getBackgroundImageName()));
         this.drawTexturedModalRect(this.guiLeft, this.guiTop, 0, 0, this.xSize, this.ySize);
         this.searchField.drawTextBox();
@@ -661,6 +729,14 @@
             this.drawTexturedModalRect(i, j + (int)((float)(k - j - 17) * this.currentScroll), 232 + (this.needsScrollBars() ? 0 : 12), 0, 12, 15);
         }
 
+        if (creativetabs == null || creativetabs.getTabPage() != tabPage)
+        {
+            if (creativetabs != CreativeTabs.tabAllSearch && creativetabs != CreativeTabs.tabInventory)
+            {
+                return;
+            }
+        }
+
         this.func_147051_a(creativetabs);
 
         if (creativetabs == CreativeTabs.tabInventory)
@@ -671,6 +747,14 @@
 
     protected boolean func_147049_a(CreativeTabs p_147049_1_, int p_147049_2_, int p_147049_3_)
     {
+        if (p_147049_1_.getTabPage() != tabPage)
+        {
+            if (p_147049_1_ != CreativeTabs.tabAllSearch && p_147049_1_ != CreativeTabs.tabInventory)
+            {
+                return false;
+            }
+        }
+
         int i = p_147049_1_.getTabColumn();
         int j = 28 * i;
         int k = 0;
@@ -767,6 +851,8 @@
         }
 
         GlStateManager.disableLighting();
+        GlStateManager.color(1F, 1F, 1F); //Forge: Reset color in case Items change it.
+        GlStateManager.enableBlend(); //Forge: Make sure blend is enabled else tabs show a white border.
         this.drawTexturedModalRect(l, i1, j, k, 28, j1);
         this.zLevel = 100.0F;
         this.itemRender.zLevel = 100.0F;
@@ -793,6 +879,15 @@
         {
             this.mc.displayGuiScreen(new GuiStats(this, this.mc.thePlayer.getStatFileWriter()));
         }
+
+        if (button.id == 101)
+        {
+            tabPage = Math.max(tabPage - 1, 0);
+        }
+        else if (button.id == 102)
+        {
+            tabPage = Math.min(tabPage + 1, maxPages);
+        }
     }
 
     public int getSelectedTabIndex()
