--- ../src-base/minecraft/net/minecraft/client/renderer/entity/layers/LayerArmorBase.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/entity/layers/LayerArmorBase.java
@@ -59,29 +59,27 @@
                 T t = this.func_188360_a(p_188361_9_);
                 t.setModelAttributes(this.renderer.getMainModel());
                 t.setLivingAnimations(p_188361_1_, p_188361_2_, p_188361_3_, p_188361_4_);
+                t = getArmorModelHook(p_188361_1_, itemstack, p_188361_9_, t);
                 this.func_188359_a(t, p_188361_9_);
                 boolean flag = this.func_188363_b(p_188361_9_);
-                this.renderer.bindTexture(this.getArmorResource(itemarmor, flag));
+                this.renderer.bindTexture(this.getArmorResource(p_188361_1_, itemstack, p_188361_9_, null));
 
-                switch (itemarmor.getArmorMaterial())
-                {
-                    case LEATHER:
                         int i = itemarmor.getColor(itemstack);
+                {
+                    if (i != -1) // Allow this for anything, not only cloth
+                    {
                         float f = (float)(i >> 16 & 255) / 255.0F;
                         float f1 = (float)(i >> 8 & 255) / 255.0F;
                         float f2 = (float)(i & 255) / 255.0F;
                         GlStateManager.color(this.colorR * f, this.colorG * f1, this.colorB * f2, this.alpha);
                         t.render(p_188361_1_, p_188361_2_, p_188361_3_, p_188361_5_, p_188361_6_, p_188361_7_, p_188361_8_);
-                        this.renderer.bindTexture(this.getArmorResource(itemarmor, flag, "overlay"));
-                    case CHAIN:
-                    case IRON:
-                    case GOLD:
-                    case DIAMOND:
+                        this.renderer.bindTexture(this.getArmorResource(p_188361_1_, itemstack, p_188361_9_, "overlay"));
+                    }
+                    { // Non-colored
                         GlStateManager.color(this.colorR, this.colorG, this.colorB, this.alpha);
                         t.render(p_188361_1_, p_188361_2_, p_188361_3_, p_188361_5_, p_188361_6_, p_188361_7_, p_188361_8_);
-                    default:
-
-                        if (!this.field_177193_i && itemstack.isItemEnchanted())
+                    } // Default
+                        if (!this.field_177193_i && itemstack.hasEffect())
                         {
                             func_188364_a(this.renderer, p_188361_1_, t, p_188361_2_, p_188361_3_, p_188361_4_, p_188361_5_, p_188361_6_, p_188361_7_, p_188361_8_);
                         }
@@ -140,11 +138,13 @@
         GlStateManager.disableBlend();
     }
 
+    @Deprecated //Use the more sensitive version getArmorResource below
     private ResourceLocation getArmorResource(ItemArmor p_177181_1_, boolean p_177181_2_)
     {
         return this.getArmorResource(p_177181_1_, p_177181_2_, (String)null);
     }
 
+    @Deprecated //Use the more sensitive version getArmorResource below
     private ResourceLocation getArmorResource(ItemArmor p_177178_1_, boolean p_177178_2_, String p_177178_3_)
     {
         String s = String.format("textures/models/armor/%s_layer_%d%s.png", new Object[] {p_177178_1_.getArmorMaterial().getName(), Integer.valueOf(p_177178_2_ ? 2 : 1), p_177178_3_ == null ? "" : String.format("_%s", new Object[]{p_177178_3_})});
@@ -162,4 +162,49 @@
     protected abstract void initArmor();
 
     protected abstract void func_188359_a(T p_188359_1_, EntityEquipmentSlot p_188359_2_);
+
+    /*=================================== FORGE START =========================================*/
+
+    /**
+     * Hook to allow item-sensitive armor model. for LayerBipedArmor.
+     */
+    protected T getArmorModelHook(EntityLivingBase entity, ItemStack itemStack, EntityEquipmentSlot slot, T model)
+    {
+        return model;
+    }
+
+    /**
+     * More generic ForgeHook version of the above function, it allows for Items to have more control over what texture they provide.
+     *
+     * @param entity Entity wearing the armor
+     * @param stack ItemStack for the armor
+     * @param slot Slot ID that the item is in
+     * @param type Subtype, can be null or "overlay"
+     * @return ResourceLocation pointing at the armor's texture
+     */
+    public ResourceLocation getArmorResource(net.minecraft.entity.Entity entity, ItemStack stack, EntityEquipmentSlot slot, String type)
+    {
+        ItemArmor item = (ItemArmor)stack.getItem();
+        String texture = item.getArmorMaterial().getName();
+        String domain = "minecraft";
+        int idx = texture.indexOf(':');
+        if (idx != -1)
+        {
+            domain = texture.substring(0, idx);
+            texture = texture.substring(idx + 1);
+        }
+        String s1 = String.format("%s:textures/models/armor/%s_layer_%d%s.png", domain, texture, (func_188363_b(slot) ? 2 : 1), type == null ? "" : String.format("_%s", type));
+
+        s1 = net.minecraftforge.client.ForgeHooksClient.getArmorTexture(entity, stack, s1, slot, type);
+        ResourceLocation resourcelocation = (ResourceLocation)ARMOR_TEXTURE_RES_MAP.get(s1);
+
+        if (resourcelocation == null)
+        {
+            resourcelocation = new ResourceLocation(s1);
+            ARMOR_TEXTURE_RES_MAP.put(s1, resourcelocation);
+        }
+
+        return resourcelocation;
+    }
+    /*=================================== FORGE END ===========================================*/
 }
