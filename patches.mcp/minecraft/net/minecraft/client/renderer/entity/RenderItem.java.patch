--- ../src-base/minecraft/net/minecraft/client/renderer/entity/RenderItem.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/entity/RenderItem.java
@@ -83,7 +83,7 @@
     public RenderItem(TextureManager textureManager, ModelManager modelManager)
     {
         this.textureManager = textureManager;
-        this.itemModelMesher = new ItemModelMesher(modelManager);
+        this.itemModelMesher = new net.minecraftforge.client.ItemModelMesherForge(modelManager);
         this.registerItems();
     }
 
@@ -222,7 +222,7 @@
         BakedQuad bakedquad;
         int j;
 
-        for (Iterator iterator = quads.iterator(); iterator.hasNext(); this.renderQuad(renderer, bakedquad, j))
+        for (Iterator iterator = quads.iterator(); iterator.hasNext(); net.minecraftforge.client.model.pipeline.LightUtil.renderQuadColor(renderer, bakedquad, j))
         {
             bakedquad = (BakedQuad)iterator.next();
             j = color;
@@ -302,6 +302,10 @@
                     modelresourcelocation = new ModelResourceLocation("bow_pulling_0", "inventory");
                 }
             }
+            else
+            {
+                modelresourcelocation = item.getModel(stack, entityplayer, entityplayer.getItemInUseCount());
+            }
 
             if (modelresourcelocation != null)
             {
@@ -314,6 +318,11 @@
 
     protected void applyTransform(ItemTransformVec3f transform)
     {
+        applyVanillaTransform(transform);
+    }
+
+    public static void applyVanillaTransform(ItemTransformVec3f transform)
+    {
         if (transform != ItemTransformVec3f.DEFAULT)
         {
             GlStateManager.translate(transform.translation.x + debugItemOffsetX, transform.translation.y + debugItemOffsetY, transform.translation.z + debugItemOffsetZ);
@@ -335,23 +344,7 @@
         GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
         GlStateManager.pushMatrix();
 
-        switch (RenderItem.SwitchTransformType.TRANSFORM_LOOKUP[cameraTransformType.ordinal()])
-        {
-            case 1:
-            default:
-                break;
-            case 2:
-                this.applyTransform(model.getItemCameraTransforms().thirdPerson);
-                break;
-            case 3:
-                this.applyTransform(model.getItemCameraTransforms().firstPerson);
-                break;
-            case 4:
-                this.applyTransform(model.getItemCameraTransforms().head);
-                break;
-            case 5:
-                this.applyTransform(model.getItemCameraTransforms().gui);
-        }
+        model = net.minecraftforge.client.ForgeHooksClient.handleCameraTransforms(model, cameraTransformType);
 
         this.renderItem(stack, model);
         GlStateManager.popMatrix();
@@ -374,7 +367,7 @@
         GlStateManager.blendFunc(770, 771);
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         this.setupGuiTransform(x, y, ibakedmodel.isGui3d());
-        this.applyTransform(ibakedmodel.getItemCameraTransforms().gui);
+        ibakedmodel = net.minecraftforge.client.ForgeHooksClient.handleCameraTransforms(ibakedmodel, ItemCameraTransforms.TransformType.GUI);
         this.renderItem(stack, ibakedmodel);
         GlStateManager.disableAlpha();
         GlStateManager.disableRescaleNormal();
@@ -485,10 +478,11 @@
                 GlStateManager.enableDepth();
             }
 
-            if (stack.isItemDamaged())
+            if (stack.getItem().showDurabilityBar(stack))
             {
-                int j1 = (int)Math.round(13.0D - (double)stack.getItemDamage() * 13.0D / (double)stack.getMaxDamage());
-                int k = (int)Math.round(255.0D - (double)stack.getItemDamage() * 255.0D / (double)stack.getMaxDamage());
+                double health = stack.getItem().getDurabilityForDisplay(stack);
+                int j1 = (int)Math.round(13.0D - health * 13.0D);
+                int k = (int)Math.round(255.0D - health * 255.0D);
                 GlStateManager.disableLighting();
                 GlStateManager.disableDepth();
                 GlStateManager.disableTexture2D();
@@ -501,7 +495,7 @@
                 this.drawRect(worldrenderer, xPosition + 2, yPosition + 13, 13, 2, 0);
                 this.drawRect(worldrenderer, xPosition + 2, yPosition + 13, 12, 1, i1);
                 this.drawRect(worldrenderer, xPosition + 2, yPosition + 13, j1, 1, l);
-                GlStateManager.enableBlend();
+                //GlStateManager.enableBlend(); // Forge: Disable Bled because it screws with a lot of things down the line.
                 GlStateManager.enableAlpha();
                 GlStateManager.enableTexture2D();
                 GlStateManager.enableLighting();
@@ -1072,12 +1066,26 @@
         this.registerBlock(Blocks.brown_mushroom_block, BlockHugeMushroom.EnumType.ALL_INSIDE.getMetadata(), "brown_mushroom_block");
         this.registerBlock(Blocks.red_mushroom_block, BlockHugeMushroom.EnumType.ALL_INSIDE.getMetadata(), "red_mushroom_block");
         this.registerBlock(Blocks.dragon_egg, "dragon_egg");
+        net.minecraftforge.client.model.ModelLoader.onRegisterItems(this.itemModelMesher);
     }
 
     public void onResourceManagerReload(IResourceManager resourceManager)
     {
         this.itemModelMesher.rebuildCache();
     }
+    /*==================================== FORGE START ===========================================* /
+    private static RenderItem instance;
+    /**
+     * Returns a single lazy loaded instance of RenderItem, for use in mods who
+     * don't care about the interaction of other objects on the current state of the RenderItem they are using.
+     * @return A global instance of RenderItem
+     * /
+    public static RenderItem getInstance()
+    {
+        if (instance == null) instance = new RenderItem();
+        return instance;
+    }
+    /*==================================== FORGE END =============================================*/
 
     @SideOnly(Side.CLIENT)
 
