--- ../src-base/minecraft/net/minecraft/network/NetHandlerPlayServer.java
+++ ../src-work/minecraft/net/minecraft/network/NetHandlerPlayServer.java
@@ -93,6 +93,14 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.fml.common.eventhandler.Event;
+import net.minecraftforge.event.ForgeEventFactory;
+import net.minecraftforge.event.ServerChatEvent;
+import net.minecraftforge.event.entity.player.PlayerInteractEvent;
+import net.minecraftforge.event.entity.player.PlayerInteractEvent.Action;
+
 public class NetHandlerPlayServer implements INetHandlerPlayServer, IUpdatePlayerListBox
 {
     private static final Logger logger = LogManager.getLogger();
@@ -246,6 +254,8 @@
                         this.playerEntity.ridingEntity.updateRiderPosition();
                     }
 
+                    if (!this.hasMoved) return; //Fixes teleportation kick while riding entities
+
                     this.serverController.getConfigurationManager().serverUpdateMountedMovingPlayer(this.playerEntity);
 
                     if (this.playerEntity.ridingEntity != null)
@@ -324,9 +334,10 @@
                 double d11 = d8 - this.playerEntity.posX;
                 double d12 = d9 - this.playerEntity.posY;
                 double d13 = d10 - this.playerEntity.posZ;
-                double d14 = Math.min(Math.abs(d11), Math.abs(this.playerEntity.motionX));
-                double d15 = Math.min(Math.abs(d12), Math.abs(this.playerEntity.motionY));
-                double d16 = Math.min(Math.abs(d13), Math.abs(this.playerEntity.motionZ));
+                //BUGFIX: min -> max, grabs the highest distance
+                double d14 = Math.max(Math.abs(d11), Math.abs(this.playerEntity.motionX));
+                double d15 = Math.max(Math.abs(d12), Math.abs(this.playerEntity.motionY));
+                double d16 = Math.max(Math.abs(d13), Math.abs(this.playerEntity.motionZ));
                 double d17 = d14 * d14 + d15 * d15 + d16 * d16;
 
                 if (d17 > 100.0D && (!this.serverController.isSinglePlayer() || !this.serverController.getServerOwner().equals(this.playerEntity.getName())))
@@ -344,6 +355,8 @@
                     this.playerEntity.jump();
                 }
 
+                if (!this.hasMoved) return; //Fixes "Moved Too Fast" kick when being teleported while moving
+
                 this.playerEntity.moveEntity(d11, d12, d13);
                 this.playerEntity.onGround = packetIn.isOnGround();
                 double d18 = d12;
@@ -365,6 +378,8 @@
                     logger.warn(this.playerEntity.getName() + " moved wrongly!");
                 }
 
+                if (!this.hasMoved) return; //Fixes "Moved Too Fast" kick when being teleported while moving
+
                 this.playerEntity.setPositionAndRotation(d8, d9, d10, f1, f2);
                 this.playerEntity.addMovementStat(this.playerEntity.posX - d0, this.playerEntity.posY - d1, this.playerEntity.posZ - d2);
 
@@ -372,7 +387,7 @@
                 {
                     boolean flag2 = worldserver.getCollidingBoundingBoxes(this.playerEntity, this.playerEntity.getEntityBoundingBox().contract((double)f3, (double)f3, (double)f3)).isEmpty();
 
-                    if (flag && (flag1 || !flag2) && !this.playerEntity.isPlayerSleeping())
+                    if (flag && (flag1 || !flag2) && !this.playerEntity.isPlayerSleeping() && !this.playerEntity.noClip)
                     {
                         this.setPlayerLocation(this.lastPosX, this.lastPosY, this.lastPosZ, f1, f2);
                         return;
@@ -400,6 +415,8 @@
                     this.floatingTickCount = 0;
                 }
 
+                if (!this.hasMoved) return; //Fixes "Moved Too Fast" kick when being teleported while moving
+
                 this.playerEntity.onGround = packetIn.isOnGround();
                 this.serverController.getConfigurationManager().serverUpdateMountedMovingPlayer(this.playerEntity);
                 this.playerEntity.handleFalling(this.playerEntity.posY - d7, packetIn.isOnGround());
@@ -489,7 +506,10 @@
                 double d2 = this.playerEntity.posZ - ((double)blockpos.getZ() + 0.5D);
                 double d3 = d0 * d0 + d1 * d1 + d2 * d2;
 
-                if (d3 > 36.0D)
+                double dist = playerEntity.theItemInWorldManager.getBlockReachDistance() + 1;
+                dist *= dist;
+
+                if (d3 > dist)
                 {
                     return;
                 }
@@ -540,6 +560,7 @@
         WorldServer worldserver = this.serverController.worldServerForDimension(this.playerEntity.dimension);
         ItemStack itemstack = this.playerEntity.inventory.getCurrentItem();
         boolean flag = false;
+        boolean placeResult = true;
         BlockPos blockpos = packetIn.getPosition();
         EnumFacing enumfacing = EnumFacing.getFront(packetIn.getPlacedBlockDirection());
         this.playerEntity.markPlayerActive();
@@ -551,7 +572,11 @@
                 return;
             }
 
+            PlayerInteractEvent event = ForgeEventFactory.onPlayerInteract(playerEntity, PlayerInteractEvent.Action.RIGHT_CLICK_AIR, worldserver, new BlockPos(0, 0, 0), null);
+            if (event.useItem != Event.Result.DENY)
+            {
             this.playerEntity.theItemInWorldManager.tryUseItem(this.playerEntity, worldserver, itemstack);
+            }
         }
         else if (blockpos.getY() >= this.serverController.getBuildLimit() - 1 && (enumfacing == EnumFacing.UP || blockpos.getY() >= this.serverController.getBuildLimit()))
         {
@@ -562,9 +587,12 @@
         }
         else
         {
-            if (this.hasMoved && this.playerEntity.getDistanceSq((double)blockpos.getX() + 0.5D, (double)blockpos.getY() + 0.5D, (double)blockpos.getZ() + 0.5D) < 64.0D && !this.serverController.isBlockProtected(worldserver, blockpos, this.playerEntity) && worldserver.getWorldBorder().contains(blockpos))
+            double dist = playerEntity.theItemInWorldManager.getBlockReachDistance() + 1;
+            dist *= dist;
+            if (this.hasMoved && this.playerEntity.getDistanceSq((double)blockpos.getX() + 0.5D, (double)blockpos.getY() + 0.5D, (double)blockpos.getZ() + 0.5D) < dist && !this.serverController.isBlockProtected(worldserver, blockpos, this.playerEntity) && worldserver.getWorldBorder().contains(blockpos))
             {
-                this.playerEntity.theItemInWorldManager.activateBlockOrUseItem(this.playerEntity, worldserver, itemstack, blockpos, enumfacing, packetIn.getPlacedBlockOffsetX(), packetIn.getPlacedBlockOffsetY(), packetIn.getPlacedBlockOffsetZ());
+                // record block place result so we can update client itemstack size if place event was cancelled.
+                placeResult = this.playerEntity.theItemInWorldManager.activateBlockOrUseItem(this.playerEntity, worldserver, itemstack, blockpos, enumfacing, packetIn.getPlacedBlockOffsetX(), packetIn.getPlacedBlockOffsetY(), packetIn.getPlacedBlockOffsetZ());
             }
 
             flag = true;
@@ -592,7 +620,7 @@
             this.playerEntity.openContainer.detectAndSendChanges();
             this.playerEntity.isChangingQuantityOnly = false;
 
-            if (!ItemStack.areItemStacksEqual(this.playerEntity.inventory.getCurrentItem(), packetIn.getStack()))
+            if (!ItemStack.areItemStacksEqual(this.playerEntity.inventory.getCurrentItem(), packetIn.getStack()) || !placeResult) // force client itemstack update if place event was cancelled
             {
                 this.sendPacket(new S2FPacketSetSlot(this.playerEntity.openContainer.windowId, slot.slotNumber, this.playerEntity.inventory.getCurrentItem()));
             }
@@ -764,8 +792,10 @@
             }
             else
             {
-                ChatComponentTranslation chatcomponenttranslation1 = new ChatComponentTranslation("chat.type.text", new Object[] {this.playerEntity.getDisplayName(), s});
-                this.serverController.getConfigurationManager().sendChatMsgImpl(chatcomponenttranslation1, false);
+                ChatComponentTranslation chatcomponenttranslation1 = new ChatComponentTranslation("chat.type.text", this.playerEntity.getDisplayName(), ForgeHooks.newChatWithLinks(s));
+                IChatComponent chat = ForgeHooks.onServerChatEvent(this, s, chatcomponenttranslation1);
+                if (chat == null) return;
+                this.serverController.getConfigurationManager().sendChatMsgImpl(chat, false);
             }
 
             this.chatSpamThresholdCount += 20;
@@ -907,7 +937,7 @@
                         return;
                     }
 
-                    this.playerEntity = this.serverController.getConfigurationManager().recreatePlayerEntity(this.playerEntity, 0, false);
+                    this.playerEntity = this.serverController.getConfigurationManager().recreatePlayerEntity(this.playerEntity, playerEntity.dimension, false);
                 }
 
                 break;
@@ -1080,7 +1110,10 @@
                 return;
             }
 
-            System.arraycopy(packetIn.getLines(), 0, tileentitysign.signText, 0, 4);
+            IChatComponent[] lines = packetIn.getLines(); //Forge: Prevent client from directly sending commands
+            for (int x = 0; x < tileentitysign.signText.length && x < lines.length; x++)
+                tileentitysign.signText[x] = new ChatComponentText(net.minecraft.util.EnumChatFormatting.getTextWithoutFormattingCodes(lines[x].getUnformattedText()));
+
             tileentitysign.markDirty();
             worldserver.markBlockForUpdate(blockpos);
         }
