--- ../src-base/minecraft/net/minecraft/block/BlockLever.java
+++ ../src-work/minecraft/net/minecraft/block/BlockLever.java
@@ -47,24 +47,24 @@
 
     public boolean canPlaceBlockOnSide(World worldIn, BlockPos pos, EnumFacing side)
     {
-        return side == EnumFacing.UP && World.doesBlockHaveSolidTopSurface(worldIn, pos.down()) ? true : this.canSustainLever(worldIn, pos.offset(side.getOpposite()));
+        return side == EnumFacing.UP && World.doesBlockHaveSolidTopSurface(worldIn, pos.down()) ? true : worldIn.isSideSolid(pos.offset(side.getOpposite()), side);
     }
 
     public boolean canPlaceBlockAt(World worldIn, BlockPos pos)
     {
-        return this.canSustainLever(worldIn, pos.west()) ? true : (this.canSustainLever(worldIn, pos.east()) ? true : (this.canSustainLever(worldIn, pos.north()) ? true : (this.canSustainLever(worldIn, pos.south()) ? true : (World.doesBlockHaveSolidTopSurface(worldIn, pos.down()) ? true : this.canSustainLever(worldIn, pos.up())))));
+        return worldIn.isSideSolid(pos.west(),  EnumFacing.EAST ) ||
+               worldIn.isSideSolid(pos.east(),  EnumFacing.WEST ) ||
+               worldIn.isSideSolid(pos.north(), EnumFacing.SOUTH) ||
+               worldIn.isSideSolid(pos.south(), EnumFacing.NORTH) ||
+               worldIn.isSideSolid(pos.down(),  EnumFacing.UP   ) ||
+               worldIn.isSideSolid(pos.up(),    EnumFacing.DOWN );
     }
 
-    protected boolean canSustainLever(World worldIn, BlockPos pos)
-    {
-        return worldIn.getBlockState(pos).getBlock().isNormalCube();
-    }
-
     public IBlockState onBlockPlaced(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)
     {
         IBlockState iblockstate = this.getDefaultState().withProperty(POWERED, Boolean.valueOf(false));
 
-        if (this.canSustainLever(worldIn, pos.offset(facing.getOpposite())))
+        if (worldIn.isSideSolid(pos.offset(facing.getOpposite()), facing))
         {
             return iblockstate.withProperty(FACING, BlockLever.EnumOrientation.forFacings(facing, placer.getHorizontalFacing()));
         }
@@ -87,7 +87,7 @@
 
                 enumfacing1 = (EnumFacing)iterator.next();
             }
-            while (enumfacing1 == facing || !this.canSustainLever(worldIn, pos.offset(enumfacing1.getOpposite())));
+            while (enumfacing1 == facing || !worldIn.isSideSolid(pos.offset(enumfacing1.getOpposite()), enumfacing1));
 
             return iblockstate.withProperty(FACING, BlockLever.EnumOrientation.forFacings(enumfacing1, placer.getHorizontalFacing()));
         }
@@ -116,7 +116,8 @@
 
     public void onNeighborBlockChange(World worldIn, BlockPos pos, IBlockState state, Block neighborBlock)
     {
-        if (this.checkForDrop(worldIn, pos) && !this.canSustainLever(worldIn, pos.offset(((BlockLever.EnumOrientation)state.getValue(FACING)).getFacing().getOpposite())))
+        EnumFacing dir = ((BlockLever.EnumOrientation)state.getValue(FACING)).getFacing();
+        if (this.checkForDrop(worldIn, pos) && !worldIn.isSideSolid(pos.offset(dir.getOpposite()), dir))
         {
             this.dropBlockAsItem(worldIn, pos, state, 0);
             worldIn.setBlockToAir(pos);
@@ -235,6 +236,12 @@
         return new BlockState(this, new IProperty[] {FACING, POWERED});
     }
 
+
+    private boolean canAttach(World world, BlockPos pos, EnumFacing side)
+    {
+        return world.isSideSolid(pos, side);
+    }
+
     public static enum EnumOrientation implements IStringSerializable
     {
         DOWN_X(0, "down_x", EnumFacing.DOWN),
