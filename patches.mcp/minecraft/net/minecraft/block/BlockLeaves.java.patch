--- ../src-base/minecraft/net/minecraft/block/BlockLeaves.java
+++ ../src-work/minecraft/net/minecraft/block/BlockLeaves.java
@@ -18,7 +18,7 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public abstract class BlockLeaves extends BlockLeavesBase
+public abstract class BlockLeaves extends BlockLeavesBase implements net.minecraftforge.common.IShearable
 {
     public static final PropertyBool DECAYABLE = PropertyBool.create("decayable");
     public static final PropertyBool CHECK_DECAY = PropertyBool.create("check_decay");
@@ -76,9 +76,9 @@
                         BlockPos blockpos1 = pos.add(i1, j1, k1);
                         IBlockState iblockstate1 = worldIn.getBlockState(blockpos1);
 
-                        if (iblockstate1.getBlock().getMaterial() == Material.leaves && !((Boolean)iblockstate1.getValue(CHECK_DECAY)).booleanValue())
+                        if (iblockstate1.getBlock().isLeaves(worldIn, blockpos1))
                         {
-                            worldIn.setBlockState(blockpos1, iblockstate1.withProperty(CHECK_DECAY, Boolean.valueOf(true)), 4);
+                            iblockstate1.getBlock().beginLeavesDecay(worldIn, blockpos1);
                         }
                     }
                 }
@@ -119,11 +119,12 @@
                         {
                             for (i2 = -b0; i2 <= b0; ++i2)
                             {
-                                Block block = worldIn.getBlockState(new BlockPos(j + k1, k + l1, l + i2)).getBlock();
+                                BlockPos tmp = new BlockPos(j + k1, k + l1, l + i2);
+                                Block block = worldIn.getBlockState(tmp).getBlock();
 
-                                if (block != Blocks.log && block != Blocks.log2)
+                                if (!block.canSustainLeaves(worldIn, tmp))
                                 {
-                                    if (block.getMaterial() == Material.leaves)
+                                    if (block.isLeaves(worldIn, tmp))
                                     {
                                         this.surroundings[(k1 + j1) * i1 + (l1 + j1) * b1 + i2 + j1] = -2;
                                     }
@@ -230,40 +231,7 @@
 
     public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune)
     {
-        if (!worldIn.isRemote)
-        {
-            int j = this.getSaplingDropChance(state);
-
-            if (fortune > 0)
-            {
-                j -= 2 << fortune;
-
-                if (j < 10)
-                {
-                    j = 10;
-                }
-            }
-
-            if (worldIn.rand.nextInt(j) == 0)
-            {
-                Item item = this.getItemDropped(state, worldIn.rand, fortune);
-                spawnAsEntity(worldIn, pos, new ItemStack(item, 1, this.damageDropped(state)));
-            }
-
-            j = 200;
-
-            if (fortune > 0)
-            {
-                j -= 10 << fortune;
-
-                if (j < 40)
-                {
-                    j = 40;
-                }
-            }
-
-            this.dropApple(worldIn, pos, state, j);
-        }
+        super.dropBlockAsItemWithChance(worldIn, pos, state, chance, fortune);
     }
 
     protected void dropApple(World worldIn, BlockPos pos, IBlockState state, int chance) {}
@@ -298,4 +266,48 @@
     }
 
     public abstract BlockPlanks.EnumType getWoodType(int meta);
+
+    @Override public boolean isShearable(ItemStack item, IBlockAccess world, BlockPos pos){ return true; }
+    @Override public boolean isLeaves(IBlockAccess world, BlockPos pos){ return true; }
+
+    @Override
+    public void beginLeavesDecay(World world, BlockPos pos)
+    {
+        IBlockState state = world.getBlockState(pos);
+        if (!(Boolean)state.getValue(CHECK_DECAY))
+        {
+            world.setBlockState(pos, state.withProperty(CHECK_DECAY, true), 4);
+        }
+    }
+
+    @Override
+    public java.util.List<ItemStack> getDrops(IBlockAccess world, BlockPos pos, IBlockState state, int fortune)
+    {
+        java.util.List<ItemStack> ret = new java.util.ArrayList<ItemStack>();
+        Random rand = world instanceof World ? ((World)world).rand : new Random();
+        int chance = this.getSaplingDropChance(state);
+
+        if (fortune > 0)
+        {
+            chance -= 2 << fortune;
+            if (chance < 10) chance = 10;
+        }
+
+        if (rand.nextInt(chance) == 0)
+            ret.add(new ItemStack(getItemDropped(state, rand, fortune), 1, damageDropped(state)));
+
+        chance = 200;
+        if (fortune > 0)
+        {
+            chance -= 10 << fortune;
+            if (chance < 40) chance = 40;
+        }
+
+        this.captureDrops(true);
+        if (world instanceof World)
+            this.dropApple((World)world, pos, state, chance); // Dammet mojang
+        ret.addAll(this.captureDrops(false));
+        return ret;
+    }
+
 }
