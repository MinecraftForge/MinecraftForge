++++ REJECTED PATCH 1
 
     protected void registerWorldChunkManager()
     {
-        WorldType worldtype = this.worldObj.getWorldInfo().getTerrainType();
-
-        if (worldtype == WorldType.FLAT)
-        {
-            FlatGeneratorInfo flatgeneratorinfo = FlatGeneratorInfo.createFlatGeneratorFromString(this.worldObj.getWorldInfo().getGeneratorOptions());
-            this.worldChunkMgr = new WorldChunkManagerHell(BiomeGenBase.getBiomeFromBiomeList(flatgeneratorinfo.getBiome(), BiomeGenBase.field_180279_ad), 0.5F);
-        }
-        else if (worldtype == WorldType.DEBUG_WORLD)
-        {
-            this.worldChunkMgr = new WorldChunkManagerHell(BiomeGenBase.plains, 0.0F);
-        }
-        else
-        {
-            this.worldChunkMgr = new WorldChunkManager(this.worldObj);
-        }
+        this.worldChunkMgr = terrainType.getChunkManager(worldObj);
     }
 
     public IChunkProvider createChunkGenerator()
     {
-        return (IChunkProvider)(this.terrainType == WorldType.FLAT ? new ChunkProviderFlat(this.worldObj, this.worldObj.getSeed(), this.worldObj.getWorldInfo().isMapFeaturesEnabled(), this.generatorSettings) : (this.terrainType == WorldType.DEBUG_WORLD ? new ChunkProviderDebug(this.worldObj) : (this.terrainType == WorldType.CUSTOMIZED ? new ChunkProviderGenerate(this.worldObj, this.worldObj.getSeed(), this.worldObj.getWorldInfo().isMapFeaturesEnabled(), this.generatorSettings) : new ChunkProviderGenerate(this.worldObj, this.worldObj.getSeed(), this.worldObj.getWorldInfo().isMapFeaturesEnabled(), this.generatorSettings))));
+        return terrainType.getChunkGenerator(worldObj, generatorSettings);
     }
 
     public boolean canCoordinateBeSpawn(int x, int z)
++++ END PATCH
++++ REJECTED PATCH 2
 
     public static WorldProvider getProviderForDimension(int dimension)
     {
-        return (WorldProvider)(dimension == -1 ? new WorldProviderHell() : (dimension == 0 ? new WorldProviderSurface() : (dimension == 1 ? new WorldProviderEnd() : null)));
+        return net.minecraftforge.common.DimensionManager.createProviderFor(dimension);
     }
 
     @SideOnly(Side.CLIENT)
     public float getCloudHeight()
     {
-        return 128.0F;
+        return this.terrainType.getCloudHeight();
     }
 
     @SideOnly(Side.CLIENT)
++++ END PATCH
