++++ REJECTED PATCH 2
 
     public void dropChunk(int x, int z)
     {
-        if (this.worldObj.provider.canRespawnHere())
+        if (this.worldObj.provider.canRespawnHere() && net.minecraftforge.common.DimensionManager.shouldLoadSpawn(this.worldObj.provider.getDimensionId()))
         {
             if (!this.worldObj.isSpawnChunk(x, z))
             {
++++ END PATCH
++++ REJECTED PATCH 3
 
     public Chunk loadChunk(int p_73158_1_, int p_73158_2_)
     {
+        return loadChunk(p_73158_1_, p_73158_2_, null);
+    }
+
+    public Chunk loadChunk(int par1, int par2, Runnable runnable)
+    {
+        long k = ChunkCoordIntPair.chunkXZ2Int(par1, par2);
+        this.droppedChunksSet.remove(Long.valueOf(k));
+        Chunk chunk = (Chunk)this.id2ChunkMap.getValueByKey(k);
+        net.minecraft.world.chunk.storage.AnvilChunkLoader loader = null;
+
+        if (this.chunkLoader instanceof net.minecraft.world.chunk.storage.AnvilChunkLoader)
+        {
+            loader = (net.minecraft.world.chunk.storage.AnvilChunkLoader) this.chunkLoader;
+        }
+
+        // We can only use the queue for already generated chunks
+        if (chunk == null && loader != null && loader.chunkExists(this.worldObj, par1, par2))
+        {
+            if (runnable != null)
+            {
+                net.minecraftforge.common.chunkio.ChunkIOExecutor.queueChunkLoad(this.worldObj, loader, this, par1, par2, runnable);
+                return null;
+            }
+            else
+            {
+                chunk = net.minecraftforge.common.chunkio.ChunkIOExecutor.syncChunkLoad(this.worldObj, loader, this, par1, par2);
+            }
+        }
+        else if (chunk == null)
+        {
+            chunk = this.originalLoadChunk(par1, par2);
+        }
+
+        // If we didn't load the chunk async and have a callback run it now
+        if (runnable != null)
+        {
+            runnable.run();
+        }
+
+        return chunk;
+    }
+
+    public Chunk originalLoadChunk(int p_73158_1_, int p_73158_2_)
+    {
         long i = ChunkCoordIntPair.chunkXZ2Int(p_73158_1_, p_73158_2_);
         this.droppedChunksSet.remove(Long.valueOf(i));
         Chunk chunk = (Chunk)this.id2ChunkMap.getValueByKey(i);
 
         if (chunk == null)
         {
+            boolean added = loadingChunks.add(i);
+            if (!added)
+            {
+                net.minecraftforge.fml.common.FMLLog.bigWarning("There is an attempt to load a chunk (%d,%d) in di    >mension %d that is already being loaded. This will cause weird chunk breakages.", p_73158_1_, p_73158_2_, worldObj.provider.getDimensionId());
+            }
+            chunk = net.minecraftforge.common.ForgeChunkManager.fetchDormantChunk(i, this.worldObj);
+
+            if (chunk == null)
             chunk = this.loadChunkFromFile(p_73158_1_, p_73158_2_);
 
             if (chunk == null)
++++ END PATCH
++++ REJECTED PATCH 5
             if (this.serverChunkGenerator != null)
             {
                 this.serverChunkGenerator.populate(p_73153_1_, p_73153_2_, p_73153_3_);
+                net.minecraftforge.fml.common.registry.GameRegistry.generateWorld(p_73153_2_, p_73153_3_, worldObj, serverChunkGenerator, p_73153_1_);
                 chunk.setChunkModified();
             }
         }
++++ END PATCH
