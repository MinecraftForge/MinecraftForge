++++ REJECTED PATCH 1
         this.maxPlayers = 8;
     }
 
-    public void initializeConnectionToPlayer(NetworkManager netManager, EntityPlayerMP playerIn)
+    public void initializeConnectionToPlayer(NetworkManager netManager, EntityPlayerMP playerIn, NetHandlerPlayServer nethandlerplayserver)
     {
         GameProfile gameprofile = playerIn.getGameProfile();
         PlayerProfileCache playerprofilecache = this.mcServer.getPlayerProfileCache();
++++ END PATCH
++++ REJECTED PATCH 2
         playerprofilecache.addEntry(gameprofile);
         NBTTagCompound nbttagcompound = this.readPlayerDataFromFile(playerIn);
         playerIn.setWorld(this.mcServer.worldServerForDimension(playerIn.dimension));
+
+        World playerWorld = this.mcServer.worldServerForDimension(playerIn.dimension);
+        if (playerWorld == null)
+        {
+            playerIn.dimension=0;
+            playerWorld=this.mcServer.worldServerForDimension(0);
+            BlockPos spawnPoint = playerWorld.provider.getRandomizedSpawnPoint();
+            playerIn.setPosition(spawnPoint.getX(), spawnPoint.getY(), spawnPoint.getZ());
+        }
+
+        playerIn.setWorld(playerWorld);
         playerIn.theItemInWorldManager.setWorld((WorldServer)playerIn.worldObj);
         String s1 = "local";
 
++++ END PATCH
++++ REJECTED PATCH 3
         WorldInfo worldinfo = worldserver.getWorldInfo();
         BlockPos blockpos = worldserver.getSpawnPoint();
         this.setPlayerGameTypeBasedOnOther(playerIn, (EntityPlayerMP)null, worldserver);
-        NetHandlerPlayServer nethandlerplayserver = new NetHandlerPlayServer(this.mcServer, netManager, playerIn);
+        playerIn.playerNetServerHandler = nethandlerplayserver;
         nethandlerplayserver.sendPacket(new S01PacketJoinGame(playerIn.getEntityId(), playerIn.theItemInWorldManager.getGameType(), worldinfo.isHardcoreModeEnabled(), worldserver.provider.getDimensionId(), worldserver.getDifficulty(), this.getMaxPlayers(), worldinfo.getTerrainType(), worldserver.getGameRules().getBoolean("reducedDebugInfo")));
         nethandlerplayserver.sendPacket(new S3FPacketCustomPayload("MC|Brand", (new PacketBuffer(Unpooled.buffer())).writeString(this.getServerInstance().getServerModName())));
         nethandlerplayserver.sendPacket(new S41PacketServerDifficulty(worldinfo.getDifficulty(), worldinfo.isDifficultyLocked()));
++++ END PATCH
++++ REJECTED PATCH 4
 
         playerIn.addSelfToInternalCraftingInventory();
 
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().firePlayerLoggedIn(playerIn);
         if (nbttagcompound != null && nbttagcompound.hasKey("Riding", 10))
         {
             Entity entity = EntityList.createEntityFromNBT(nbttagcompound.getCompoundTag("Riding"), worldserver);
++++ END PATCH
++++ REJECTED PATCH 5
             playerIn.readFromNBT(nbttagcompound);
             nbttagcompound1 = nbttagcompound;
             logger.debug("loading single player");
+            net.minecraftforge.event.ForgeEventFactory.firePlayerLoadingEvent(playerIn, this.playerNBTManagerObj, playerIn.getUniqueID().toString());
         }
         else
         {
++++ END PATCH
++++ REJECTED PATCH 6
         return nbttagcompound1;
     }
 
+    public NBTTagCompound getPlayerNBT(EntityPlayerMP player)
+    {
+        // Hacky method to allow loading the NBT for a player prior to login
+        NBTTagCompound nbttagcompound = this.mcServer.worldServers[0].getWorldInfo().getPlayerNBTTagCompound();
+        if (player.getName().equals(this.mcServer.getServerOwner()) && nbttagcompound != null)
+        {
+            return nbttagcompound;
+        }
+        else
+        {
+            return ((net.minecraft.world.storage.SaveHandler)this.playerNBTManagerObj).getPlayerNBT(player);
+        }
+    }
     protected void writePlayerData(EntityPlayerMP playerIn)
     {
+        if (playerIn.playerNetServerHandler == null) return;
+
         this.playerNBTManagerObj.writePlayerData(playerIn);
         StatisticsFile statisticsfile = (StatisticsFile)this.playerStatFiles.get(playerIn.getUniqueID());
 
++++ END PATCH
++++ REJECTED PATCH 7
         this.uuidToPlayerMap.put(playerIn.getUniqueID(), playerIn);
         this.sendPacketToAllPlayers(new S38PacketPlayerListItem(S38PacketPlayerListItem.Action.ADD_PLAYER, new EntityPlayerMP[] {playerIn}));
         WorldServer worldserver = this.mcServer.worldServerForDimension(playerIn.dimension);
+        net.minecraftforge.common.chunkio.ChunkIOExecutor.adjustPoolSize(this.getCurrentPlayerCount());
         worldserver.spawnEntityInWorld(playerIn);
         this.preparePlayer(playerIn, (WorldServer)null);
 
++++ END PATCH
++++ REJECTED PATCH 8
 
     public void playerLoggedOut(EntityPlayerMP playerIn)
     {
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().firePlayerLoggedOut(playerIn);
         playerIn.triggerAchievement(StatList.leaveGameStat);
         this.writePlayerData(playerIn);
         WorldServer worldserver = playerIn.getServerForPlayer();
++++ END PATCH
++++ REJECTED PATCH 9
             this.uuidToPlayerMap.remove(uuid);
             this.playerStatFiles.remove(uuid);
         }
+        net.minecraftforge.common.chunkio.ChunkIOExecutor.adjustPoolSize(this.getCurrentPlayerCount());
 
         this.sendPacketToAllPlayers(new S38PacketPlayerListItem(S38PacketPlayerListItem.Action.REMOVE_PLAYER, new EntityPlayerMP[] {playerIn}));
     }
++++ END PATCH
++++ REJECTED PATCH 10
 
     public EntityPlayerMP recreatePlayerEntity(EntityPlayerMP playerIn, int dimension, boolean conqueredEnd)
     {
+        World world = mcServer.worldServerForDimension(dimension);
+        if (world == null)
+        {
+            dimension = 0;
+        }
+        else if (!world.provider.canRespawnHere())
+        {
+            dimension = world.provider.getRespawnDimension(playerIn);
+        }
+
         playerIn.getServerForPlayer().getEntityTracker().removePlayerFromTrackers(playerIn);
         playerIn.getServerForPlayer().getEntityTracker().untrackEntity(playerIn);
         playerIn.getServerForPlayer().getPlayerManager().removePlayer(playerIn);
         this.playerEntityList.remove(playerIn);
         this.mcServer.worldServerForDimension(playerIn.dimension).removePlayerEntityDangerously(playerIn);
-        BlockPos blockpos = playerIn.getBedLocation();
-        boolean flag = playerIn.isSpawnForced();
+        BlockPos blockpos = playerIn.getBedLocation(dimension);
+        boolean flag = playerIn.isSpawnForced(dimension);
         playerIn.dimension = dimension;
         ItemInWorldManager iteminworldmanager;
 
++++ END PATCH
++++ REJECTED PATCH 11
         EntityPlayerMP entityplayermp = new EntityPlayerMP(this.mcServer, this.mcServer.worldServerForDimension(playerIn.dimension), playerIn.getGameProfile(), iteminworldmanager);
         entityplayermp.playerNetServerHandler = playerIn.playerNetServerHandler;
         entityplayermp.clonePlayer(playerIn, conqueredEnd);
+        entityplayermp.dimension = dimension;
         entityplayermp.setEntityId(playerIn.getEntityId());
         entityplayermp.func_174817_o(playerIn);
         WorldServer worldserver = this.mcServer.worldServerForDimension(playerIn.dimension);
++++ END PATCH
++++ REJECTED PATCH 12
         this.uuidToPlayerMap.put(entityplayermp.getUniqueID(), entityplayermp);
         entityplayermp.addSelfToInternalCraftingInventory();
         entityplayermp.setHealth(entityplayermp.getHealth());
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().firePlayerRespawnEvent(entityplayermp);
         return entityplayermp;
     }
 
     public void transferPlayerToDimension(EntityPlayerMP playerIn, int dimension)
     {
+        transferPlayerToDimension(playerIn, dimension, mcServer.worldServerForDimension(dimension).getDefaultTeleporter());
+    }
+
+    public void transferPlayerToDimension(EntityPlayerMP playerIn, int dimension, net.minecraft.world.Teleporter teleporter)
+    {
         int i = playerIn.dimension;
         WorldServer worldserver = this.mcServer.worldServerForDimension(playerIn.dimension);
         playerIn.dimension = dimension;
         WorldServer worldserver1 = this.mcServer.worldServerForDimension(playerIn.dimension);
-        playerIn.playerNetServerHandler.sendPacket(new S07PacketRespawn(playerIn.dimension, playerIn.worldObj.getDifficulty(), playerIn.worldObj.getWorldInfo().getTerrainType(), playerIn.theItemInWorldManager.getGameType()));
+        playerIn.playerNetServerHandler.sendPacket(new S07PacketRespawn(playerIn.dimension, worldserver1.getDifficulty(), worldserver1.getWorldInfo().getTerrainType(), playerIn.theItemInWorldManager.getGameType()));
         worldserver.removePlayerEntityDangerously(playerIn);
         playerIn.isDead = false;
-        this.transferEntityToWorld(playerIn, i, worldserver, worldserver1);
+        this.transferEntityToWorld(playerIn, i, worldserver, worldserver1, teleporter);
         this.preparePlayer(playerIn, worldserver);
         playerIn.playerNetServerHandler.setPlayerLocation(playerIn.posX, playerIn.posY, playerIn.posZ, playerIn.rotationYaw, playerIn.rotationPitch);
         playerIn.theItemInWorldManager.setWorld(worldserver1);
++++ END PATCH
++++ REJECTED PATCH 13
         {
             playerIn.playerNetServerHandler.sendPacket(new S1DPacketEntityEffect(playerIn.getEntityId(), potioneffect));
         }
+        net.minecraftforge.fml.common.FMLCommonHandler.instance().firePlayerChangedDimensionEvent(playerIn, i, dimension);
     }
 
     public void transferEntityToWorld(Entity entityIn, int p_82448_2_, WorldServer p_82448_3_, WorldServer p_82448_4_)
     {
-        double d0 = entityIn.posX;
-        double d1 = entityIn.posZ;
+        transferEntityToWorld(entityIn, p_82448_2_, p_82448_3_, p_82448_4_, p_82448_4_.getDefaultTeleporter());
+    }
+
+    @SuppressWarnings("unused")
+    public void transferEntityToWorld(Entity entityIn, int p_82448_2_, WorldServer p_82448_3_, WorldServer p_82448_4_, net.minecraft.world.Teleporter teleporter)
+    {
+        net.minecraft.world.WorldProvider pOld = p_82448_3_.provider;
+        net.minecraft.world.WorldProvider pNew = p_82448_4_.provider;
+        double moveFactor = pOld.getMovementFactor() / pNew.getMovementFactor();
+        double d0 = entityIn.posX * moveFactor;
+        double d1 = entityIn.posZ * moveFactor;
         double d2 = 8.0D;
         float f = entityIn.rotationYaw;
         p_82448_3_.theProfiler.startSection("moving");
 
-        if (entityIn.dimension == -1)
+        if (false && entityIn.dimension == -1) //Forge Kill it but dont comment out so we can rename it.
         {
             d0 = MathHelper.clamp_double(d0 / d2, p_82448_4_.getWorldBorder().minX() + 16.0D, p_82448_4_.getWorldBorder().maxX() - 16.0D);
             d1 = MathHelper.clamp_double(d1 / d2, p_82448_4_.getWorldBorder().minZ() + 16.0D, p_82448_4_.getWorldBorder().maxZ() - 16.0D);
++++ END PATCH
++++ REJECTED PATCH 14
                 p_82448_3_.updateEntityWithOptionalForce(entityIn, false);
             }
         }
-        else if (entityIn.dimension == 0)
+        else if (false && entityIn.dimension == 0) //Forge Kill it but dont comment out so we can rename it.
         {
             d0 = MathHelper.clamp_double(d0 * d2, p_82448_4_.getWorldBorder().minX() + 16.0D, p_82448_4_.getWorldBorder().maxX() - 16.0D);
             d1 = MathHelper.clamp_double(d1 * d2, p_82448_4_.getWorldBorder().minZ() + 16.0D, p_82448_4_.getWorldBorder().maxZ() - 16.0D);
++++ END PATCH
++++ REJECTED PATCH 15
                 p_82448_3_.updateEntityWithOptionalForce(entityIn, false);
             }
         }
-        else
+
+        if (entityIn.dimension == 1)
         {
             BlockPos blockpos;
 
++++ END PATCH
++++ REJECTED PATCH 16
             if (entityIn.isEntityAlive())
             {
                 entityIn.setLocationAndAngles(d0, entityIn.posY, d1, entityIn.rotationYaw, entityIn.rotationPitch);
-                p_82448_4_.getDefaultTeleporter().placeInPortal(entityIn, f);
+                teleporter.placeInPortal(entityIn, f);
                 p_82448_4_.spawnEntityInWorld(entityIn);
                 p_82448_4_.updateEntityWithOptionalForce(entityIn, false);
             }
++++ END PATCH
