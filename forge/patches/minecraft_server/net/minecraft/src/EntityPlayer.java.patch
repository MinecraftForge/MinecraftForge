--- ../src_base/minecraft_server/net/minecraft/src/EntityPlayer.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft_server/net/minecraft/src/EntityPlayer.java	0000-00-00 00:00:00.000000000 -0000
@@ -3,6 +3,14 @@
 import java.util.Iterator;
 import java.util.List;
 
+import net.minecraft.src.forge.ArmorProperties;
+import net.minecraft.src.forge.ForgeHooks;
+import net.minecraft.src.forge.IGuiHandler;
+import net.minecraft.src.forge.ISpecialArmor;
+import net.minecraft.src.forge.MinecraftForge;
+import net.minecraft.src.forge.NetworkMod;
+import net.minecraft.src.forge.packets.PacketOpenGUI;
+
 public abstract class EntityPlayer extends EntityLiving
 {
     /** Inventory of the player */
@@ -177,6 +185,7 @@
             }
             else
             {
+                itemInUse.getItem().onUsingItemTick(itemInUse, this, itemInUseCount);
                 if (this.itemInUseCount <= 25 && this.itemInUseCount % 4 == 0)
                 {
                     this.updateItemUse(var1, 5);
@@ -366,6 +375,10 @@
      */
     protected void closeScreen()
     {
+        if (craftingInventory != null) //TODO: This is a bugfix for chests staying open in SMP
+        {
+            craftingInventory.onCraftGuiClosed(this);
+        }
         this.craftingInventory = this.inventorySlots;
     }
 
@@ -549,7 +562,16 @@
      */
     public EntityItem dropOneItem()
     {
-        return this.dropPlayerItemWithRandomChoice(this.inventory.decrStackSize(this.inventory.currentItem, 1), false);
+        ItemStack stack = inventory.getCurrentItem();
+        if (stack == null)
+        {
+            return null;
+        }
+        if (stack.getItem().onDroppedByPlayer(stack, this))
+        {
+            return dropPlayerItemWithRandomChoice(inventory.decrStackSize(inventory.currentItem, 1), false);
+        }
+        return null;
     }
 
     /**
@@ -615,10 +637,18 @@
 
     /**
      * Returns how strong the player is against the specified block at this moment
+     * Deprecated in favor of the metadata-sensitive version
      */
+    @Deprecated
     public float getCurrentPlayerStrVsBlock(Block par1Block)
     {
-        float var2 = this.inventory.getStrVsBlock(par1Block);
+        return getCurrentPlayerStrVsBlock(par1Block, 0);
+    }
+    
+    public float getCurrentPlayerStrVsBlock(Block par1Block, int meta)
+    {
+        ItemStack stack = inventory.getCurrentItem();
+        float var2 = (stack == null ? 1.0F : stack.getItem().getStrVsBlock(stack, par1Block, meta));        
         float var3 = var2;
         int var4 = EnchantmentHelper.getEfficiencyModifier(this.inventory);
 
@@ -914,7 +944,11 @@
             par2 = 1 + par2 >> 1;
         }
 
-        par2 = this.applyArmorCalculations(par1DamageSource, par2);
+        par2 = ArmorProperties.ApplyArmor(this, inventory.armorInventory, par1DamageSource, par2);
+        if (par2 <= 0)
+        {
+            return;
+        }
         par2 = this.applyPotionDamageCalculations(par1DamageSource, par2);
         this.addExhaustion(par1DamageSource.getHungerDamage());
         this.health -= par2;
@@ -945,6 +979,10 @@
      */
     public void useCurrentItemOnEntity(Entity par1Entity)
     {
+        if (!ForgeHooks.onEntityInteract(this, par1Entity, false))
+        {
+            return;
+        }
         if (!par1Entity.interact(this))
         {
             ItemStack var2 = this.getCurrentEquippedItem();
@@ -975,7 +1013,9 @@
      */
     public void destroyCurrentEquippedItem()
     {
+        ItemStack orig = inventory.getCurrentItem();
         this.inventory.setInventorySlotContents(this.inventory.currentItem, (ItemStack)null);
+        ForgeHooks.onDestroyCurrentItem(this, orig);
     }
 
     /**
@@ -1004,6 +1044,16 @@
      */
     public void attackTargetEntityWithCurrentItem(Entity par1Entity)
     {
+        if (!ForgeHooks.onEntityInteract(this, par1Entity, true))
+        {
+            return;
+        }
+        ItemStack stack = getCurrentEquippedItem();
+        if (stack != null && stack.getItem().onLeftClickEntity(stack, this, par1Entity))
+        {
+            return;
+        }
+        
         if (par1Entity.canAttackWithItem())
         {
             int var2 = this.inventory.getDamageVsEntity(par1Entity);
@@ -1142,6 +1192,12 @@
      */
     public EnumStatus sleepInBedAt(int par1, int par2, int par3)
     {
+        EnumStatus customSleep = ForgeHooks.sleepInBedAt(this, par1, par2, par3);
+        if (customSleep != null)
+        {
+            return customSleep;
+        }
+        
         if (!this.worldObj.isRemote)
         {
             if (this.isPlayerSleeping() || !this.isEntityAlive())
@@ -1725,4 +1781,45 @@
     }
 
     public void func_50022_L() {}
+    
+    /**
+     * Opens a Gui for the player. 
+     * 
+     * @param mod The mod associated with the gui
+     * @param ID The ID number for the Gui
+     * @param world The World
+     * @param X X Position
+     * @param Y Y Position
+     * @param Z Z Position
+     */
+    public void openGui(BaseMod mod, int ID, World world, int x, int y, int z)
+    {
+        if (!(this instanceof EntityPlayerMP))
+        {
+            return;
+        }
+        
+        EntityPlayerMP player = (EntityPlayerMP)this;
+
+        if (!(mod instanceof NetworkMod))
+        {
+            return;
+        }
+        
+        IGuiHandler handler = MinecraftForge.getGuiHandler(mod);
+        if (handler != null)
+        {
+            Container container = (Container)handler.getGuiElement(ID, player, world, x, y, z);
+            if (container != null)
+            {
+                player.realGetNextWidowId();
+                player.closeCraftingGui();
+                PacketOpenGUI pkt = new PacketOpenGUI(player.getCurrentWindowIdField(), MinecraftForge.getModID((NetworkMod)mod), ID, x, y, z);
+                player.playerNetServerHandler.sendPacket(pkt.getPacket());
+                craftingInventory = container; 
+                craftingInventory.windowId = player.getCurrentWindowIdField();
+                craftingInventory.onCraftGuiOpened(player);
+            }
+        }
+    }
 }
