--- ../src_base/minecraft_server/net/minecraft/src/EntityPlayer.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft_server/net/minecraft/src/EntityPlayer.java	0000-00-00 00:00:00.000000000 -0000
@@ -7,6 +7,14 @@
 import cpw.mods.fml.common.FMLCommonHandler;
 import cpw.mods.fml.common.TickType;
 
+import net.minecraft.src.forge.ArmorProperties;
+import net.minecraft.src.forge.ForgeHooks;
+import net.minecraft.src.forge.IGuiHandler;
+import net.minecraft.src.forge.ISpecialArmor;
+import net.minecraft.src.forge.MinecraftForge;
+import net.minecraft.src.forge.NetworkMod;
+import net.minecraft.src.forge.packets.PacketOpenGUI;
+
 public abstract class EntityPlayer extends EntityLiving
 {
     /** Inventory of the player */
@@ -182,6 +190,7 @@
             }
             else
             {
+                itemInUse.getItem().onUsingItemTick(itemInUse, this, itemInUseCount);
                 if (this.itemInUseCount <= 25 && this.itemInUseCount % 4 == 0)
                 {
                     this.updateItemUse(var1, 5);
@@ -372,6 +381,10 @@
      */
     protected void closeScreen()
     {
+        if (craftingInventory != null) //TODO: This is a bugfix for chests staying open in SMP
+        {
+            craftingInventory.onCraftGuiClosed(this);
+        }
         this.craftingInventory = this.inventorySlots;
     }
 
@@ -555,7 +568,16 @@
      */
     public EntityItem dropOneItem()
     {
-        return this.dropPlayerItemWithRandomChoice(this.inventory.decrStackSize(this.inventory.currentItem, 1), false);
+        ItemStack stack = inventory.getCurrentItem();
+        if (stack == null)
+        {
+            return null;
+        }
+        if (stack.getItem().onDroppedByPlayer(stack, this))
+        {
+            return dropPlayerItemWithRandomChoice(inventory.decrStackSize(inventory.currentItem, 1), false);
+        }
+        return null;
     }
 
     /**
@@ -621,10 +643,18 @@
 
     /**
      * Returns how strong the player is against the specified block at this moment
+     * Deprecated in favor of the metadata-sensitive version
      */
+    @Deprecated
     public float getCurrentPlayerStrVsBlock(Block par1Block)
     {
-        float var2 = this.inventory.getStrVsBlock(par1Block);
+        return getCurrentPlayerStrVsBlock(par1Block, 0);
+    }
+    
+    public float getCurrentPlayerStrVsBlock(Block par1Block, int meta)
+    {
+        ItemStack stack = inventory.getCurrentItem();
+        float var2 = (stack == null ? 1.0F : stack.getItem().getStrVsBlock(stack, par1Block, meta));        
         float var3 = var2;
         int var4 = EnchantmentHelper.getEfficiencyModifier(this.inventory);
 
@@ -915,12 +945,22 @@
      */
     protected void damageEntity(DamageSource par1DamageSource, int par2)
     {
+        par2 = ForgeHooks.onEntityLivingHurt(this, par1DamageSource, par2);
+        if (par2 == 0)
+        {
+            return;
+        }
+
         if (!par1DamageSource.isUnblockable() && this.isBlocking())
         {
             par2 = 1 + par2 >> 1;
         }
 
-        par2 = this.applyArmorCalculations(par1DamageSource, par2);
+        par2 = ArmorProperties.ApplyArmor(this, inventory.armorInventory, par1DamageSource, par2);
+        if (par2 <= 0)
+        {
+            return;
+        }
         par2 = this.applyPotionDamageCalculations(par1DamageSource, par2);
         this.addExhaustion(par1DamageSource.getHungerDamage());
         this.health -= par2;
@@ -951,6 +991,10 @@
      */
     public void useCurrentItemOnEntity(Entity par1Entity)
     {
+        if (!ForgeHooks.onEntityInteract(this, par1Entity, false))
+        {
+            return;
+        }
         if (!par1Entity.interact(this))
         {
             ItemStack var2 = this.getCurrentEquippedItem();
@@ -981,7 +1025,9 @@
      */
     public void destroyCurrentEquippedItem()
     {
+        ItemStack orig = inventory.getCurrentItem();
         this.inventory.setInventorySlotContents(this.inventory.currentItem, (ItemStack)null);
+        ForgeHooks.onDestroyCurrentItem(this, orig);
     }
 
     /**
@@ -1010,6 +1056,16 @@
      */
     public void attackTargetEntityWithCurrentItem(Entity par1Entity)
     {
+        if (!ForgeHooks.onEntityInteract(this, par1Entity, true))
+        {
+            return;
+        }
+        ItemStack stack = getCurrentEquippedItem();
+        if (stack != null && stack.getItem().onLeftClickEntity(stack, this, par1Entity))
+        {
+            return;
+        }
+        
         if (par1Entity.canAttackWithItem())
         {
             int var2 = this.inventory.getDamageVsEntity(par1Entity);
@@ -1148,6 +1204,12 @@
      */
     public EnumStatus sleepInBedAt(int par1, int par2, int par3)
     {
+        EnumStatus customSleep = ForgeHooks.sleepInBedAt(this, par1, par2, par3);
+        if (customSleep != null)
+        {
+            return customSleep;
+        }
+        
         if (!this.worldObj.isRemote)
         {
             if (this.isPlayerSleeping() || !this.isEntityAlive())
@@ -1187,6 +1249,11 @@
         {
             int var9 = this.worldObj.getBlockMetadata(par1, par2, par3);
             int var5 = BlockBed.getDirection(var9);
+            Block block = Block.blocksList[worldObj.getBlockId(par1, par2, par3)];
+            if (block != null)
+            {
+                var5 = block.getBedDirection(worldObj, par1, par2, par3);
+            }
             float var10 = 0.5F;
             float var7 = 0.5F;
 
@@ -1256,11 +1323,12 @@
         this.resetHeight();
         ChunkCoordinates var4 = this.playerLocation;
         ChunkCoordinates var5 = this.playerLocation;
+        Block block = (var4 == null ? null : Block.blocksList[worldObj.getBlockId(var4.posX, var4.posY, var4.posZ)]);
 
-        if (var4 != null && this.worldObj.getBlockId(var4.posX, var4.posY, var4.posZ) == Block.bed.blockID)
+        if (var4 != null && block != null && block.isBed(worldObj, var4.posX, var4.posY, var4.posZ, this))
         {
-            BlockBed.setBedOccupied(this.worldObj, var4.posX, var4.posY, var4.posZ, false);
-            var5 = BlockBed.getNearestEmptyChunkCoordinates(this.worldObj, var4.posX, var4.posY, var4.posZ, 0);
+            block.setBedOccupied(this.worldObj, var4.posX, var4.posY, var4.posZ, this, false);
+            var5 = block.getBedSpawnPosition(worldObj, var4.posX, var4.posY, var4.posZ, this);
 
             if (var5 == null)
             {
@@ -1297,7 +1365,9 @@
      */
     private boolean isInBed()
     {
-        return this.worldObj.getBlockId(this.playerLocation.posX, this.playerLocation.posY, this.playerLocation.posZ) == Block.bed.blockID;
+        ChunkCoordinates c = playerLocation;
+        int blockID = worldObj.getBlockId(c.posX, c.posY, c.posZ);
+        return Block.blocksList[blockID] != null && Block.blocksList[blockID].isBed(worldObj, c.posX, c.posY, c.posZ, this);
     }
 
     /**
@@ -1312,13 +1382,15 @@
         var2.loadChunk(par1ChunkCoordinates.posX - 3 >> 4, par1ChunkCoordinates.posZ + 3 >> 4);
         var2.loadChunk(par1ChunkCoordinates.posX + 3 >> 4, par1ChunkCoordinates.posZ + 3 >> 4);
 
-        if (par0World.getBlockId(par1ChunkCoordinates.posX, par1ChunkCoordinates.posY, par1ChunkCoordinates.posZ) != Block.bed.blockID)
+        ChunkCoordinates c = par1ChunkCoordinates;
+        Block block = Block.blocksList[par0World.getBlockId(c.posX, c.posY, c.posZ)];
+        if (block == null || !block.isBed(par0World, c.posX, c.posY, c.posZ, null))
         {
             return null;
         }
         else
         {
-            ChunkCoordinates var3 = BlockBed.getNearestEmptyChunkCoordinates(par0World, par1ChunkCoordinates.posX, par1ChunkCoordinates.posY, par1ChunkCoordinates.posZ, 0);
+            ChunkCoordinates var3 = block.getBedSpawnPosition(par0World, c.posX, c.posY, c.posZ, null);
             return var3;
         }
     }
@@ -1725,4 +1797,45 @@
     }
 
     public void func_50022_L() {}
+    
+    /**
+     * Opens a Gui for the player. 
+     * 
+     * @param mod The mod associated with the gui
+     * @param ID The ID number for the Gui
+     * @param world The World
+     * @param X X Position
+     * @param Y Y Position
+     * @param Z Z Position
+     */
+    public void openGui(BaseMod mod, int ID, World world, int x, int y, int z)
+    {
+        if (!(this instanceof EntityPlayerMP))
+        {
+            return;
+        }
+        
+        EntityPlayerMP player = (EntityPlayerMP)this;
+
+        if (!(mod instanceof NetworkMod))
+        {
+            return;
+        }
+        
+        IGuiHandler handler = MinecraftForge.getGuiHandler(mod);
+        if (handler != null)
+        {
+            Container container = (Container)handler.getGuiElement(ID, player, world, x, y, z);
+            if (container != null)
+            {
+                player.realGetNextWidowId();
+                player.closeCraftingGui();
+                PacketOpenGUI pkt = new PacketOpenGUI(player.getCurrentWindowIdField(), MinecraftForge.getModID((NetworkMod)mod), ID, x, y, z);
+                player.playerNetServerHandler.sendPacket(pkt.getPacket());
+                craftingInventory = container; 
+                craftingInventory.windowId = player.getCurrentWindowIdField();
+                craftingInventory.onCraftGuiOpened(player);
+            }
+        }
+    }
 }
