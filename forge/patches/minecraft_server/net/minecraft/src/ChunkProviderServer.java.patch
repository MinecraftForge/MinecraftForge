--- ../src_base/minecraft_server/net/minecraft/src/ChunkProviderServer.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft_server/net/minecraft/src/ChunkProviderServer.java	0000-00-00 00:00:00.000000000 -0000
@@ -9,6 +9,9 @@
 
 import cpw.mods.fml.server.FMLServerHandler;
 
+import net.minecraft.src.forge.DimensionManager;
+import net.minecraft.src.forge.ForgeHooks;
+
 public class ChunkProviderServer implements IChunkProvider
 {
     private Set droppedChunksSet = new HashSet();
@@ -30,7 +33,7 @@
 
     /** map of chunk Id's to Chunk instances */
     private LongHashMap id2ChunkMap = new LongHashMap();
-    private List field_727_f = new ArrayList();
+    public List field_727_f = new ArrayList();
     private WorldServer world;
 
     public ChunkProviderServer(WorldServer par1WorldServer, IChunkLoader par2IChunkLoader, IChunkProvider par3IChunkProvider)
@@ -51,7 +54,12 @@
 
     public void dropChunk(int par1, int par2)
     {
-        if (this.world.worldProvider.canRespawnHere())
+        if(!ForgeHooks.canUnloadChunk(world.getChunkFromChunkCoords(par1, par2)))
+        {
+            return;
+        }
+        
+        if (this.world.worldProvider.canRespawnHere() && DimensionManager.shouldLoadSpawn(world.worldProvider.worldType))
         {
             ChunkCoordinates var3 = this.world.getSpawnPoint();
             int var4 = par1 * 16 + 8 - var3.posX;
@@ -271,13 +279,20 @@
                     this.droppedChunksSet.remove(var2);
                     this.id2ChunkMap.remove(var2.longValue());
                     this.field_727_f.remove(var3);
+                    
+                    if(field_727_f.size() == 0 && 
+                    		!DimensionManager.shouldLoadSpawn(world.worldProvider.worldType))
+                    {
+                    	DimensionManager.deRegisterDimension(world.worldProvider.worldType);
+                    	return serverChunkGenerator.unload100OldestChunks();
+                    }
                 }
-            }
-
+            }  
+            
             if (this.chunkLoader != null)
             {
                 this.chunkLoader.chunkTick();
-            }
+            }            
         }
 
         return this.serverChunkGenerator.unload100OldestChunks();
