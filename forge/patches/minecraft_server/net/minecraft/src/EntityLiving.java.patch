--- ../src_base/minecraft_server/net/minecraft/src/EntityLiving.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft_server/net/minecraft/src/EntityLiving.java	0000-00-00 00:00:00.000000000 -0000
@@ -6,6 +6,8 @@
 import java.util.List;
 import java.util.Random;
 
+import net.minecraft.src.forge.ForgeHooks;
+
 public abstract class EntityLiving extends Entity
 {
     public int heartsHalvesLife = 20;
@@ -59,7 +61,7 @@
      * in each step in the damage calculations, this is set to the 'carryover' that would result if someone was damaged
      * .25 hearts (for example), and added to the damage in the next step
      */
-    protected int carryoverDamage;
+    public int carryoverDamage;
 
     /** Number of ticks since this EntityLiving last produced its sound */
     private int livingSoundTime;
@@ -300,6 +302,7 @@
     public void setAttackTarget(EntityLiving par1EntityLiving)
     {
         this.attackTarget = par1EntityLiving;
+        ForgeHooks.onEntityLivingSetAttackTarget(this, par1EntityLiving);
     }
 
     public boolean func_48336_a(Class par1Class)
@@ -356,6 +359,7 @@
     {
         this.entityLivingToAttack = par1EntityLiving;
         this.revengeTimer = this.entityLivingToAttack != null ? 60 : 0;
+        ForgeHooks.onEntityLivingSetAttackTarget(this, par1EntityLiving);
     }
 
     protected void entityInit()
@@ -616,6 +620,11 @@
      */
     public void onUpdate()
     {
+        if (!ForgeHooks.onEntityLivingUpdate(this))
+        {
+            return;
+        }
+        
         super.onUpdate();
 
         if (this.arrowHitTempCounter > 0)
@@ -808,6 +817,11 @@
      */
     public boolean attackEntityFrom(DamageSource par1DamageSource, int par2)
     {
+        if (!ForgeHooks.onEntityLivingAttacked(this, par1DamageSource, par2))
+        {
+            return false;
+        }
+        
         if (this.worldObj.isRemote)
         {
             return false;
@@ -1040,6 +1054,11 @@
      */
     public void onDeath(DamageSource par1DamageSource)
     {
+        if (!ForgeHooks.onEntityLivingDeath(this, par1DamageSource))
+        {
+            return;
+        }
+        
         Entity var2 = par1DamageSource.getEntity();
 
         if (this.scoreValue >= 0 && var2 != null)
@@ -1120,6 +1139,11 @@
      */
     protected void fall(float par1)
     {
+        if (!ForgeHooks.onEntityLivingFall(this, par1))
+        {
+            return;
+        }
+        
         super.fall(par1);
         int var2 = (int)Math.ceil((double)(par1 - 3.0F));
 
@@ -1307,7 +1331,7 @@
         int var2 = MathHelper.floor_double(this.boundingBox.minY);
         int var3 = MathHelper.floor_double(this.posZ);
         int var4 = this.worldObj.getBlockId(var1, var2, var3);
-        return var4 == Block.ladder.blockID || var4 == Block.vine.blockID;
+        return (Block.blocksList[var4] != null && Block.blocksList[var4].isLadder(worldObj, var1, var2, var3));
     }
 
     /**
@@ -1578,6 +1602,8 @@
         }
 
         this.isAirBorne = true;
+        
+        ForgeHooks.onEntityLivingJump(this);
     }
 
     /**
