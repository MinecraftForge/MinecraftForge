--- ../src_base/minecraft_server/net/minecraft/src/ModLoader.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft_server/net/minecraft/src/ModLoader.java	0000-00-00 00:00:00.000000000 -0000
@@ -30,29 +30,44 @@
 import java.util.logging.SimpleFormatter;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;
+import javax.imageio.ImageIO;
+
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.src.forge.DimensionManager;
+import net.minecraft.src.forge.ForgeHooks;
+import net.minecraft.src.forge.NetworkMod;
 
 public final class ModLoader
 {
+    private static final List animList = new LinkedList();
+    private static final Map blockModels = new HashMap();
+    private static final Map blockSpecialInv = new HashMap();
     private static File cfgdir;
     private static File cfgfile;
     public static Level cfgLoggingLevel = Level.FINER;
+    private static Map classMap = null;
     private static long clock = 0L;
     public static final boolean DEBUG = false;
+    private static Field field_animList = null;
+    private static Field field_armorList = null;
     private static Field field_modifiers = null;
-    private static Map classMap = null;
+    private static Field field_TileEntityRenderers = null;
     private static boolean hasInit = false;
     private static int highestEntityId = 3000;
     private static final Map inGameHooks = new HashMap();
+    private static final Map inGUIHooks = new HashMap();
     private static MinecraftServer instance = null;
     private static int itemSpriteIndex = 0;
     private static int itemSpritesLeft = 0;
+    private static final Map keyList = new HashMap();
+    private static String langPack = null;
+    private static Map localizedStrings = new HashMap();
     private static File logfile;
-    private static File modDir;
     private static final Logger logger = Logger.getLogger("ModLoader");
     private static FileHandler logHandler = null;
     private static Method method_RegisterEntityID = null;
     private static Method method_RegisterTileEntity = null;
+    private static File modDir;
     private static final LinkedList modList = new LinkedList();
     private static int nextBlockModelID = 1000;
     private static final Map overrides = new HashMap();
@@ -70,9 +85,10 @@
     {
         try
         {
-            if (var0.toString().contains("."))
+            String name = (String)getPrivateValue(StatBase.class, var0, 1);
+            if (name.contains("."))
             {
-                String[] var3 = var0.toString().split("\\.");
+                String[] var3 = name.split("\\.");
 
                 if (var3.length == 2)
                 {
@@ -377,7 +393,7 @@
     {
         return instance;
     }
-
+    
     public static Object getPrivateValue(Class var0, Object var1, int var2) throws IllegalArgumentException, SecurityException, NoSuchFieldException
     {
         try
@@ -609,6 +625,7 @@
             sortModList();
             Iterator var17 = modList.iterator();
 
+            int x = 0;
             while (var17.hasNext())
             {
                 BaseMod var19 = (BaseMod)var17.next();
@@ -620,6 +637,14 @@
                 {
                     props.setProperty(var19.getClass().getSimpleName(), "on");
                 }
+
+                /*
+                 * Gather up a list of network mods and assign them an id 
+                 */
+                if (var19 instanceof NetworkMod)
+                {
+                    ForgeHooks.networkMods.put(x++, (NetworkMod)var19);
+                }
             }
 
             Iterator var20 = modList.iterator();
@@ -786,9 +811,10 @@
 
         long var1 = 0L;
 
-        if (var0.worldMngr != null && var0.worldMngr[0] != null)
+        World world = DimensionManager.getWorld(0);
+        if (world != null)
         {
-            var1 = var0.worldMngr[0].getWorldTime();
+            var1 = world.getWorldTime();
             Iterator var3 = inGameHooks.entrySet().iterator();
 
             while (var3.hasNext())
@@ -1111,6 +1137,12 @@
         }
     }
 
+    public static void registerEntityID(Class var0, String var1, int var2, int var3, int var4)
+    {
+        registerEntityID(var0, var1, var2);
+        EntityList.entityEggs.put(Integer.valueOf(var2), new EntityEggInfo(var2, var3, var4));
+    }
+
     public static void registerTileEntity(Class var0, String var1)
     {
         try
@@ -1220,6 +1252,18 @@
         }
     }
 
+    public static void setInGUIHook(BaseMod var0, boolean var1, boolean var2)
+    {
+        if (var1)
+        {
+            inGUIHooks.put(var0, Boolean.valueOf(var2));
+        }
+        else
+        {
+            inGUIHooks.remove(var0);
+        }
+    }
+    
     public static void setPrivateValue(Class var0, Object var1, int var2, Object var3) throws IllegalArgumentException, SecurityException, NoSuchFieldException
     {
         try
@@ -1646,4 +1690,9 @@
 
         init();
     }
+    
+    public static boolean renderBlockIsItemFull3D(int var0)
+    {
+        return !blockSpecialInv.containsKey(Integer.valueOf(var0)) ? var0 == 16 : ((Boolean)blockSpecialInv.get(Integer.valueOf(var0))).booleanValue();
+    }
 }
