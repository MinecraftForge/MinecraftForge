--- ../src_base/minecraft_server/net/minecraft/src/NetServerHandler.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft_server/net/minecraft/src/NetServerHandler.java	0000-00-00 00:00:00.000000000 -0000
@@ -2,10 +2,14 @@
 
 import java.util.ArrayList;
 import java.util.Random;
+import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import cpw.mods.fml.server.FMLServerHandler;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.src.forge.ForgeHooks;
+import net.minecraft.src.forge.MessageManager;
+import java.io.UnsupportedEncodingException;
 
 public class NetServerHandler extends NetHandler implements ICommandListener
 {
@@ -19,7 +23,7 @@
     public boolean connectionClosed = false;
 
     /** Reference to the MinecraftServer object. */
-    private MinecraftServer mcServer;
+    public MinecraftServer mcServer;
 
     /** Reference to the EntityPlayerMP object. */
     private EntityPlayerMP playerEntity;
@@ -374,8 +378,11 @@
                 double var10 = this.playerEntity.posY - ((double)var6 + 0.5D) + 1.5D;
                 double var12 = this.playerEntity.posZ - ((double)var7 + 0.5D);
                 double var14 = var8 * var8 + var10 * var10 + var12 * var12;
+                
+                double dist = playerEntity.itemInWorldManager.getBlockReachDistance() + 1;
+                dist *= dist;
 
-                if (var14 > 36.0D)
+                if (var14 > dist)
                 {
                     return;
                 }
@@ -397,7 +404,7 @@
 
             if (par1Packet14BlockDig.status == 0)
             {
-                if (var20 <= 16 && !var3)
+                if (var20 <= mcServer.spawnProtectionSize && !var3)
                 {
                     this.playerEntity.playerNetServerHandler.sendPacket(new Packet53BlockChange(var5, var6, var7, var2));
                 }
@@ -467,8 +474,9 @@
             {
                 var12 = var11;
             }
-
-            if (this.hasMoved && this.playerEntity.getDistanceSq((double)var5 + 0.5D, (double)var6 + 0.5D, (double)var7 + 0.5D) < 64.0D && (var12 > 16 || var9))
+            double dist = playerEntity.itemInWorldManager.getBlockReachDistance() + 1;
+            dist *= dist;
+            if (this.hasMoved && this.playerEntity.getDistanceSq((double)var5 + 0.5D, (double)var6 + 0.5D, (double)var7 + 0.5D) < dist && (var12 > mcServer.spawnProtectionSize || var9))
             {
                 this.playerEntity.itemInWorldManager.activeBlockOrUseItem(this.playerEntity, var2, var3, var5, var6, var7, var8);
             }
@@ -602,9 +610,13 @@
             }
             else
             {
-                var2 = "<" + this.playerEntity.username + "> " + var2;
-                logger.info(var2);
-                this.mcServer.configManager.sendPacketToAllPlayers(new Packet3Chat(var2));
+                var2 = ForgeHooks.onServerChat(playerEntity, var2);
+                if (var2 != null)
+                {
+                    var2 = "<" + this.playerEntity.username + "> " + var2;
+                    logger.info(var2);
+                    this.mcServer.configManager.sendPacketToAllPlayers(new Packet3Chat(var2));
+                }
             }
 
             this.field_45001_m += 20;
@@ -648,6 +660,10 @@
                 }
             }
         }
+        else if (ForgeHooks.onChatCommand(this.playerEntity, this.mcServer.configManager.isOp(playerEntity.username), par1Str.substring(1)))
+        {
+            logger.info("Forge: " + playerEntity.username + " issues command: " + par1Str.substring(1));
+        }
         else
         {
             String var3;
@@ -765,9 +781,10 @@
      */
     public void handleRespawn(Packet9Respawn par1Packet9Respawn)
     {
+        int dim = (this.mcServer.getWorldManager(this.playerEntity.dimension).worldProvider.canRespawnHere() ? this.playerEntity.dimension : 0);        
         if (this.playerEntity.gameOver)
         {
-            this.playerEntity = this.mcServer.configManager.recreatePlayerEntity(this.playerEntity, 0, true);
+            this.playerEntity = this.mcServer.configManager.recreatePlayerEntity(this.playerEntity, dim, true);
         }
         else
         {
@@ -776,7 +793,7 @@
                 return;
             }
 
-            this.playerEntity = this.mcServer.configManager.recreatePlayerEntity(this.playerEntity, 0, false);
+            this.playerEntity = this.mcServer.configManager.recreatePlayerEntity(this.playerEntity, dim, false);
         }
     }
 
@@ -969,9 +986,78 @@
     {
         this.playerEntity.capabilities.isFlying = par1Packet202PlayerAbilities.isFlying && this.playerEntity.capabilities.allowFlying;
     }
+    
+    public EntityPlayerMP getPlayerEntity()
+    {
+        return playerEntity;
+    }
+    
+    @Override
+    public void handleCustomPayload(Packet250CustomPayload pkt)
+    {
+        FMLServerHandler.instance().handlePacket250(pkt, playerEntity);
+        MessageManager inst = MessageManager.getInstance();
+        if (pkt.channel.equals("REGISTER")) 
+        {
+            try 
+            {
+                String channels = new String(pkt.data, "UTF8");
+                for (String channel : channels.split("\0")) 
+                {
+                    inst.addActiveChannel(netManager, channel);
+                }
+            } 
+            catch (UnsupportedEncodingException ex) 
+            {
+                ModLoader.throwException("NetServerHandler.handleCustomPayload", ex);
+            }
+        } 
+        else if (pkt.channel.equals("UNREGISTER")) 
+        {
+            try 
+            {
+                String channels = new String(pkt.data, "UTF8");
+                for (String channel : channels.split("\0")) 
+                {
+                    inst.removeActiveChannel(netManager, channel);
+                }
+            }
+            catch (UnsupportedEncodingException ex) 
+            {
+                ModLoader.throwException("NetServerHandler.handleCustomPayload", ex);
+            }
+        } 
+        else 
+        {
+            inst.dispatchIncomingMessage(netManager, pkt.channel, pkt.data);
+        }
+    }
+    
+    @Override
+    public void handleMapData(Packet131MapData par1Packet131MapData)
+    {
+        ForgeHooks.onItemDataPacket(netManager, par1Packet131MapData);
+    }
 
     @Override
-    public void handleCustomPayload(Packet250CustomPayload par1Packet250CustomPayload) {
-      FMLServerHandler.instance().handlePacket250(par1Packet250CustomPayload, playerEntity);
+    public void handleTileEntityData(Packet132TileEntityData pkt)
+    {
+        World world = this.getPlayerEntity().worldObj;
+        if (world.blockExists(pkt.xPosition, pkt.yPosition, pkt.zPosition))
+        {
+            TileEntity te = world.getBlockTileEntity(pkt.xPosition, pkt.yPosition, pkt.zPosition);
+            if (te != null)
+            {
+                te.onDataPacket(netManager,  pkt);
+            }
+            else 
+            {
+                ModLoader.getLogger().log(Level.WARNING, String.format(
+                        "Received a TileEntityData packet for a location that did not have a TileEntity: (%d, %d, %d) %d: %d, %d, %d", 
+                        pkt.xPosition, pkt.yPosition, pkt.zPosition,
+                        pkt.actionType, 
+                        pkt.customParam1, pkt.customParam2, pkt.customParam3));
+            }
+        }
     }
 }
