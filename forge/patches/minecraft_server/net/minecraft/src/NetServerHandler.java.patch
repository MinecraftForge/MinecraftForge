--- ../src_base/minecraft_server/net/minecraft/src/NetServerHandler.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft_server/net/minecraft/src/NetServerHandler.java	0000-00-00 00:00:00.000000000 -0000
@@ -4,6 +4,9 @@
 import java.util.Random;
 import java.util.logging.Logger;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.src.forge.ForgeHooks;
+import net.minecraft.src.forge.MessageManager;
+import java.io.UnsupportedEncodingException;
 
 public class NetServerHandler extends NetHandler implements ICommandListener
 {
@@ -372,8 +375,11 @@
                 double var10 = this.playerEntity.posY - ((double)var6 + 0.5D) + 1.5D;
                 double var12 = this.playerEntity.posZ - ((double)var7 + 0.5D);
                 double var14 = var8 * var8 + var10 * var10 + var12 * var12;
+                
+                double dist = playerEntity.itemInWorldManager.getBlockReachDistance() + 1;
+                dist *= dist;
 
-                if (var14 > 36.0D)
+                if (var14 > dist)
                 {
                     return;
                 }
@@ -465,8 +471,9 @@
             {
                 var12 = var11;
             }
-
-            if (this.hasMoved && this.playerEntity.getDistanceSq((double)var5 + 0.5D, (double)var6 + 0.5D, (double)var7 + 0.5D) < 64.0D && (var12 > 16 || var9))
+            double dist = playerEntity.itemInWorldManager.getBlockReachDistance() + 1;
+            dist *= dist;
+            if (this.hasMoved && this.playerEntity.getDistanceSq((double)var5 + 0.5D, (double)var6 + 0.5D, (double)var7 + 0.5D) < dist && (var12 > 16 || var9))
             {
                 this.playerEntity.itemInWorldManager.activeBlockOrUseItem(this.playerEntity, var2, var3, var5, var6, var7, var8);
             }
@@ -597,9 +604,13 @@
             }
             else
             {
-                var2 = "<" + this.playerEntity.username + "> " + var2;
-                logger.info(var2);
-                this.mcServer.configManager.sendPacketToAllPlayers(new Packet3Chat(var2));
+                var2 = ForgeHooks.onServerChat(playerEntity, var2);
+                if (var2 != null)
+                {
+                    var2 = "<" + this.playerEntity.username + "> " + var2;
+                    logger.info(var2);
+                    this.mcServer.configManager.sendPacketToAllPlayers(new Packet3Chat(var2));
+                }
             }
 
             this.field_45001_m += 20;
@@ -647,6 +658,10 @@
         {
             logger.info("ModLoaderMP : " + this.playerEntity.username + " issued command: " + par1Str.substring(1));
         }
+        else if (ForgeHooks.onChatCommand(this.playerEntity, this.mcServer.configManager.isOp(playerEntity.username), par1Str.substring(1)))
+        {
+            logger.info("Forge: " + playerEntity.username + " issues command: " + par1Str.substring(1));
+        }
         else
         {
             String var3;
@@ -764,9 +779,10 @@
      */
     public void handleRespawn(Packet9Respawn par1Packet9Respawn)
     {
+        int dim = (this.mcServer.getWorldManager(this.playerEntity.dimension).worldProvider.canRespawnHere() ? this.playerEntity.dimension : 0);        
         if (this.playerEntity.gameOver)
         {
-            this.playerEntity = this.mcServer.configManager.recreatePlayerEntity(this.playerEntity, 0, true);
+            this.playerEntity = this.mcServer.configManager.recreatePlayerEntity(this.playerEntity, dim, true);
         }
         else
         {
@@ -775,7 +791,7 @@
                 return;
             }
 
-            this.playerEntity = this.mcServer.configManager.recreatePlayerEntity(this.playerEntity, 0, false);
+            this.playerEntity = this.mcServer.configManager.recreatePlayerEntity(this.playerEntity, dim, false);
         }
     }
 
@@ -965,4 +981,49 @@
     {
         this.playerEntity.capabilities.isFlying = par1Packet202PlayerAbilities.field_50005_b && this.playerEntity.capabilities.allowFlying;
     }
+    
+    public EntityPlayerMP getPlayerEntity()
+    {
+        return playerEntity;
+    }
+    
+    @Override
+    public void handleCustomPayload(Packet250CustomPayload pkt)
+    {
+        MessageManager inst = MessageManager.getInstance();
+        if (pkt.channel.equals("REGISTER")) 
+        {
+            try 
+            {
+                String channels = new String(pkt.data, "UTF8");
+                for (String channel : channels.split("\0")) 
+                {
+                    inst.addActiveChannel(netManager, channel);
+                }
+            } 
+            catch (UnsupportedEncodingException ex) 
+            {
+                ModLoader.throwException("NetServerHandler.handleCustomPayload", ex);
+            }
+        } 
+        else if (pkt.channel.equals("UNREGISTER")) 
+        {
+            try 
+            {
+                String channels = new String(pkt.data, "UTF8");
+                for (String channel : channels.split("\0")) 
+                {
+                    inst.removeActiveChannel(netManager, channel);
+                }
+            }
+            catch (UnsupportedEncodingException ex) 
+            {
+                ModLoader.throwException("NetServerHandler.handleCustomPayload", ex);
+            }
+        } 
+        else 
+        {
+            inst.dispatchIncomingMessage(netManager, pkt.channel, pkt.data);
+        }
+    }
 }
