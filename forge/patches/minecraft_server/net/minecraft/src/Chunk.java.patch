--- ../src_base/minecraft_server/net/minecraft/src/Chunk.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft_server/net/minecraft/src/Chunk.java	0000-00-00 00:00:00.000000000 -0000
@@ -8,6 +8,8 @@
 import java.util.Map;
 import java.util.Random;
 
+import net.minecraft.src.forge.ForgeHooks;
+
 public class Chunk
 {
     /**
@@ -78,6 +80,11 @@
      */
     private int queuedLightChecks;
     boolean field_35638_u;
+    
+    /**
+     * FORGE: Custom chunk data 
+     */
+    public NBTTagCompound customChunkData;
 
     public Chunk(World par1World, int par2, int par3)
     {
@@ -120,7 +127,9 @@
             {
                 for (int var8 = 0; var8 < var5; ++var8)
                 {
-                    byte var9 = par2ArrayOfByte[var6 << 11 | var7 << 7 | var8];
+                    /* FORGE: The following change, a cast from unsigned byte to int,
+                     * fixes a vanilla bug when generating new chunks that contain a block ID > 127 */
+                    int var9 = par2ArrayOfByte[var6 << 11 | var7 << 7 | var8] & 0xFF;
 
                     if (var9 != 0)
                     {
@@ -139,6 +148,48 @@
     }
 
     /**
+     * Metadata sensitive Chunk constructor for use in new ChunkProviders that 
+     * use metadata sensitive blocks during generation.
+     * 
+     * @param world The world this chunk belongs to
+     * @param ids A ByteArray containing all the BlockID's to set this chunk to 
+     * @param metadata A ByteArray containing all the metadata to set this chunk to
+     * @param chunkX The chunk's X position
+     * @param chunkZ The Chunk's Z position
+     */
+    public Chunk(World world, byte[] ids, byte[] metadata, int chunkX, int chunkZ)
+    {
+        this(world, chunkX, chunkZ);
+        int height = ids.length / 256;
+
+        for (int x = 0; x < 16; ++x)
+        {
+            for (int z = 0; z < 16; ++z)
+            {
+                for (int y = 0; y < height; ++y)
+                {
+                    int index = x << 11 | z << 7 | y;
+                    int id    = ids[index] & 0xFF;
+                    int meta  = metadata[index] & 0x0F;
+
+                    if (id != 0)
+                    {
+                        int chunkY = y >> 4;
+
+                        if (storageArrays[chunkY] == null)
+                        {
+                            storageArrays[chunkY] = new ExtendedBlockStorage(chunkY << 4);
+                        }
+
+                        storageArrays[chunkY].setExtBlockID(x, y & 15, z, id);
+                        storageArrays[chunkY].setExtBlockMetadata(x, y & 15, z, meta);
+                    }
+                }
+            }
+        }
+    }
+
+    /**
      * Checks whether the chunk is at the X/Z location specified
      */
     public boolean isAtLocation(int par1, int par2)
@@ -465,7 +516,7 @@
      */
     public int getBlockID(int par1, int par2, int par3)
     {
-        if (par2 >> 4 >= this.storageArrays.length)
+        if (par2 >> 4 >= this.storageArrays.length || par2 >> 4 < 0)
         {
             return 0;
         }
@@ -481,7 +532,7 @@
      */
     public int getBlockMetadata(int par1, int par2, int par3)
     {
-        if (par2 >> 4 >= this.storageArrays.length)
+        if (par2 >> 4 >= this.storageArrays.length || par2 >> 4 < 0)
         {
             return 0;
         }
@@ -521,6 +572,11 @@
         }
         else
         {
+            if (par2 >> 4 >= storageArrays.length || par2 >> 4 < 0)
+            {
+                return false;
+            }
+            
             ExtendedBlockStorage var9 = this.storageArrays[par2 >> 4];
             boolean var10 = false;
 
@@ -545,7 +601,7 @@
                 {
                     Block.blocksList[var8].onBlockRemoval(this.worldObj, var11, par2, var12);
                 }
-                else if (Block.blocksList[var8] instanceof BlockContainer && var8 != par4)
+                if (Block.blocksList[var8] != null && Block.blocksList[var8].hasTileEntity(getBlockMetadata(par1, par2, par3)))
                 {
                     this.worldObj.removeBlockTileEntity(var11, par2, var12);
                 }
@@ -589,32 +645,23 @@
                         Block.blocksList[par4].onBlockAdded(this.worldObj, var11, par2, var12);
                     }
 
-                    if (Block.blocksList[par4] instanceof BlockContainer)
+                    if (Block.blocksList[par4] != null && Block.blocksList[par4].hasTileEntity(par5))
                     {
                         var13 = this.getChunkBlockTileEntity(par1, par2, par3);
 
                         if (var13 == null)
                         {
-                            var13 = ((BlockContainer)Block.blocksList[par4]).getBlockEntity();
+                            var13 = Block.blocksList[par4].getTileEntity(par5);
                             this.worldObj.setBlockTileEntity(var11, par2, var12, var13);
                         }
 
                         if (var13 != null)
                         {
                             var13.updateContainingBlockInfo();
+                            var13.blockMetadata = par5;
                         }
                     }
                 }
-                else if (var8 > 0 && Block.blocksList[var8] instanceof BlockContainer)
-                {
-                    var13 = this.getChunkBlockTileEntity(par1, par2, par3);
-
-                    if (var13 != null)
-                    {
-                        var13.updateContainingBlockInfo();
-                    }
-                }
-
                 this.isModified = true;
                 return true;
             }
@@ -626,7 +673,7 @@
      */
     public boolean setBlockMetadata(int par1, int par2, int par3, int par4)
     {
-        ExtendedBlockStorage var5 = this.storageArrays[par2 >> 4];
+        ExtendedBlockStorage var5 = (par2 >> 4 >= storageArrays.length || par2 >> 4 < 0 ? null : storageArrays[par2 >> 4]);
 
         if (var5 == null)
         {
@@ -646,7 +693,7 @@
                 var5.setExtBlockMetadata(par1, par2 & 15, par3, par4);
                 int var7 = var5.getExtBlockID(par1, par2 & 15, par3);
 
-                if (var7 > 0 && Block.blocksList[var7] instanceof BlockContainer)
+                if (var7 > 0 && Block.blocksList[var7] != null && Block.blocksList[var7].hasTileEntity(var5.getExtBlockMetadata(par1, par2 & 15, par3)))
                 {
                     TileEntity var8 = this.getChunkBlockTileEntity(par1, par2, par3);
 
@@ -667,7 +714,7 @@
      */
     public int getSavedLightValue(EnumSkyBlock par1EnumSkyBlock, int par2, int par3, int par4)
     {
-        ExtendedBlockStorage var5 = this.storageArrays[par3 >> 4];
+        ExtendedBlockStorage var5 = (par3 >> 4 >= storageArrays.length || par3 >> 4 < 0 ? null : storageArrays[par3 >> 4]);
         return var5 == null ? par1EnumSkyBlock.defaultLightValue : (par1EnumSkyBlock == EnumSkyBlock.Sky ? var5.getExtSkylightValue(par2, par3 & 15, par4) : (par1EnumSkyBlock == EnumSkyBlock.Block ? var5.getExtBlocklightValue(par2, par3 & 15, par4) : par1EnumSkyBlock.defaultLightValue));
     }
 
@@ -677,6 +724,11 @@
      */
     public void setLightValue(EnumSkyBlock par1EnumSkyBlock, int par2, int par3, int par4, int par5)
     {
+        if (par3 >> 4 >= storageArrays.length || par3 >> 4 < 0)
+        {
+            return;
+        }
+        
         ExtendedBlockStorage var6 = this.storageArrays[par3 >> 4];
 
         if (var6 == null)
@@ -710,7 +762,7 @@
      */
     public int getBlockLightValue(int par1, int par2, int par3, int par4)
     {
-        ExtendedBlockStorage var5 = this.storageArrays[par2 >> 4];
+        ExtendedBlockStorage var5 = (par2 >> 4 >= storageArrays.length || par2 >> 4 < 0 ? null : storageArrays[par2 >> 4]);
 
         if (var5 == null)
         {
@@ -812,34 +864,31 @@
     {
         ChunkPosition var4 = new ChunkPosition(par1, par2, par3);
         TileEntity var5 = (TileEntity)this.chunkTileEntityMap.get(var4);
+        
+        if (var5 != null && var5.isInvalid())
+        {
+            chunkTileEntityMap.remove(var4);
+            var5 = null;
+        }
 
         if (var5 == null)
         {
             int var6 = this.getBlockID(par1, par2, par3);
-
-            if (var6 <= 0 || !Block.blocksList[var6].hasTileEntity())
+            int meta = getBlockMetadata(par1, par2, par3);
+            if (var6 <= 0 || Block.blocksList[var6] == null || !Block.blocksList[var6].hasTileEntity(meta))
             {
                 return null;
             }
 
             if (var5 == null)
             {
-                var5 = ((BlockContainer)Block.blocksList[var6]).getBlockEntity();
+                var5 = Block.blocksList[var6].getTileEntity(meta);
                 this.worldObj.setBlockTileEntity(this.xPosition * 16 + par1, par2, this.zPosition * 16 + par3, var5);
             }
 
             var5 = (TileEntity)this.chunkTileEntityMap.get(var4);
         }
-
-        if (var5 != null && var5.isInvalid())
-        {
-            this.chunkTileEntityMap.remove(var4);
-            return null;
-        }
-        else
-        {
-            return var5;
-        }
+        return var5;
     }
 
     /**
@@ -854,7 +903,7 @@
 
         if (this.isChunkLoaded)
         {
-            this.worldObj.loadedTileEntityList.add(par1TileEntity);
+            this.worldObj.addTileEntity(par1TileEntity);
         }
     }
 
@@ -869,8 +918,14 @@
         par4TileEntity.yCoord = par2;
         par4TileEntity.zCoord = this.zPosition * 16 + par3;
 
-        if (this.getBlockID(par1, par2, par3) != 0 && Block.blocksList[this.getBlockID(par1, par2, par3)] instanceof BlockContainer)
+        int id = getBlockID(par1, par2, par3);
+        if (id > 0 && Block.blocksList[id] != null && Block.blocksList[id].hasTileEntity(getBlockMetadata(par1, par2, par3)))
         {
+            TileEntity old = (TileEntity)chunkTileEntityMap.get(var5);
+            if (old != null)
+            {
+                old.invalidate();
+            }
             par4TileEntity.validate();
             this.chunkTileEntityMap.put(var5, par4TileEntity);
         }
@@ -906,6 +961,7 @@
         {
             this.worldObj.addLoadedEntities(this.entityLists[var1]);
         }
+        ForgeHooks.onChunkLoad(worldObj, this);
     }
 
     /**
@@ -926,6 +982,7 @@
         {
             this.worldObj.unloadEntities(this.entityLists[var3]);
         }
+        ForgeHooks.onChunkUnload(worldObj, this);
     }
 
     /**
@@ -942,8 +999,8 @@
      */
     public void getEntitiesWithinAABBForEntity(Entity par1Entity, AxisAlignedBB par2AxisAlignedBB, List par3List)
     {
-        int var4 = MathHelper.floor_double((par2AxisAlignedBB.minY - 2.0D) / 16.0D);
-        int var5 = MathHelper.floor_double((par2AxisAlignedBB.maxY + 2.0D) / 16.0D);
+        int var4 = MathHelper.floor_double((par2AxisAlignedBB.minY - World.MAX_ENTITY_RADIUS) / 16.0D);
+        int var5 = MathHelper.floor_double((par2AxisAlignedBB.maxY + World.MAX_ENTITY_RADIUS) / 16.0D);
 
         if (var4 < 0)
         {
@@ -990,8 +1047,8 @@
      */
     public void getEntitiesOfTypeWithinAAAB(Class par1Class, AxisAlignedBB par2AxisAlignedBB, List par3List)
     {
-        int var4 = MathHelper.floor_double((par2AxisAlignedBB.minY - 2.0D) / 16.0D);
-        int var5 = MathHelper.floor_double((par2AxisAlignedBB.maxY + 2.0D) / 16.0D);
+        int var4 = MathHelper.floor_double((par2AxisAlignedBB.minY - World.MAX_ENTITY_RADIUS) / 16.0D);
+        int var5 = MathHelper.floor_double((par2AxisAlignedBB.maxY + World.MAX_ENTITY_RADIUS) / 16.0D);
 
         if (var4 < 0)
         {
@@ -1287,4 +1344,18 @@
             }
         }
     }
+    
+    /** FORGE: Used to remove only invalid TileEntities */
+    public void cleanChunkBlockTileEntity(int x, int y, int z) 
+    {
+        ChunkPosition position = new ChunkPosition(x, y, z);
+        if (isChunkLoaded)
+        {
+            TileEntity entity = (TileEntity)chunkTileEntityMap.get(position);
+            if (entity != null && entity.isInvalid())
+            {
+                chunkTileEntityMap.remove(position);
+            }
+        }
+    }
 }
