--- ../src_base/minecraft_server/net/minecraft/src/World.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft_server/net/minecraft/src/World.java	0000-00-00 00:00:00.000000000 -0000
@@ -9,8 +9,17 @@
 import java.util.Set;
 import java.util.TreeSet;
 
+import net.minecraft.src.forge.ForgeHooks;
+
 public class World implements IBlockAccess
 {
+	/**
+	 * Used in the getEntitiesWithinAABB functions to expand the search area for entities.
+	 * Modders should change this variable to a higher value if it is less then the radius
+	 * of one of there entities.
+	 */
+	public static double MAX_ENTITY_RADIUS = 2.0D;
+
     /**
      * boolean; if true updates scheduled by scheduleBlockUpdate happen immediately
      */
@@ -79,7 +88,7 @@
      * Contains a timestamp from when the World object was created. Is used in the session.lock file
      */
     private long lockTimestamp = System.currentTimeMillis();
-    protected int autosavePeriod = 40;
+    public int autosavePeriod = 40;
 
     /** Whether monsters are enabled or not. (1 = on, 0 = off) */
     public int difficultySetting;
@@ -219,6 +228,7 @@
 
         this.calculateInitialSkylight();
         this.calculateInitialWeather();
+        ForgeHooks.onWorldLoad(this);
     }
 
     /**
@@ -323,6 +333,7 @@
             }
 
             this.chunkProvider.saveChunks(par1, par2IProgressUpdate);
+            ForgeHooks.onWorldSave(this);
         }
     }
 
@@ -354,7 +365,8 @@
      */
     public boolean isAirBlock(int par1, int par2, int par3)
     {
-        return this.getBlockId(par1, par2, par3) == 0;
+        int id = getBlockId(par1, par2, par3);
+        return (id == 0 || Block.blocksList[id] == null || Block.blocksList[id].isAirBlock(this, par1, par2, par3));
     }
 
     /**
@@ -363,7 +375,8 @@
     public boolean blockHasTileEntity(int par1, int par2, int par3)
     {
         int var4 = this.getBlockId(par1, par2, par3);
-        return Block.blocksList[var4] != null && Block.blocksList[var4].hasTileEntity();
+        int md = this.getBlockMetadata(par1, par2, par3);
+        return Block.blocksList[var4] != null && Block.blocksList[var4].hasTileEntity(md);
     }
 
     /**
@@ -956,7 +969,9 @@
                 int var12 = this.getBlockMetadata(var8, var9, var10);
                 Block var13 = Block.blocksList[var11];
 
-                if ((!par4 || var13 == null || var13.getCollisionBoundingBoxFromPool(this, var8, var9, var10) != null) && var11 > 0 && var13.canCollideCheck(var12, par3))
+                if (var13 != null &&  //BugFix NPE on missconfigured block ids.
+                   (!par4 || var13 == null || var13.getCollisionBoundingBoxFromPool(this, var8, var9, var10) != null) &&
+                   var11 > 0 && var13.canCollideCheck(var12, par3))
                 {
                     MovingObjectPosition var14 = var13.collisionRayTrace(this, var8, var9, var10, par1Vec3D, par2Vec3D);
 
@@ -1604,7 +1619,7 @@
 
                     if (var7 != null)
                     {
-                        var7.removeChunkBlockTileEntity(var5.xCoord & 15, var5.yCoord, var5.zCoord & 15);
+                        var7.cleanChunkBlockTileEntity(var5.xCoord & 15, var5.yCoord, var5.zCoord & 15);
                     }
                 }
             }
@@ -1614,6 +1629,10 @@
 
         if (!this.entityRemoval.isEmpty())
         {
+            for (Object tile : entityRemoval)
+            {
+                ((TileEntity)tile).onChunkUnload();
+            }
             this.loadedTileEntityList.removeAll(this.entityRemoval);
             this.entityRemoval.clear();
         }
@@ -1634,14 +1653,16 @@
                     {
                         this.loadedTileEntityList.add(var8);
                     }
-
+                }
+                else
+                {
                     if (this.chunkExists(var8.xCoord >> 4, var8.zCoord >> 4))
                     {
                         Chunk var9 = this.getChunkFromChunkCoords(var8.xCoord >> 4, var8.zCoord >> 4);
 
                         if (var9 != null)
                         {
-                            var9.setChunkBlockTileEntity(var8.xCoord & 15, var8.yCoord, var8.zCoord & 15, var8);
+                            var9.cleanChunkBlockTileEntity(var8.xCoord & 15, var8.yCoord, var8.zCoord & 15);
                         }
                     }
 
@@ -1658,13 +1679,13 @@
 
     public void addTileEntity(Collection par1Collection)
     {
-        if (this.scanningTileEntities)
+        List dest = scanningTileEntities ? addedTileEntityList : loadedTileEntityList;
+        for(Object entity : par1Collection)
         {
-            this.addedTileEntityList.addAll(par1Collection);
-        }
-        else
-        {
-            this.loadedTileEntityList.addAll(par1Collection);
+            if(((TileEntity)entity).canUpdate())
+            {
+                dest.add(entity);
+            }
         }
     }
 
@@ -1686,7 +1707,7 @@
         int var4 = MathHelper.floor_double(par1Entity.posZ);
         byte var5 = 32;
 
-        if (!par2 || this.checkChunksExist(var3 - var5, 0, var4 - var5, var3 + var5, 0, var4 + var5))
+        if (!par2 || this.checkChunksExist(var3 - var5, 0, var4 - var5, var3 + var5, 0, var4 + var5) || ForgeHooks.canUpdateEntity(par1Entity))
         {
             par1Entity.lastTickPosX = par1Entity.posX;
             par1Entity.lastTickPosY = par1Entity.posY;
@@ -1910,6 +1931,13 @@
                         {
                             return true;
                         }
+                        else
+                        {
+                            if (var11 > 0 && Block.blocksList[var11] != null && Block.blocksList[var11].isBlockBurning(this, var8, var9, var10))
+                            {
+                                return true;
+                            }
+                        }
                     }
                 }
             }
@@ -2192,25 +2220,21 @@
      */
     public void setBlockTileEntity(int par1, int par2, int par3, TileEntity par4TileEntity)
     {
-        if (par4TileEntity != null && !par4TileEntity.isInvalid())
+        if (par4TileEntity == null || par4TileEntity.isInvalid())
         {
-            if (this.scanningTileEntities)
-            {
-                par4TileEntity.xCoord = par1;
-                par4TileEntity.yCoord = par2;
-                par4TileEntity.zCoord = par3;
-                this.addedTileEntityList.add(par4TileEntity);
-            }
-            else
-            {
-                this.loadedTileEntityList.add(par4TileEntity);
-                Chunk var5 = this.getChunkFromChunkCoords(par1 >> 4, par3 >> 4);
+            return;
+        }
+        List dest = scanningTileEntities ? addedTileEntityList : loadedTileEntityList;
+        if (par4TileEntity.canUpdate())
+        {
+            dest.add(par4TileEntity);
+        }
 
-                if (var5 != null)
-                {
-                    var5.setChunkBlockTileEntity(par1 & 15, par2, par3 & 15, par4TileEntity);
-                }
-            }
+        Chunk var5 = this.getChunkFromChunkCoords(par1 >> 4, par3 >> 4);
+
+        if (var5 != null)
+        {
+            var5.setChunkBlockTileEntity(par1 & 15, par2, par3 & 15, par4TileEntity);
         }
     }
 
@@ -2219,27 +2243,10 @@
      */
     public void removeBlockTileEntity(int par1, int par2, int par3)
     {
-        TileEntity var4 = this.getBlockTileEntity(par1, par2, par3);
-
-        if (var4 != null && this.scanningTileEntities)
-        {
-            var4.invalidate();
-            this.addedTileEntityList.remove(var4);
-        }
-        else
+        Chunk var5 = this.getChunkFromChunkCoords(par1 >> 4, par3 >> 4);
+        if (var5 != null)
         {
-            if (var4 != null)
-            {
-                this.addedTileEntityList.remove(var4);
-                this.loadedTileEntityList.remove(var4);
-            }
-
-            Chunk var5 = this.getChunkFromChunkCoords(par1 >> 4, par3 >> 4);
-
-            if (var5 != null)
-            {
-                var5.removeChunkBlockTileEntity(par1 & 15, par2, par3 & 15);
-            }
+            var5.removeChunkBlockTileEntity(par1 & 15, par2, par3 & 15);
         }
     }
 
@@ -2265,7 +2272,8 @@
      */
     public boolean isBlockNormalCube(int par1, int par2, int par3)
     {
-        return Block.isNormalCube(this.getBlockId(par1, par2, par3));
+        Block block = Block.blocksList[getBlockId(par1, par2, par3)];
+        return block != null && block.isBlockNormalCube(this, par1, par2, par3);
     }
 
     /**
@@ -2281,7 +2289,7 @@
             if (var5 != null && !var5.isEmpty())
             {
                 Block var6 = Block.blocksList[this.getBlockId(par1, par2, par3)];
-                return var6 == null ? false : var6.blockMaterial.isOpaque() && var6.renderAsNormalBlock();
+                return var6 == null ? false : isBlockNormalCube(par1, par2, par3);
             }
             else
             {
@@ -2540,6 +2548,7 @@
                 }
             }
         }
+        ForgeHooks.addActiveChunks(this, activeChunkSet);
 
         Profiler.endSection();
 
@@ -2863,7 +2872,7 @@
 
     private int computeBlockLightValue(int par1, int par2, int par3, int par4, int par5, int par6)
     {
-        int var7 = Block.lightValue[par5];
+        int var7 = (par5 == 0 || Block.blocksList[par5] == null ? 0 : Block.blocksList[par5].getLightValue(this, par2, par3, par4));
         int var8 = this.getSavedLightValue(EnumSkyBlock.Block, par2 - 1, par3, par4) - par6;
         int var9 = this.getSavedLightValue(EnumSkyBlock.Block, par2 + 1, par3, par4) - par6;
         int var10 = this.getSavedLightValue(EnumSkyBlock.Block, par2, par3 - 1, par4) - par6;
@@ -3196,10 +3205,10 @@
     public List getEntitiesWithinAABBExcludingEntity(Entity par1Entity, AxisAlignedBB par2AxisAlignedBB)
     {
         this.entitiesWithinAABBExcludingEntity.clear();
-        int var3 = MathHelper.floor_double((par2AxisAlignedBB.minX - 2.0D) / 16.0D);
-        int var4 = MathHelper.floor_double((par2AxisAlignedBB.maxX + 2.0D) / 16.0D);
-        int var5 = MathHelper.floor_double((par2AxisAlignedBB.minZ - 2.0D) / 16.0D);
-        int var6 = MathHelper.floor_double((par2AxisAlignedBB.maxZ + 2.0D) / 16.0D);
+        int var3 = MathHelper.floor_double((par2AxisAlignedBB.minX - MAX_ENTITY_RADIUS) / 16.0D);
+        int var4 = MathHelper.floor_double((par2AxisAlignedBB.maxX + MAX_ENTITY_RADIUS) / 16.0D);
+        int var5 = MathHelper.floor_double((par2AxisAlignedBB.minZ - MAX_ENTITY_RADIUS) / 16.0D);
+        int var6 = MathHelper.floor_double((par2AxisAlignedBB.maxZ + MAX_ENTITY_RADIUS) / 16.0D);
 
         for (int var7 = var3; var7 <= var4; ++var7)
         {
@@ -3220,10 +3229,10 @@
      */
     public List getEntitiesWithinAABB(Class par1Class, AxisAlignedBB par2AxisAlignedBB)
     {
-        int var3 = MathHelper.floor_double((par2AxisAlignedBB.minX - 2.0D) / 16.0D);
-        int var4 = MathHelper.floor_double((par2AxisAlignedBB.maxX + 2.0D) / 16.0D);
-        int var5 = MathHelper.floor_double((par2AxisAlignedBB.minZ - 2.0D) / 16.0D);
-        int var6 = MathHelper.floor_double((par2AxisAlignedBB.maxZ + 2.0D) / 16.0D);
+        int var3 = MathHelper.floor_double((par2AxisAlignedBB.minX - MAX_ENTITY_RADIUS) / 16.0D);
+        int var4 = MathHelper.floor_double((par2AxisAlignedBB.maxX + MAX_ENTITY_RADIUS) / 16.0D);
+        int var5 = MathHelper.floor_double((par2AxisAlignedBB.minZ - MAX_ENTITY_RADIUS) / 16.0D);
+        int var6 = MathHelper.floor_double((par2AxisAlignedBB.maxZ + MAX_ENTITY_RADIUS) / 16.0D);
         ArrayList var7 = new ArrayList();
 
         for (int var8 = var3; var8 <= var4; ++var8)
@@ -3350,6 +3359,11 @@
                 var8 = null;
             }
 
+            if (var8 != null && var8.isBlockReplaceable(this, par2, par3, par4))
+            {
+                var8 = null;
+            }
+
             return par1 > 0 && var8 == null && var9.canPlaceBlockOnSide(this, par2, par3, par4, par6);
         }
     }
@@ -3827,7 +3841,7 @@
      */
     public int getHeight()
     {
-        return 256;
+        return worldProvider.hasNoSky ? 128 : 256; //Nether is 128, overworld is 256, Bugfix related to Portal generation
     }
 
     /**
@@ -3864,4 +3878,38 @@
     {
         return this.getChunkProvider().findClosestStructure(this, par1Str, par2, par3, par4);
     }
+
+    /**
+     * Adds a single TileEntity to the world.
+     * TODO: Eloraam fully describe the bug this fixes.
+     * @param entity The TileEntity to be added.
+     */
+    public void addTileEntity(TileEntity entity)
+    {
+        List dest = scanningTileEntities ? addedTileEntityList : loadedTileEntityList;
+        if(entity.canUpdate())
+        {
+            dest.add(entity);
+        }
+    }
+
+    /**
+     * Determine if the given block is considered solid on the
+     * specified side.  Used by placement logic.
+     *
+     * @param x Block X Position
+     * @param y Block Y Position
+     * @param z Block Z Position
+     * @param side The Side in question
+     * @return True if the side is solid
+     */
+    public boolean isBlockSolidOnSide(int x, int y, int z, int side)
+    {
+        Block block = Block.blocksList[getBlockId(x, y, z)];
+        if(block == null)
+        {
+            return false;
+        }
+        return block.isBlockSolidOnSide(this, x, y, z, side);
+    }
 }
