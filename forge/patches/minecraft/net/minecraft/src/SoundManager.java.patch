--- ../src_base/minecraft/net/minecraft/src/SoundManager.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft/net/minecraft/src/SoundManager.java	0000-00-00 00:00:00.000000000 -0000
@@ -2,6 +2,9 @@
 
 import java.io.File;
 import java.util.Random;
+
+import net.minecraft.src.forge.ForgeHooksClient;
+import net.minecraft.src.forge.ModCompatibilityClient;
 import paulscode.sound.SoundSystem;
 import paulscode.sound.SoundSystemConfig;
 import paulscode.sound.codecs.CodecJOrbis;
@@ -36,10 +39,12 @@
     /** RNG. */
     private Random rand = new Random();
     private int ticksBeforeMusic;
+    
+    public static int MUSIC_INTERVAL = 12000;
 
     public SoundManager()
     {
-        this.ticksBeforeMusic = this.rand.nextInt(12000);
+        this.ticksBeforeMusic = this.rand.nextInt(MUSIC_INTERVAL);
     }
 
     /**
@@ -54,6 +59,8 @@
         {
             this.tryToSetLibraryAndCodecs();
         }
+        ModCompatibilityClient.audioModLoad(this);
+        ForgeHooksClient.onLoadSoundSettings(this);
     }
 
     /**
@@ -73,6 +80,8 @@
             SoundSystemConfig.setCodec("ogg", CodecJOrbis.class);
             SoundSystemConfig.setCodec("mus", CodecMus.class);
             SoundSystemConfig.setCodec("wav", CodecWav.class);
+            ModCompatibilityClient.audioModAddCodecs();
+            ForgeHooksClient.onSetupAudio(this);
             sndSystem = new SoundSystem();
             this.options.soundVolume = var1;
             this.options.musicVolume = var2;
@@ -161,10 +170,12 @@
                 }
 
                 SoundPoolEntry var1 = this.soundPoolMusic.getRandomSound();
+                var1 = ModCompatibilityClient.audioModPickBackgroundMusic(this, var1);
+                var1 = ForgeHooksClient.onPlayBackgroundMusic(this, var1);
 
                 if (var1 != null)
                 {
-                    this.ticksBeforeMusic = this.rand.nextInt(12000) + 12000;
+                    this.ticksBeforeMusic = this.rand.nextInt(MUSIC_INTERVAL) + MUSIC_INTERVAL;
                     sndSystem.backgroundMusic("BgMusic", var1.soundUrl, var1.soundName, false);
                     sndSystem.setVolume("BgMusic", this.options.musicVolume);
                     sndSystem.play("BgMusic");
@@ -196,6 +207,7 @@
                 float var17 = 0.0F;
                 sndSystem.setListenerPosition((float)var4, (float)var6, (float)var8);
                 sndSystem.setListenerOrientation(var12, var13, var14, var15, var16, var17);
+                ForgeHooksClient.onSetListener(this, par2, (float)var4, (float)var6, (float)var8, var12, var13, var14);
             }
         }
     }
@@ -214,6 +226,7 @@
             if (par1Str != null)
             {
                 SoundPoolEntry var8 = this.soundPoolStreaming.getRandomSoundFromSoundPool(par1Str);
+                var8 = ForgeHooksClient.onPlayStreaming(this, var8, par1Str, par2, par3, par4);
 
                 if (var8 != null && par5 > 0.0F)
                 {
@@ -225,6 +238,7 @@
                     float var9 = 16.0F;
                     sndSystem.newStreamingSource(true, var7, var8.soundUrl, var8.soundName, false, par2, par3, par4, 2, var9 * 4.0F);
                     sndSystem.setVolume(var7, 0.5F * this.options.soundVolume);
+                    ForgeHooksClient.playStreamingSource(sndSystem, var7, par2, par3, par4);
                     sndSystem.play(var7);
                 }
             }
@@ -239,6 +253,7 @@
         if (loaded && this.options.soundVolume != 0.0F)
         {
             SoundPoolEntry var7 = this.soundPoolSounds.getRandomSoundFromSoundPool(par1Str);
+            var7 = ForgeHooksClient.onPlaySound(this, var7, par1Str, par2, par3, par4, par5, par6);
 
             if (var7 != null && par5 > 0.0F)
             {
@@ -260,6 +275,7 @@
                 }
 
                 sndSystem.setVolume(var8, par5 * this.options.soundVolume);
+                ForgeHooksClient.playSoundSource(sndSystem, var8, par2, par3, par4);
                 sndSystem.play(var8);
             }
         }
@@ -274,6 +290,7 @@
         if (loaded && this.options.soundVolume != 0.0F)
         {
             SoundPoolEntry var4 = this.soundPoolSounds.getRandomSoundFromSoundPool(par1Str);
+            var4 = ForgeHooksClient.onPlaySoundEffect(this, var4, par1Str, par2, par3);
 
             if (var4 != null)
             {
@@ -289,8 +306,30 @@
                 par2 *= 0.25F;
                 sndSystem.setPitch(var5, par3);
                 sndSystem.setVolume(var5, par2 * this.options.soundVolume);
+                ForgeHooksClient.playSoundEffectSource(sndSystem, var5);
                 sndSystem.play(var5);
             }
         }
     }
+
+    /** Getters for private class members **/
+    public static SoundSystem getSoundSystem()
+    {
+        return sndSystem;
+    }
+
+    public SoundPool getSoundsPool()
+    {
+        return soundPoolSounds;
+    }
+    
+    public SoundPool getStreamingPool()
+    {
+        return soundPoolStreaming;
+    }
+    
+    public SoundPool getMusicPool()
+    {
+        return soundPoolMusic;
+    }
 }
