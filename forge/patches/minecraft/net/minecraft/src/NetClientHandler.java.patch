--- ../src_base/minecraft/net/minecraft/src/NetClientHandler.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft/net/minecraft/src/NetClientHandler.java	0000-00-00 00:00:00.000000000 -0000
@@ -5,6 +5,7 @@
 import java.io.DataInputStream;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.io.UnsupportedEncodingException;
 import java.net.InetAddress;
 import java.net.Socket;
 import java.net.URL;
@@ -15,6 +16,9 @@
 import java.util.Map;
 import java.util.Random;
 import net.minecraft.client.Minecraft;
+import net.minecraft.src.forge.ForgeHooks;
+import net.minecraft.src.forge.MessageManager;
+import net.minecraft.src.forge.packets.ForgePacket;
 
 public class NetClientHandler extends NetHandler
 {
@@ -46,6 +50,8 @@
         this.mc = par1Minecraft;
         Socket var4 = new Socket(InetAddress.getByName(par2Str), par3);
         this.netManager = new NetworkManager(var4, "Client", this);
+        
+        ForgeHooks.onConnect(netManager);
     }
 
     /**
@@ -73,6 +79,29 @@
         this.mc.thePlayer.entityId = par1Packet1Login.protocolVersion;
         this.currentServerMaxPlayers = par1Packet1Login.maxPlayers;
         ((PlayerControllerMP)this.mc.playerController).setCreative(par1Packet1Login.serverMode == 1);
+        
+        ForgeHooks.onLogin(netManager, par1Packet1Login);
+        
+        String[] channels = MessageManager.getInstance().getRegisteredChannels(netManager);
+        StringBuilder tmp = new StringBuilder();
+        tmp.append("Forge");
+        for(String channel : channels)
+        {
+            tmp.append("\0");
+            tmp.append(channel);
+        }
+        Packet250CustomPayload pkt = new Packet250CustomPayload(); 
+        pkt.channel = "REGISTER";
+        try 
+        {
+            pkt.data = tmp.toString().getBytes("UTF8");
+        } 
+        catch (UnsupportedEncodingException e) 
+        {
+            e.printStackTrace();
+        }
+        pkt.length = pkt.data.length;
+        addToSendQueue(pkt);
     }
 
     public void handlePickupSpawn(Packet21PickupSpawn par1Packet21PickupSpawn)
@@ -630,7 +659,19 @@
         }
         else if (par1Packet2Handshake.username.equals("-"))
         {
-            this.addToSendQueue(new Packet1Login(this.mc.session.username, 28));
+            /**
+             * We use some of the unused fields in Packet 001 Login to identify the user as having Forge installed.
+             * This allows modded clients to connect to Vanilla server without crashing.
+             * It also allows unmodded clients to connect to Forge server without crashing. 
+             * Its a bit of a dirty hack, but it doesnt interrupt the login flow, and its unused data.
+             * The C->S serverMode is set to the hash code of the string "Forge", this should provide a fairly unique 
+             * identifier so we are certain it is not random, and it is Forge installed.
+             * The C->S dimension is set to the current Forge build number, in case we need to do any quick version checks.
+             */
+            Packet1Login pkt = new Packet1Login(mc.session.username, 28);
+            pkt.serverMode    = ForgePacket.FORGE_ID;
+            pkt.field_48170_e = ForgeHooks.buildVersion;
+            addToSendQueue(pkt);
         }
         else
         {
@@ -643,7 +684,19 @@
 
                 if (var6.equalsIgnoreCase("ok"))
                 {
-                    this.addToSendQueue(new Packet1Login(this.mc.session.username, 28));
+                    /**
+                     * We use some of the unused fields in Packet 001 Login to identify the user as having Forge installed.
+                     * This allows modded clients to connect to Vanilla server without crashing.
+                     * It also allows unmodded clients to connect to Forge server without crashing. 
+                     * Its a bit of a dirty hack, but it doesnt interrupt the login flow, and its unused data.
+                     * The C->S serverMode is set to the hash code of the string "Forge", this should provide a fairly unique 
+                     * identifier so we are certain it is not random, and it is Forge installed.
+                     * The C->S dimension is set to the current Forge build number, in case we need to do any quick version checks.
+                     */
+                    Packet1Login pkt = new Packet1Login(mc.session.username, 28);
+                    pkt.serverMode    = ForgePacket.FORGE_ID;
+                    pkt.field_48170_e = ForgeHooks.buildVersion;
+                    addToSendQueue(pkt);
                 }
                 else
                 {
@@ -1074,4 +1127,44 @@
     {
         this.addToSendQueue(new Packet0KeepAlive(par1Packet0KeepAlive.randomId));
     }
+    
+    @Override
+    public void handleCustomPayload(Packet250CustomPayload pkt)
+    {
+        MessageManager inst = MessageManager.getInstance();
+        if (pkt.channel.equals("REGISTER")) 
+        {
+            try 
+            {
+                String channels = new String(pkt.data, "UTF8");
+                for (String channel : channels.split("\0")) 
+                {
+                    inst.addActiveChannel(netManager, channel);
+                }
+            } 
+            catch (UnsupportedEncodingException ex) 
+            {
+                ModLoader.throwException("NetClientHandler.handleCustomPayload", ex);
+            }
+        } 
+        else if (pkt.channel.equals("UNREGISTER")) 
+        {
+            try 
+            {
+                String channels = new String(pkt.data, "UTF8");
+                for (String channel : channels.split("\0")) 
+                {
+                    inst.removeActiveChannel(netManager, channel);
+                }
+            }
+            catch (UnsupportedEncodingException ex) 
+            {
+                ModLoader.throwException("NetClientHandler.handleCustomPayload", ex);
+            }
+        } 
+        else 
+        {
+            inst.dispatchIncomingMessage(netManager, pkt.channel, pkt.data);
+        }
+    }
 }
