--- ../src_base/minecraft/net/minecraft/src/EntityPlayer.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft/net/minecraft/src/EntityPlayer.java	0000-00-00 00:00:00.000000000 -0000
@@ -3,6 +3,8 @@
 import java.util.Iterator;
 import java.util.List;
 
+import net.minecraft.src.forge.*;
+
 public abstract class EntityPlayer extends EntityLiving
 {
     /** Inventory of the player */
@@ -210,6 +212,7 @@
             }
             else
             {
+                itemInUse.getItem().onUsingItemTick(itemInUse, this, itemInUseCount);
                 if (this.itemInUseCount <= 25 && this.itemInUseCount % 4 == 0)
                 {
                     this.updateItemUse(var1, 5);
@@ -618,7 +621,16 @@
      */
     public EntityItem dropOneItem()
     {
-        return this.dropPlayerItemWithRandomChoice(this.inventory.decrStackSize(this.inventory.currentItem, 1), false);
+        ItemStack stack = inventory.getCurrentItem();
+        if (stack == null)
+        {
+            return null;
+        }
+        if (stack.getItem().onDroppedByPlayer(stack, this))
+        {
+            return dropPlayerItemWithRandomChoice(inventory.decrStackSize(inventory.currentItem, 1), false);
+        }
+        return null;
     }
 
     /**
@@ -684,14 +696,22 @@
 
     /**
      * Returns how strong the player is against the specified block at this moment
+     * Deprecated in favor of the metadata-sensitive version
      */
+    @Deprecated
     public float getCurrentPlayerStrVsBlock(Block par1Block)
     {
-        float var2 = this.inventory.getStrVsBlock(par1Block);
+        return getCurrentPlayerStrVsBlock(par1Block, 0);
+    }
+    
+    public float getCurrentPlayerStrVsBlock(Block par1Block, int meta)
+    {
+        ItemStack stack = inventory.getCurrentItem();
+        float var2 = (stack == null ? 1.0F : stack.getItem().getStrVsBlock(stack, par1Block, meta));        
         float var3 = var2;
         int var4 = EnchantmentHelper.getEfficiencyModifier(this.inventory);
 
-        if (var4 > 0 && this.inventory.canHarvestBlock(par1Block))
+        if (var4 > 0 && ForgeHooks.canHarvestBlock(par1Block, this, meta))
         {
             var3 = var2 + (float)(var4 * var4 + 1);
         }
@@ -983,7 +1003,11 @@
             par2 = 1 + par2 >> 1;
         }
 
-        par2 = this.applyArmorCalculations(par1DamageSource, par2);
+        par2 = ArmorProperties.ApplyArmor(this, inventory.armorInventory, par1DamageSource, par2);
+        if (par2 <= 0)
+        {
+            return;
+        }
         par2 = this.applyPotionDamageCalculations(par1DamageSource, par2);
         this.addExhaustion(par1DamageSource.getHungerDamage());
         this.health -= par2;
@@ -1014,6 +1038,10 @@
      */
     public void useCurrentItemOnEntity(Entity par1Entity)
     {
+        if (!ForgeHooks.onEntityInteract(this, par1Entity, false))
+        {
+            return;
+        }
         if (!par1Entity.interact(this))
         {
             ItemStack var2 = this.getCurrentEquippedItem();
@@ -1044,7 +1072,9 @@
      */
     public void destroyCurrentEquippedItem()
     {
+        ItemStack orig = inventory.getCurrentItem();
         this.inventory.setInventorySlotContents(this.inventory.currentItem, (ItemStack)null);
+        ForgeHooks.onDestroyCurrentItem(this, orig);
     }
 
     /**
@@ -1073,6 +1103,15 @@
      */
     public void attackTargetEntityWithCurrentItem(Entity par1Entity)
     {
+        if (!ForgeHooks.onEntityInteract(this, par1Entity, true))
+        {
+            return;
+        }
+        ItemStack stack = getCurrentEquippedItem();
+        if (stack != null && stack.getItem().onLeftClickEntity(stack, this, par1Entity))
+        {
+            return;
+        }
         if (par1Entity.canAttackWithItem())
         {
             int var2 = this.inventory.getDamageVsEntity(par1Entity);
@@ -1215,6 +1254,12 @@
      */
     public EnumStatus sleepInBedAt(int par1, int par2, int par3)
     {
+        EnumStatus customSleep = ForgeHooks.sleepInBedAt(this, par1, par2, par3);
+        if (customSleep != null)
+        {
+            return customSleep;
+        }
+        
         if (!this.worldObj.isRemote)
         {
             if (this.isPlayerSleeping() || !this.isEntityAlive())
@@ -1697,6 +1742,7 @@
                     return 101;
                 }
             }
+            var3 = par1ItemStack.getItem().getIconIndex(par1ItemStack, par2, this, itemInUse, itemInUseCount);
         }
 
         return var3;
@@ -1869,4 +1915,30 @@
     }
 
     public void func_50009_aI() {}
+    
+    /**
+     * Opens a Gui for the player. 
+     * 
+     * @param mod The mod associated with the gui
+     * @param ID The ID number for the Gui
+     * @param world The World
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z Position
+     */
+    public void openGui(BaseMod mod, int ID, World world, int x, int y, int z)
+    {
+        if (this instanceof EntityPlayerSP)
+        {
+            IGuiHandler handler = MinecraftForge.getGuiHandler(mod);
+            if (handler != null)
+            {
+                GuiScreen screen = (GuiScreen)handler.getGuiElement(ID, this, world, x, y, z);
+                if (screen != null)
+                {
+                    ModLoader.getMinecraftInstance().displayGuiScreen(screen);
+                }
+            }
+        }
+    }
 }
