--- ../src_base/minecraft/net/minecraft/src/Chunk.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft/net/minecraft/src/Chunk.java	0000-00-00 00:00:00.000000000 -0000
@@ -8,6 +8,8 @@
 import java.util.Map;
 import java.util.Random;
 
+import net.minecraft.src.forge.ForgeHooks;
+
 public class Chunk
 {
     /**
@@ -131,7 +133,9 @@
                             this.storageArrays[var10] = new ExtendedBlockStorage(var10 << 4);
                         }
 
-                        this.storageArrays[var10].setExtBlockID(var6, var8 & 15, var7, var9);
+                        /** FORGE: The following change, a cast from unsigned byte to int,
+                         * fixes a vanilla bug when generating new chunks that contain a block ID > 127 */
+                        this.storageArrays[var10].setExtBlockID(var6, var8 & 15, var7, (int)var9 & 0xff);
                     }
                 }
             }
@@ -585,7 +589,7 @@
                 {
                     Block.blocksList[var8].onBlockRemoval(this.worldObj, var11, par2, var12);
                 }
-                else if (Block.blocksList[var8] instanceof BlockContainer && var8 != par4)
+                if (Block.blocksList[var8] != null && Block.blocksList[var8].hasTileEntity(getBlockMetadata(par1, par2, par3)))
                 {
                     this.worldObj.removeBlockTileEntity(var11, par2, var12);
                 }
@@ -629,32 +633,23 @@
                         Block.blocksList[par4].onBlockAdded(this.worldObj, var11, par2, var12);
                     }
 
-                    if (Block.blocksList[par4] instanceof BlockContainer)
+                    if (Block.blocksList[par4] != null && Block.blocksList[par4].hasTileEntity(par5))
                     {
                         var13 = this.getChunkBlockTileEntity(par1, par2, par3);
 
                         if (var13 == null)
                         {
-                            var13 = ((BlockContainer)Block.blocksList[par4]).getBlockEntity();
+                            var13 = Block.blocksList[par4].getTileEntity(par5);
                             this.worldObj.setBlockTileEntity(var11, par2, var12, var13);
                         }
 
                         if (var13 != null)
                         {
                             var13.updateContainingBlockInfo();
+                            var13.blockMetadata = par5;
                         }
                     }
                 }
-                else if (var8 > 0 && Block.blocksList[var8] instanceof BlockContainer)
-                {
-                    var13 = this.getChunkBlockTileEntity(par1, par2, par3);
-
-                    if (var13 != null)
-                    {
-                        var13.updateContainingBlockInfo();
-                    }
-                }
-
                 this.isModified = true;
                 return true;
             }
@@ -686,7 +681,7 @@
                 var5.setExtBlockMetadata(par1, par2 & 15, par3, par4);
                 int var7 = var5.getExtBlockID(par1, par2 & 15, par3);
 
-                if (var7 > 0 && Block.blocksList[var7] instanceof BlockContainer)
+                if (var7 > 0 && Block.blocksList[var7] != null && Block.blocksList[var7].hasTileEntity(var5.getExtBlockMetadata(par1, par2 & 15, par3)))
                 {
                     TileEntity var8 = this.getChunkBlockTileEntity(par1, par2, par3);
 
@@ -852,34 +847,33 @@
     {
         ChunkPosition var4 = new ChunkPosition(par1, par2, par3);
         TileEntity var5 = (TileEntity)this.chunkTileEntityMap.get(var4);
+        
+        if (var5 != null && var5.isInvalid())
+        {
+            chunkTileEntityMap.remove(var4);
+            var5 = null;
+        }
 
         if (var5 == null)
         {
             int var6 = this.getBlockID(par1, par2, par3);
-
-            if (var6 <= 0 || !Block.blocksList[var6].hasTileEntity())
+            int meta = getBlockMetadata(par1, par2, par3);
+            
+            if (var6 <= 0 || Block.blocksList[var6] == null || !Block.blocksList[var6].hasTileEntity(meta))
             {
                 return null;
             }
 
             if (var5 == null)
             {
-                var5 = ((BlockContainer)Block.blocksList[var6]).getBlockEntity();
+                var5 = Block.blocksList[var6].getTileEntity(meta);
                 this.worldObj.setBlockTileEntity(this.xPosition * 16 + par1, par2, this.zPosition * 16 + par3, var5);
             }
 
             var5 = (TileEntity)this.chunkTileEntityMap.get(var4);
         }
 
-        if (var5 != null && var5.isInvalid())
-        {
-            this.chunkTileEntityMap.remove(var4);
-            return null;
-        }
-        else
-        {
-            return var5;
-        }
+        return var5;
     }
 
     /**
@@ -894,7 +888,7 @@
 
         if (this.isChunkLoaded)
         {
-            this.worldObj.loadedTileEntityList.add(par1TileEntity);
+            this.worldObj.addTileEntity(par1TileEntity);
         }
     }
 
@@ -909,8 +903,14 @@
         par4TileEntity.yCoord = par2;
         par4TileEntity.zCoord = this.zPosition * 16 + par3;
 
-        if (this.getBlockID(par1, par2, par3) != 0 && Block.blocksList[this.getBlockID(par1, par2, par3)] instanceof BlockContainer)
+        int id = getBlockID(par1, par2, par3);
+        if (id > 0 && Block.blocksList[id] != null && Block.blocksList[id].hasTileEntity(getBlockMetadata(par1, par2, par3)))
         {
+            TileEntity old = (TileEntity)chunkTileEntityMap.get(var5);
+            if (old != null)
+            {
+                old.invalidate();
+            }
             par4TileEntity.validate();
             this.chunkTileEntityMap.put(var5, par4TileEntity);
         }
@@ -946,6 +946,7 @@
         {
             this.worldObj.addLoadedEntities(this.entityLists[var1]);
         }
+        ForgeHooks.onChunkLoad(worldObj, this);
     }
 
     /**
@@ -966,6 +967,7 @@
         {
             this.worldObj.unloadEntities(this.entityLists[var3]);
         }
+        ForgeHooks.onChunkUnload(worldObj, this);
     }
 
     /**
@@ -1228,6 +1230,16 @@
 
     public void func_48494_a(byte[] par1ArrayOfByte, int par2, int par3, boolean par4)
     {
+        
+        Iterator iterator = chunkTileEntityMap.values().iterator();
+        while(iterator.hasNext())
+        {
+            TileEntity tileEntity = (TileEntity)iterator.next();
+            tileEntity.updateContainingBlockInfo();
+            tileEntity.getBlockMetadata();
+            tileEntity.getBlockType();
+        }
+        
         int var5 = 0;
         int var6;
 
@@ -1324,13 +1336,27 @@
         }
 
         this.generateHeightMap();
-        Iterator var10 = this.chunkTileEntityMap.values().iterator();
-
-        while (var10.hasNext())
+        
+        List<TileEntity> invalidList = new ArrayList<TileEntity>();
+        iterator = chunkTileEntityMap.values().iterator();
+        while (iterator.hasNext())
         {
-            TileEntity var9 = (TileEntity)var10.next();
-            var9.updateContainingBlockInfo();
+            TileEntity tileEntity = (TileEntity)iterator.next();
+            int x = tileEntity.xCoord & 15;
+            int y = tileEntity.yCoord;
+            int z = tileEntity.zCoord & 15;
+            Block block = tileEntity.getBlockType();
+            if (block == null || block.blockID != getBlockID(x, y, z) || tileEntity.getBlockMetadata() != getBlockMetadata(x, y, z))
+            {
+                invalidList.add(tileEntity);
+            }
+            tileEntity.updateContainingBlockInfo();
         }
+        
+        for (TileEntity tileEntity : invalidList)
+        {
+            tileEntity.invalidate();
+        }
     }
 
     public BiomeGenBase func_48490_a(int par1, int par2, WorldChunkManager par3WorldChunkManager)
@@ -1435,4 +1461,18 @@
             }
         }
     }
+    
+    /** FORGE: Used to remove only invalid TileEntities */
+    public void cleanChunkBlockTileEntity(int x, int y, int z) 
+    {
+    	ChunkPosition position = new ChunkPosition(x, y, z);
+    	if (isChunkLoaded)
+    	{
+    		TileEntity entity = (TileEntity)chunkTileEntityMap.get(position);
+    		if (entity != null && entity.isInvalid())
+    		{
+    			chunkTileEntityMap.remove(position);
+    		}
+    	}
+    }
 }
