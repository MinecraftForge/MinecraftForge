--- ../src_base/minecraft/net/minecraft/src/BlockRedstoneWire.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft/net/minecraft/src/BlockRedstoneWire.java	0000-00-00 00:00:00.000000000 -0000
@@ -5,6 +5,8 @@
 import java.util.Random;
 import java.util.Set;
 
+import net.minecraft.src.forge.IConnectRedstone;
+
 public class BlockRedstoneWire extends Block
 {
     /**
@@ -76,7 +78,7 @@
      */
     public boolean canPlaceBlockAt(World par1World, int par2, int par3, int par4)
     {
-        return par1World.isBlockNormalCube(par2, par3 - 1, par4) || par1World.getBlockId(par2, par3 - 1, par4) == Block.glowStone.blockID;
+        return par1World.isBlockSolidOnSide(par2, par3 - 1, par4, 1) || par1World.getBlockId(par2, par3 - 1, par4) == Block.glowStone.blockID;
     }
 
     /**
@@ -459 +484 @@
+			 boolean normalCubeIMinus = this.blockAccess.isBlockNormalCube(par2 - 1, par3, par4);
+ 		     boolean normalCubeIPlus = this.blockAccess.isBlockNormalCube(par2 + 1, par3, par4);
+		 	 boolean normalCubeKMinus = this.blockAccess.isBlockNormalCube(par2, par3, par4 - 1);
+		 	 boolean normalCubeKPlus = this.blockAccess.isBlockNormalCube(par2, par3, par4 + 1);
+			 boolean var6 = isPoweredOrRepeater(par1IBlockAccess, par2 - 1, par3, par4, 1) || !normalCubeIMinus && isPoweredOrRepeater(par1IBlockAccess, par2 - 1, par3 - 1, par4, -1);
+            boolean var7 = isPoweredOrRepeater(par1IBlockAccess, par2 + 1, par3, par4, 3) || !normalCubeIPlus && isPoweredOrRepeater(par1IBlockAccess, par2 + 1, par3 - 1, par4, -2);
+            boolean var8 = isPoweredOrRepeater(par1IBlockAccess, par2, par3, par4 - 1, 2) || !normalCubeKMinus && isPoweredOrRepeater(par1IBlockAccess, par2, par3 - 1, par4 - 1, -3);
+            boolean var9 = isPoweredOrRepeater(par1IBlockAccess, par2, par3, par4 + 1, 0) || !normalCubeKPlus && isPoweredOrRepeater(par1IBlockAccess, par2, par3 - 1, par4 + 1, -4);
-			 boolean var6 = isPoweredOrRepeater(par1IBlockAccess, par2 - 1, par3, par4, 1) || !par1IBlockAccess.isBlockNormalCube(par2 - 1, par3, par4) && isPoweredOrRepeater(par1IBlockAccess, par2 - 1, par3 - 1, par4, -1);
-            boolean var7 = isPoweredOrRepeater(par1IBlockAccess, par2 + 1, par3, par4, 3) || !par1IBlockAccess.isBlockNormalCube(par2 + 1, par3, par4) && isPoweredOrRepeater(par1IBlockAccess, par2 + 1, par3 - 1, par4, -1);
-            boolean var8 = isPoweredOrRepeater(par1IBlockAccess, par2, par3, par4 - 1, 2) || !par1IBlockAccess.isBlockNormalCube(par2, par3, par4 - 1) && isPoweredOrRepeater(par1IBlockAccess, par2, par3 - 1, par4 - 1, -1);
-            boolean var9 = isPoweredOrRepeater(par1IBlockAccess, par2, par3, par4 + 1, 0) || !par1IBlockAccess.isBlockNormalCube(par2, par3, par4 + 1) && isPoweredOrRepeater(par1IBlockAccess, par2, par3 - 1, par4 + 1, -1);

            if (!par1IBlockAccess.isBlockNormalCube(par2, par3 + 1, par4))
            {
+                if (normalCubeIMinus && isPoweredOrRepeater(par1IBlockAccess, par2 - 1, par3 + 1, par4, -5))
-                if (par1IBlockAccess.isBlockNormalCube(par2 - 1, par3, par4) && isPoweredOrRepeater(par1IBlockAccess, par2 - 1, par3 + 1, par4, -1))
                {
                    var6 = true;
                }
+                if (normalCubeIPlus && isPoweredOrRepeater(par1IBlockAccess, par2 + 1, par3 + 1, par4, -6))
-                if (par1IBlockAccess.isBlockNormalCube(par2 + 1, par3, par4) && isPoweredOrRepeater(par1IBlockAccess, par2 + 1, par3 + 1, par4, -1))
                {
                    var7 = true;
                }
+                if (normalCubeKMinus && isPoweredOrRepeater(par1IBlockAccess, par2 + 1, par3 + 1, par4, -7))
-                if (par1IBlockAccess.isBlockNormalCube(par2, par3, par4 - 1) && isPoweredOrRepeater(par1IBlockAccess, par2, par3 + 1, par4 - 1, -1))
                {
                    var8 = true;
                }
+                if (normalCubeKPlus && isPoweredOrRepeater(par1IBlockAccess, par2 + 1, par3 + 1, par4, -8))
-                if (par1IBlockAccess.isBlockNormalCube(par2, par3, par4 + 1) && isPoweredOrRepeater(par1IBlockAccess, par2, par3 + 1, par4 + 1, -1))
                {
                    var9 = true;
                }
@@ -548,6 +550,10 @@
         }
         else if (var5 != Block.redstoneRepeaterIdle.blockID && var5 != Block.redstoneRepeaterActive.blockID)
         {
+            if (Block.blocksList[var5] instanceof IConnectRedstone)
+            {
+                return ((IConnectRedstone)Block.blocksList[var5]).canConnectRedstone(par0IBlockAccess, par1, par2, par3, par4);
+            }
-             return Block.blocksList[var5].canProvidePower() && par4 != -1;
+			  return Block.blocksList[var5].canProvidePower() && par4 < 0;
         }
         else
