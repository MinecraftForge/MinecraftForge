--- ../src_base/minecraft/net/minecraft/src/Entity.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft/net/minecraft/src/Entity.java	0000-00-00 00:00:00.000000000 -0000
@@ -3,6 +3,8 @@
 import java.util.List;
 import java.util.Random;
 
+import net.minecraft.src.forge.*;
+
 public abstract class Entity
 {
     private static int nextEntityID = 0;
@@ -173,6 +175,9 @@
      */
     public boolean ignoreFrustumCheck;
     public boolean isAirBorne;
+    
+    /** Forge: Used to store custom data for each entity. */
+    private NBTTagCompound customEntityData;
 
     public Entity(World par1World)
     {
@@ -214,6 +219,29 @@
     }
 
     protected abstract void entityInit();
+    
+    /**
+     * Returns a NBTTagCompound that can be used to store custom data for this entity.
+     * It will be written, and read from disc, so it persists over world saves.
+     * @return A NBTTagCompound
+     */
+    public NBTTagCompound getEntityData()
+    {
+    	if (customEntityData == null)
+    	{
+    		customEntityData = new NBTTagCompound();
+    	}
+    	return customEntityData;
+    }
+    
+    /**
+     * Used in model rendering to determine if the entity riding this entity should be in the 'sitting' position.
+     * @return false to prevent an entity that is mounted to this entity from displaying the 'sitting' animation.
+     */
+    public boolean shouldRiderSit()
+    {
+        return true;
+    }
 
     public DataWatcher getDataWatcher()
     {
@@ -329,6 +357,10 @@
     public void onEntityUpdate()
     {
         Profiler.startSection("entityBaseTick");
+        
+	/* NEW */
+	ForgeHooks.entityUpdateStartHandler(this);
+	/* END NEW */
 
         if (this.ridingEntity != null && this.ridingEntity.isDead)
         {
@@ -441,6 +473,11 @@
         }
 
         this.firstUpdate = false;
+        
+	/* NEW */
+	ForgeHooks.entityUpdateEndHandler(this);
+	/* END NEW */
+        
         Profiler.endSection();
     }
 
@@ -1318,6 +1355,10 @@
         par1NBTTagCompound.setShort("Fire", (short)this.fire);
         par1NBTTagCompound.setShort("Air", (short)this.getAir());
         par1NBTTagCompound.setBoolean("OnGround", this.onGround);
+        if (customEntityData != null)
+        {
+            par1NBTTagCompound.setCompoundTag("ForgeData", customEntityData);
+        }
         this.writeEntityToNBT(par1NBTTagCompound);
     }
 
@@ -1359,6 +1400,10 @@
         this.onGround = par1NBTTagCompound.getBoolean("OnGround");
         this.setPosition(this.posX, this.posY, this.posZ);
         this.setRotation(this.rotationYaw, this.rotationPitch);
+        if (par1NBTTagCompound.hasKey("ForgeData"))
+        {
+            customEntityData = par1NBTTagCompound.getCompoundTag("ForgeData");
+        }
         this.readEntityFromNBT(par1NBTTagCompound);
     }
 
@@ -1717,7 +1762,7 @@
      */
     public boolean isRiding()
     {
-        return this.ridingEntity != null || this.getFlag(2);
+        return (this.ridingEntity != null && ridingEntity.shouldRiderSit()) || this.getFlag(2);
     }
 
     /**
