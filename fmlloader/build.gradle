plugins {
    id 'org.cadixdev.licenser'
    id 'java-library'
    id 'eclipse'
}

configurations.forEach{ it.transitive = false }

dependencies {
    compileOnly(libs.nulls)

    api(libs.bundles.asm) // Needed by all the black magic
    api(libs.forgespi)
    api(libs.mergetool.api)
    api(libs.log4j.api)
    api(libs.slf4j.api)
    api(libs.guava)
    api(libs.gson)
    api(libs.maven.artifact)
    api(libs.apache.commons)
    api(libs.bundles.night.config)
    api(libs.modlauncher)
    api(libs.coremods)
    api(libs.mojang.logging)
    api(libs.jarjar.selector)
    api(libs.jarjar.meta)

    implementation(libs.jopt.simple)
    implementation(libs.securemodules)
    implementation(libs.accesstransformers)
    implementation(libs.terminalconsoleappender)
    implementation(libs.jimfs)

    implementation(libs.log4j.core)
    annotationProcessor(libs.log4j.core)

    testCompileOnly(libs.nulls)
    testRuntimeOnly(libs.bootstrap)
}

java {
    withSourcesJar()
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            'Automatic-Module-Name': 'net.minecraftforge.fmlloader',
            'Forge-Module-Layer':    'boot'
        ] as LinkedHashMap)
        attributes([
            'Specification-Title':   'FMLLoader',
            'Specification-Vendor':  'Forge Development LLC',
            'Specification-Version': '1',
            'Implementation-Title':  'FMLLoader',
            'Implementation-Vendor': 'Forge Development LLC',
            'Implementation-Version': FORGE_VERSION
        ] as LinkedHashMap, 'net/minecraftforge/fml/loading/')
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
}

license {
    header = rootProject.file('LICENSE-header.txt')
}

publishing.publications.mavenJava(MavenPublication) {
    from components.java
}

tasks.register('writeForgeVersionJson') {
    doLast {
        file('src/main/resources/forge_version.json').json = [
            'forge': FORGE_VERSION,
            'mc': MC_VERSION,
            'mcp': MCP_VERSION
        ] as LinkedHashMap
    }
}

// TODO: [Gradle][IntelliJ] Auto trigger this task on import.
eclipse {
    // Run when importing the project
    synchronizationTasks(writeForgeVersionJson)
}